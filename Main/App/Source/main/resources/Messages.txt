# Messages file for Macaroni.

# C++ Axioms

CppAxioms.AnnotationValueCreation=Character '@' signifies an Annotation value to be attached to the current Node.
CppAxioms.BlockCreation=Keyword "~block" creates a block of code in the current node.
CppAxioms.ClassCreation=Keyword "class" begins or continues classes.
CppAxioms.ConstructorCreation=Name of class without type creates constructor.
CppAxioms.DestructorCreation.TemplateNotAllowed=A template parameter list can't proceed a destructor.
CppAxioms.DestructorCreation=Tilda (~) followed by name of class begins destructor definition.
CppAxioms.EnumCreation=Keyword "enum" begins or continues enumerations.
CppAxioms.ExternCreation=Keyword "~extern" creates an external node.
CppAxioms.FunctionCreation=Function definition encountered.
CppAxioms.NamespaceCreation=Keyword "namespace" begins or continues namespaces.
CppAxioms.NamespaceRoot=The root of the Node system is a Namespace.
CppAxioms.PrimitiveChar=This node is a place holder for the C++ primitive "char."
CppAxioms.PrimitiveDouble=This node is a place holder for the C++ primitive "double."
CppAxioms.PrimitiveFloat=This node is a place holder for the C++ primitive "float."
CppAxioms.PrimitiveSignedInt=This node is a place holder for the C++ primitive "signed int."
CppAxioms.PrimitiveUnsignedInt=This node is a place holder for the C++ primitive "unsigned int."
CppAxioms.PrimitiveVoid=This node is a place holder for the C++ primitive "void."
CppAxioms.SetExistingHFilePath=H File paths can be set using the keyword "~hfile".
CppAxioms.TemplateParameterListCreation=A template parameter list is created by the keyword "template".
CppAxioms.TypedefCreation=Typedef is created by typedef keyword.
CppAxioms.VariableScopeCreation=Variable definition encountered.

# C++ Parser Exception Messages
CppParser.Access.KeyWordSeenTwice=An access keyword was seen twice.
CppParser.Annotation.AnnotationFoundOutsideOfAnyScope=An attribute (or '@' symbol) was found outside of any Node scope.  An attribute must be attached to a Node.
CppParser.Annotation.EndBracketOrSimpleNameExpectedInsideAnnotationTable=Either an ']' or a simple name for a table entry (no "::") was expected inside the attribute table.
CppParser.Annotation.CodeBlockExpectedAfterEquals=A code block was expected right after the equals sign.
CppParser.Annotation.NodeNameExpectedAfterAt=Expected attribute name following '@' symbol.
CppParser.Annotation.TableEntryEqualsExpected=Expected to see '=' following the table entry name ("::" not allowed as a name).
CppParser.Annotation.TableEntryValueExpected=Expected to see a value for the Annotation table entry following the name and '='.
CppParser.Annotation.ValueNoNodeByTheGivenNameFound=It seems as a Node value for an Annotation was specified here, but no Node by that name could be found (are you missing an ~import?).
CppParser.Annotation.ValueExpectedFollowingNodeName=No attribute value was found following the attribute name.
CppParser.BlockHPostdefNotAllowed=h-postdef blocks are no longer allowed. Create an explicit unit (use the ~unit keyword) and then make a normal "h" block where appropriate.
CppParser.BlockHPredefNotAllowed=h-predef blocks are no longer allowed. Use the ~import-h keyword to force an include statement to appear in the generated source's header file.
CppParser.BlockIdUnknown=Unknown id string for a block type. Valid block types are "h", "cpp", "cpp-include", "top" , and "bottom".
CppParser.BlockMustHaveUnit="cpp" and "h" blocks must have an explicit unit unless defined inside of a class (use the ~unit keyword to make a unit).
CppParser.BlockTopBottomMustBeOnUnit="top" and "bottom" can no longer be used inside a class or type.
CppParser.BlockTopBottomMustHaveUnit="top" and "bottom" must be part of an explicit unit (use the ~unit keyword to create a unit).
CppParser.Enum.NoID1=Identifier expected following enum keyword.
CppParser.Enum.Size.NoType=Expected to see a type specified for the enum size here.
CppParser.Enum.NoComma=Expected to see a comma seperating enum values.
CppParser.Enum.NoSemicolon=Expected to see a semicolon to end enum definition.
CppParser.Enum.NoStartBrace=Expected to see an opening brace here to start the definition of enum values.
CppParser.Enum.NoValueName=Expected to see the name of an enum value here.
CppParser.Enum.NoValueFollowingEquals=Expected to see an value expression following '=' in enum body.
CppParser.Class.NoID1=Identifier expected following class keyword.
CppParser.Class.NoOpeningBrace=Expected '{' following class signature.
CppParser.Class.NoEndingBrace=Expected '}' at this point to end class definition.
CppParser.Class.Inheritance.NoType=Expected a type to be specified as inheritance parent.
CppParser.CodeBlock.Expected=Expected to see a code block (i.e. "{ blah blah }").
CppParser.Constructor.ArgumentListExpected=Constructor argument list expected here.
CppParser.Constructor.ClassNameExpected=Class name expected following destructor symbol '~'.
CppParser.Expression.CouldNotMatch=Macaroni searched this spot for a generic C++ expression but couldn't find one.
CppParser.Directive.Unknown=Unknown keyword following Macaroni marker "~".
CppParser.Directive.HFileBadArgument=Bad text following "hfile".
CppParser.Directive.HFileFilePathExpected=A file path was expected here.
CppParser.Extern.NoID1=Identifier expected following ~extern keyword.
CppParser.Extern.PropertyAlreadySet=This property of the ~extern element has already been set.
CppParser.Extern.ExpectedEquals=Code block expected here (code between two braces).
CppParser.Extern.MissingCodeBlock=Code block expected here (code between two braces).
CppParser.Extern.MissingFilePath=Expected a file path here.
CppParser.Extern.SyntaxError=Syntax error.
CppParser.FileNameExpected=Expected a file name surrounded with quotes or ankle brackets.
CppParser.Friend.FriendKeywordOnlyForClasses=Keyword "friend" cannot be used outside of a class.
CppParser.Friend.CouldNotFindNode=Could not find information on type in friend declaration.  Sorry, but friend info must be specified early using either an import or forward reference.
CppParser.Friend.Modifier.Only.For.Globals=The friend modifier only makes sense for ~global members.  A non-global member is always your friend.
CppParser.Friend.MissingSemicolon=Missing semicolon on friend declaration.
CppParser.Function.SemicolonExpected=Semicolon expected following function definition.
CppParser.Global.AllowedForClassesOnly=The global keyword is allowed only within class definitions.
CppParser.GlobalKeyword.ClosingParanthesisExpected=Closing paranthesis expected following home of ~global node.
CppParser.GlobalKeyword.HomeNodeExpected=The home node of the ~global node being defined was expected to be specified following the first paranthesis.
CppParser.Import.NameNotFound=Identifier expected following keyword "import."
CppParser.Import.SemicolonExpected=Expected ';' following import identifier.
CppParser.Operator.InvalidOperator=The text following keyword "operator" does not represent an operator that can be overloaded.
CppParser.Namespace.NoID1=Identifier expected following namespace keyword.
CppParser.Namespace.NoEndingBrace=Syntax error while searching for '}' to complete sandwhich started on line {0}.
CppParser.Namespace.NoOpeningBrace=Syntax error after identifier keyword; expected '{'.
CppParser.Namespace.StatementEof=Expected EOF at this point, after seeing ~namespace and then scope filler.
CppParser.Document.SyntaxError=Syntax error.
CppParser.Function.ExpectedEndingParenthesis=Expected to see ')'.
CppParser.PureVirtual.ExpectedSemicolon=Following equals and zero expected a semicolon to indicate a pure virtual function or the default keyword.
CppParser.PureVirtual.ExpectedZero=Following equals expected to see a zero or default to indicate a pure virtual function or a default constructor.
CppParser.StringLiteralStartExpected=Expected to see the a String literal here.
CppParser.StringLiteralEndingExpected=Expected to see the ending of a String literal.
CppParser.NoExcept.MissingSecondParanthesis=Expected to see end of paranthesis for noexcept specifier here.
CppParser.Template.ExpectedClassOrFunction=Expected a class or function to follow a template parameter list.
CppParser.Template.ExpectedLT=Expected "<" following keyword "template."
CppParser.Template.ExpectedTypenameName=Expected a simple name following "typename" inside a template parameter list.
CppParser.Template.NodeNameNotUnique=The name {0} cannot be used as it was used previously in this template parameter list.
CppParser.Template.ExpectedComma=Expected a comma to extend a parameter list here or '>' to end it.
CppParser.Template.UnexpectedSyntax=Unexpected syntax inside template parameter list (Macaroni may not yet support what you are trying to do).
CppParser.ThrowSpecifier.MissingFirstParanthesis=Expected to see a pair of paranthesis following throw specifier.
CppParser.ThrowSpecifier.MissingSecondParanthesis=Expected to see end of paranthesis for throw specifier here (note: unfortunately Macaroni has not implemented non-empty type specifiers).
CppParser.Type.TypeDefinitionArgumentExpected=Expected to see type definition within ankle brackets.
CppParser.Type.TypeDefinitionCommaOrClosingBracketExpected=Expected to see "," or ">" here.
CppParser.Typedef.NoName=No name was given for typedef following type definition.
CppParser.Typedef.NoSemicolon=No semicolon found for typedef.
CppParser.Typedef.NoTypeDefinitionFound=Did not find a valid type definition following "typedef" keyword.
CppParser.Unit.CppFileNoEquals=Expected to see an equals sign following ~cppfile.
CppParser.Unit.HFileNoEquals=Expected to see an equals sign following ~hfile.
CppParser.Unit.NoID1=Identifier expected following ~unit keyword.
CppParser.Unit.NoLegacy=Cannot define units when in legacy (manifest) mode.
CppParser.Unit.NoEndingBrace=Ending brace expected to close block begun on line {0}.
CppParser.Unit.NoOpeningBrace=Expected an opening brace following the ~unit declaration.
CppParser.Unit.PlatformNoEquals=Missing equals after unit platform keyword.
CppParser.Unit.StatementEof=Expected EOF at line {0}.
CppParser.Unit.TypeNoEquals=Expected to see an equals sign following the ~type.
CppParser.Unit.TypeNoName=Expected to see a name following "~type =".
CppParser.Variable.CvQualifierMaybeBeforeVar=Identifier was expected following keyword a cv qualifier ("const", "mutable", or "volatile").
CppParser.Variable.CvQualifierSeenTwice=The const qualifier keyword was seen twice in this location. Did you mean to put it before or after another symbol?
CppParser.Variable.ConstSeenWithoutSpace=No space was seen following const.
CppParser.Variable.FriendNotAllowedForArg=Keyword "~friend" is not allowed for function arguments.
CppParser.Variable.GlobalHomeNodeSpecifierMakesNoSenseWhenHidden=Specifying a home node with the ~global keyword doesn't make sense when the acess is ~hidden, because the Node will always be forced into the anonymous namespace of the CPP file.
CppParser.Variable.GlobalNotAllowedForArg=Keyword "~global" is not allowed for function arguments.
CppParser.Variable.InlineNotAllowedForVariable=Keyword "inline" is not allowed for variables.
CppParser.Variable.MustFollowGlobalKeyword=Keyword "global" must be followed by member definition.
CppParser.Variable.NameExpected=Variabler identifier expected.
CppParser.Variable.PublicGlobalStaticMakesNoSense=A public global static does not work; "static" will force the node to be visible on in the compilation block its seen; i.o.w. other entities which might import it and thus include its header file from their C++ files will have linker errors as the node will remain undefined. Consider making this a private static global or a public non-static global.
CppParser.Variable.SemicolonExpected=Expected ';' following variable identifier.
CppParser.Variable.StaticNotAllowedForArg=Keyword "static" is not allowed for function arguments.
CppParser.Variable.TemplateNotAllowed=Template parameter list was seen before what looked like a variable.
CppParser.Variable.UnknownTypeName=Unknown type name for variable.  Are you missing an import statement or forward declaration?
CppParser.Variable.VirtualNotAllowedForArg=Keyword "virtual" not allowed for function arguments.

MacaroniAxioms.Annotation.Definition.Implicit=Annotations may be implicitly defined during use.

LuaGlue.LuaClassWraps=The annotation "Macaroni::Lua::LuaClass" when applied to a class causes that class to be wrapped with another class as Lua glue.

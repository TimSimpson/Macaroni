/**
 * Copyright 2011 Tim Simpson
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
~unit macaroni
    type=exe
;

~block "cpp":=

#include "Macaroni/ME.h"
#include "Macaroni/Build/BadArgException.h"
#include "Macaroni/Build/CmdLine.h"
#include "Macaroni/Environment/Console.h"
#include "Macaroni/Exception.h"
#include <Macaroni/Environment/LuaEnvironment.h>
#include <Macaroni/Environment/Messages.h>
#include "Macaroni/IO/FileSet.h"
#include <iostream>
#include <Macaroni/Environment/Timer.h>
#include <sstream>
#include <Macaroni/VersionNo.h>

#include "boost/program_options.hpp"

#ifdef MACARONI_COMPILE_TARGET_WINDOWS
	#include <tchar.h>
	#include "Macaroni/Platform/Windows/Strings.h"
	using Macaroni::Platform::Windows::NonWindowsString;
	using Macaroni::Platform::Windows::WindowsString;
#endif
#ifdef MACARONI_COMPILE_TARGET_LINUX
#endif


///////////////////////////////////////////////////////////////////////////////
//  Common
///////////////////////////////////////////////////////////////////////////////

using namespace Macaroni;
using namespace Macaroni;
using Macaroni::Build::CmdLine;
using Macaroni::Environment::Console;
using Macaroni::IO::FileSet;
using Macaroni::Environment::Messages;
using Macaroni::Environment::Timer;



int run(CmdLine & cmd)
{
	if (cmd.StartPrompt())
	{
		std::cout <<
			"\"startPrompt\" was specified- waiting for user to enter text and "
			"hit enter." << std::endl;
		std::string stuff;
		std::cin >> stuff;
	}

	Timer::SetPrintTimes(cmd.PrintTimes());
	const auto startTime = Timer::GetTime();

	try
	{
		Messages::Init(cmd.MessagesPath());
	}
	catch(const Macaroni::Exception & me)
	{
		// I'd put this in the try / catch below, except it's
		// way too obnoxious to get an exception only to
		// realize it's this. Step through it if you must.
		std::cerr << me.what() << std::endl
				  << "Error loading messages. Be sure the "
				  "--messagesPath argument points to a valid "
				  "message file." << std::endl;
		return 1;
	}

	int returnCode = 1;
	if (cmd.DebugMode())
	{
		std::cout << "Notice: Not catching errors." << std::endl;
		if (cmd.Execute())
		{
			returnCode = 0; // success
		}
	}
	else
	{
		try
		{
			if (cmd.Execute())
			{
				returnCode = 0; // success
			}
		}
		catch(Macaroni::Exception & ex)
		{
			std::cerr << "An error occurred.\n" << std::endl;
			std::cerr << ex.message()  << std::endl;
			returnCode = 1;
		}
		catch(std::exception & ex)
		{
			std::cerr << "An error occurred.\n" << std::endl;
			std::cerr << ex.what()  << std::endl;
			returnCode = 1;
		}
		catch(...)
		{
			std::cerr << "A major error occurred running "
			             "Macaroni! " << std::endl;
			returnCode = 1;
		}
	}
	const auto endTime = Timer::GetTime();
	const auto elapsed = endTime - startTime;

	std::cout << std::endl << "Program executed in " << elapsed
	          << "ms." << std::endl;

	if (cmd.EndPrompt())
	{
		std::cout << "press enter to quit.";
		char ch;
		std::cin >> ch;
	}
	return returnCode;
}

int generic_main(int argc, const char * argv[])
{
	std::cout << MACARONI_FILE_DESCRIPTION << std::endl;
	std::cout << "Version " << MACARONI_VERSION_STRING <<
		" built at " << BUILD_TIMESTAMP_LOCAL << std::endl;
	std::cout << std::endl;

	// Initialize timer.
	Timer::Init();

	Console output(0);

	CmdLine cmd(argc, argv, output);
	if (cmd.InitialReturnCode())
	{
		return cmd.InitialReturnCode().get();
	}
	else
	{
		output.SetVerbose(cmd.Verbose());
		return run(cmd);
	}
}

///////////////////////////////////////////////////////////////////////////////
//  Windows
///////////////////////////////////////////////////////////////////////////////
#ifdef MACARONI_COMPILE_TARGET_WINDOWS

void convert(std::wstring & original, std::string & rtnString)
{
	std::stringstream ss;
	for(unsigned int i = 0; i < original.size(); i ++)
	{
		ss << ((char)original[i]);
	}
	rtnString = ss.str();
}

int main(int argc, const char * argv[])
{
	return generic_main(argc, argv);
}

#endif // COMPILE_TARGET_WINDOWS

///////////////////////////////////////////////////////////////////////////////
//  Linux
///////////////////////////////////////////////////////////////////////////////
#ifdef MACARONI_COMPILE_TARGET_LINUX

// This hack facilitates Macaroni::IO::Paths::GetExePath.
namespace Macaroni { namespace IO {
std::string CURRENT_EXE_PATH;
} };

int main(int argc, const char * argv[])
{
	if (argc < 1)
	{
		std::cerr << "Less than one argument?! But how could that be?!!";
		return -500; // Negative 500 is super bad.
	}
	Macaroni::IO::CURRENT_EXE_PATH = argv[0];
	return generic_main(argc, argv);
}
#endif // COMPILE_TARGET_LINUX


/**
 * Copyright 2011 Tim Simpson
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
~import Macaroni::Exception;
~import Macaroni::Model::FileName;
~import Macaroni::Model::FileNamePtr;
~import boost::format;
~import Macaroni::IO::GeneratedFileWriter;
~import Macaroni::IO::GeneratedFileWriterPtr;
~import Macaroni::IO::GeneratedFileWriterLuaMetaData;
~import boost::optional;
~import lua_State;
~import Macaroni::Environment::LuaEnvironment;
~import luaL_Reg;
~import boost::filesystem::path;
~import Macaroni::IO::Path;
~import Macaroni::IO::PathPtr;
~import Macaroni::IO::PathLuaMetaData;
~import Macaroni::Parser::TextIterator;
~import Macaroni::Model::Source;
~import Macaroni::Model::SourcePtr;
~import std::string;
~import Macaroni::StringException;
~import std::stringstream;
~import Macaroni::Parser::TextIterator;

~namespace Macaroni::Doc;


/**
 * Parses variant HTML files which have embedded special characters.
 * If it encounters <~#include "filename" ~> it will include the file, given by a
 * file path relative to the current file.
 * <~#include <filename> ~> denotes an path relative to some known spot- this makes
 * it possible to make things relative to a known point, such as commonly
 * included elements.
 * <~#path is used to print out a file path.
 * Second, if it sees <~= expression ~> it will execute whatever is in
 * "expression" as a Lua chunk and output the answer (this is why it needs
 * a Lua state).
 * Finally, if it sees <~ code ~> it will execute arbitrary Lua code.
 */
class MDocParser
{
	~block "cpp-include"
	{
		#include <Macaroni/LuaCompat.h>
		#include <boost/algorithm/string/predicate.hpp>
	}

	private TextIterator & itr;
	private lua_State * L;
	/** The path of the file we're parsing. */
	private PathPtr path;
	// Anytime we print a Path out, prefix it with this.
	private const std::string pathPrefix;
	private GeneratedFileWriterPtr writer;

	public MDocParser(lua_State * L, TextIterator & itr,
					  const std::string & pathPrefix,
				      PathPtr inputPath, GeneratedFileWriterPtr writer)
	:	itr(itr),
		L(L),
	    path(inputPath),
		pathPrefix(pathPrefix),
		writer(writer)
	{
		if (!path->IsDirectory())
		{
			throw Macaroni::StringException("The given path must be a directory.");
		}
	}

	~block "cpp"
	{
		namespace {

			static int luaParse(lua_State * L)
			{
				PathPtr in = PathLuaMetaData::GetInstance(L, 1);
				if (PathLuaMetaData::IsType(L, 2))
				{
					PathPtr out = PathLuaMetaData::GetInstance(L, 2);
					try
					{
						bool result = MDocParser::Parse(L, in, out);
						lua_pushboolean(L, result);
						return 1;
					}
					catch(const Macaroni::Exception & ex)
					{
						string msg = ex.message();
						return luaL_error(L, msg.c_str());
					}
					catch(const std::exception & ex)
					{
						return luaL_error(L, ex.what());
					}
				}
				else if (GeneratedFileWriterLuaMetaData::IsType(L, 2))
				{
					GeneratedFileWriterPtr w = GeneratedFileWriterLuaMetaData::GetInstance(L, 2);
					try
					{
						bool result = MDocParser::Parse(L, in, w);
						lua_pushboolean(L, result);
						return 1;
					}
					catch(const std::exception & ex)
					{
						return luaL_error(L, ex.what());
					}
				}
				else
				{
					return luaL_error(L, "Expected either a Path or a "
						                 "GeneratedFileWriter for argument #2.");
				}
			}

			static const struct luaL_Reg globalMethods[]=
			{
				{"Parse", luaParse},
				{nullptr, nullptr}
			};

		}
	}

	private bool directive()
	{
		if (itr.ConsumeWord("#"))
		{
			if (pathDirective())
			{
				return true;
			}
			else if (includeOrDumpFile())
			{
				return true;
			}
			else
			{
				std::stringstream msg;
				msg << "Unknown directive at ";
				SourcePtr src = itr.GetSource();
				msg << src->ToString();
				MACARONI_THROW(msg.str().c_str())
			}
		}
		return false;
	}

	private PathPtr findIncludeFilePathLocal(const std::string & file)
	{
		PathPtr includeFilePath = path->NewPathForceSlash(file);
		return includeFilePath;
	}

	private PathPtr findIncludeFilePathRoot(const std::string & file)
	{
		PathPtr includeFilePath = path->GetRoot()->NewPathForceSlash(file);
		return includeFilePath;
	}

	~hidden void getFileDetails(PathPtr & includeFilePath,
							    std::string & newPrefix)
	{
		itr.ConsumeWhitespace();
		if (!(includeRelativeLocal(includeFilePath, newPrefix)
			  || includeRelativeAbs(includeFilePath, newPrefix)))
		{
			std::stringstream msg;
			msg << "Unexpected character at ";
			SourcePtr src = itr.GetSource();
			msg << src->ToString();
			msg << ".  Expected '<' or '\"'.";
			throw Macaroni::StringException(msg.str().c_str());
		}
	}

	~hidden bool includeFile()
	{
		if (itr.ConsumeWord("include"))
		{
			PathPtr includeFilePath;
			std::string newPrefix;
			getFileDetails(includeFilePath, newPrefix);
			MDocParser::Parse(L, newPrefix, includeFilePath, writer);
			return true;
		}
		else
		{
			return false;
		}
	}

	~hidden void writeFile(const string filePath,
		                   const bool indent,
		                   const optional<string> printSection)
	{
		// Accept either -- or //
		//--MDOC-BEGIN or //MDOC-BEGIN
		//--MDOC-END or //MDOC-END
		const char * sectionStart = "MDOC-BEGIN";
		const int sizeOfSectionStart = 10;
		const char * sectionEnd = "MDOC-END";
		const int sizeOfSectionEnd = 8;
		bool inSection = !printSection;
		std::ifstream file(filePath);
		if (!file)
		{
			std::stringstream msg;
			msg << "Could not load file: "
			    << filePath;
			throw Macaroni::StringException(msg.str().c_str());
		}
		std::string line;
		bool skipLine;
		bool discoveredPrintSection = false;
		while(std::getline(file, line))
		{
			skipLine = false;
			if (line.length() > 2)
			{
				const auto subline = line.substr(2, string::npos);
				if (boost::starts_with(subline, sectionStart) &&
					subline.length() > sizeOfSectionStart + 1)
				{
					skipLine = true;
					// Note: depends on the trivia that if the printSection
					// is none, the below line should always be false.
					if (!inSection) // Don't bother if we're in a section.
					{
						string sec = subline.substr(sizeOfSectionStart + 1,
							                        string::npos);
						if (sec == printSection.get())
						{
							inSection = true;
							discoveredPrintSection = true;
						}
					}
				}
				if (boost::starts_with(subline, sectionEnd) &&
					subline.length() > sizeOfSectionEnd + 1)
				{
					skipLine = true;

					if (inSection && printSection)
					{
						string sec = subline.substr(sizeOfSectionEnd + 1,
							                        string::npos);
						if (sec == printSection.get())
						{
							inSection = false;
						}
					}
				}
			}
			if (inSection && !skipLine)
			{
				if (indent)
				{
					writer->Write("    ");
				}
				writer->WriteLine(line);
			}
		}
		if (printSection && !discoveredPrintSection)
		{
			std::stringstream msg;
			msg << "Could not find section " << printSection.get()
				<< " in file: " << filePath;
			throw Macaroni::StringException(msg.str().c_str());
		}
	}

	~hidden optional<string> getSectionName()
	{
		itr.ConsumeWhitespace();
		if (itr.ConsumeChar('"')) {
			stringstream s;
			while(!itr.Is('"'))
			{
				s << itr.Current();
				itr.Advance(1);
			}
			itr.Advance(1); // eat last quote.
			return s.str();
		}
		return boost::none;
	}
	~hidden bool dumpFile(bool indent=false)
	{
		if (itr.ConsumeWord(indent ? "dumpi" : "dump"))
		{
			PathPtr includeFilePath;
			std::string newPrefix;
			getFileDetails(includeFilePath, newPrefix);
			optional<string> section = getSectionName();
			writeFile(includeFilePath->GetAbsolutePath(),
				      indent, section);
			return true;
		}
		else
		{
			return false;
		}
	}

	~hidden bool dumpIndent()
	{
		return dumpFile(true);
	}

	private bool includeOrDumpFile()
	{
		return includeFile() || dumpIndent() || dumpFile();
	}

	private bool includeFileWith(char startsWith, char endsWith,
								 string & fileName)
	{
		if (itr.Current() == startsWith)
		{
			itr.Advance(1);
			std::stringstream fileNameS;
			while(itr.Current() != endsWith)
			{
				if (itr.Finished())
				{
					std::stringstream msg;
					msg << "Ran into end of file unexpectedtly while looking for ";
					msg << endsWith << " at ";
					SourcePtr src = itr.GetSource();
					msg << src->ToString();
					throw Macaroni::StringException(msg.str().c_str());
				}
				fileNameS << itr.Current();
				itr.Advance(1);
			}
			itr.Advance(1);
			fileName = fileNameS.str();
			return true;
		}
		else
		{
			return false;
		}
	}

	private std::string findNewPrefix(PathPtr newPath)
	{
		if (!newPath->IsDirectory())
		{
			newPath = newPath->GetParentPath();
		}
		std::stringstream ss;
		ss << pathPrefix;
		ss << path->GetStringBackToRoot();
		ss << newPath->GetRelativePath();
		ss << "/";
		std::string rtn = ss.str();
		if (rtn.size() == 1 && rtn[0] == '/')
		{
			return "";
		}
		return rtn;
	}

	private bool includeRelativeAbs(PathPtr & includeFilePath,
		                            std::string & newPrefix)
	{
		string file;
		if (!includeFileWith('<', '>', file))
		{
			return false;
		}
		includeFilePath = findIncludeFilePathRoot(file);
		PathPtr includeDir = includeFilePath->GetParentPath();
		newPrefix = findNewPrefix(includeDir);
		return true;
	}

	private bool includeRelativeLocal(PathPtr & includeFilePath,
									  std::string & newPrefix)
	{
		string file;
		if (!includeFileWith('"', '"', file))
		{
			return false;
		}
		includeFilePath = findIncludeFilePathLocal(file);
		PathPtr includeDir = includeFilePath->GetParentPath();
		newPrefix = findNewPrefix(includeDir);
		return true;
	}

	private bool lua()
	{
		/*class _l
		{
		private: GeneratedFileWriter
		public: static int print(lua_State * L)
			{

			}
		};*/
		if (itr.ConsumeWord("lua"))
		{
			std::string chunk = luaChunk(optional<string>());
			LuaEnvironment env(L);
			SourcePtr src = itr.GetSource();
			env.ParseString(src->ToString().c_str(), chunk.c_str());
			GeneratedFileWriterLuaMetaData::PutInstanceOnStack(L, writer);
			lua_setglobal(L, "writer");
			env.Run();
			return true;
		}
		return false;
	}

	private bool luaExpression()
	{
		if (itr.Current() == '=')
		{
			itr.Advance(1);
			TextIterator itrOld = itr;
			std::string chunk = luaChunk(optional<string>("return "));
			LuaEnvironment env(L);
			SourcePtr src = itr.GetSource();
			env.ParseString(src->ToString().c_str(), chunk.c_str());
			GeneratedFileWriterLuaMetaData::PutInstanceOnStack(L, writer);
			lua_setglobal(L, "writer");
			env.Run(1);
			if (!lua_isstring(L, -1))
			{
				std::stringstream ss;
				ss << "Expected a string to be returned from the lua expression "
					<< " at " << itrOld.GetSource()->ToString()
					<< ".";
				MACARONI_THROW(ss.str().c_str());
			}
			std::string value(lua_tostring(L, -1));
			writer->Write(value);
			return true;
		}
		return false;
	}

	private std::string luaChunk(optional<string> prefix)
	{
		std::stringstream chunk;
		if (!!prefix)
		{
			chunk << prefix.get();
		}
		while(!itr.ConsumeWord("~>"))
		{
			chunk << itr.Current();
			itr.Advance(1);
		}
		return chunk.str();
	}

	private bool macaroniTag()
	{
		if (itr.ConsumeWord("<~"))
		{
			if (directive())
			{
				itr.ConsumeWhitespace();
				if (!itr.ConsumeWord("~>"))
				{
					std::stringstream msg;
					msg << "Was expecting to see ~> at";
					SourcePtr src = itr.GetSource();
					msg << src->ToString();
					msg << ".";
					throw Macaroni::StringException(msg.str().c_str());
				}
			}
			else if (lua() || luaExpression())
			{
				// This space intentionally left blank.
			}
			else
			{
				std::stringstream msg;
				msg << "Unexpected character at ";
				SourcePtr src = itr.GetSource();
				msg << src->ToString();
				msg << ".";
				throw Macaroni::StringException(msg.str().c_str());
			}
			return true;
		}
		else
		{
			return false;
		}
	}

	/** Registers this method with Lua. */
	public static int OpenInLua(lua_State * L)
	{
		MACARONI_LUA_REGISTER_FOR_RETURN(L, "Macaroni.Doc.MDocParser", globalMethods);
		return 1;
	}

	public void Parse()
	{
		while(!itr.Finished())
		{
			if (!macaroniTag())
			{
				std::string s(1, itr.Current());
				writer->Write(s);
				itr.Advance(1);
			}
		}
	}

	public static bool Parse(lua_State * L, PathPtr input, PathPtr output)
	{
		boost::filesystem::path outputP(output->GetAbsolutePath());
		GeneratedFileWriterPtr writer(new GeneratedFileWriter(outputP));
		return Parse(L, input, writer);
	}

	public static bool Parse(lua_State * L, PathPtr input,
		                     GeneratedFileWriterPtr writer)
	{
		const std::string empty = "";
		return Parse(L, empty, input, writer);
	}

	public static bool Parse(lua_State * L, const string & pathPrefix,
			                 PathPtr input, GeneratedFileWriterPtr writer)
	{
		if (!input->IsRegularFile())
		{
			std::stringstream ss;
			ss << "Input path \""
				<< input->GetAbsolutePath()
				<< "\" does not refer to a regular file.";
			throw Macaroni::StringException("Input path ");
		}
		std::string fileContents;
		SourcePtr source;
		readFileIntoString(input, fileContents, source);

		TextIterator itr(fileContents.begin(), fileContents.end(), source);
		MDocParser p(L, itr, pathPrefix, input->GetParentPath(), writer);
		p.Parse();
		return true;
	}

	private bool pathDirective()
	{
		if (itr.ConsumeWord("path"))
		{
			itr.ConsumeWhitespace();
			if (!(pathRelativeLocal() || pathRelativeAbs()))
			{
				std::stringstream msg;
				msg << "Unexpected character at ";
				SourcePtr src = itr.GetSource();
				msg << src->ToString();
				msg << ".  Expected '<' or '\"'.";
				throw Macaroni::StringException(msg.str().c_str());
			}
			return true;
			return true;
		}
		return false;
	}

	private bool pathRelativeAbs()
	{
		string file;
		if (!includeFileWith('<', '>', file))
		{
			return false;
		}
		PathPtr includeFilePath = findIncludeFilePathRoot(file);
		writeRelativePath(includeFilePath);
		return true;
	}

	private bool pathRelativeLocal()
	{
		string file;
		if (!includeFileWith('"', '"', file))
		{
			return false;
		}
		PathPtr includeFilePath = findIncludeFilePathLocal(file);
		writeRelativePath(includeFilePath);
		return true;
	}

	private static void readFileIntoString(PathPtr input, std::string & output, SourcePtr & sourcePtr)
	{
		//std::string inputAsStr = input->GetAbsolutePath();
		sourcePtr = Source::Create(FileName::Create(*input), 1, 1);
		std::stringstream contents;
		std::ifstream file(input->GetAbsolutePath().c_str());
		if (!file.is_open())
		{
			std::stringstream ss;
			ss << "Could not open file " << input->GetAbsolutePath() << "!";
			throw Macaroni::StringException(ss.str().c_str());
		}
		std::string line;
		while(!file.eof())
		{
			std::getline(file, line);
			contents << line << "\n";
		}
		file.close();
		output = contents.str();
	}

	~hidden static inline string removeDuplicateSlashes(const string original)
	{
		std::string modified = original;
		bool seenSlash = false;
		for (size_t index = 0; index < modified.size(); index ++)
		{
			if (stringHasSlashAtIndex(modified, index))
			{
				if (seenSlash)
				{
					modified.erase(index, 1);
					index --;
				}
				else
				{
					seenSlash = true;
				}
			}
			else
			{
				seenSlash = false;
			}
		}
		return modified;
	}

	~hidden inline string removeStartSlashes(const std::string str)
	{
		std::string rel = str;
		while(rel.size() > 0 && stringHasSlashAtIndex(rel, 0))
		{
			rel = rel.substr(1);
		}
		return rel;
	}

	~hidden static inline bool stringHasSlashAtIndex(const string str,
		                                             const unsigned int index)
	{
		if (str.size() <= index)
		{
			MACARONI_THROW("Bad index to stringHasSlashAtIndex.");
		}
		return str[index] == '/' || str[index] == '\\';
	}

	private void writeRelativePath(PathPtr rPath)
	{
		const string rel = removeStartSlashes(rPath->GetRelativePath());
		stringstream ss;
		ss << pathPrefix;
		ss << rel;
		string p = removeDuplicateSlashes(removeStartSlashes(ss.str()));
		writer->Write(p);
	}

};

~import Macaroni::Core::BaseVisitor;
~import Macaroni::Model::Block;
~import Macaroni::Model::Cpp::Class;
~import Macaroni::Model::Cpp::ClassPtr;
~import Macaroni::Generators::Cpp::CodeText;
~import Macaroni::Generators::Cpp::CodeType;
~import Macaroni::Model::Cpp::Class;
~import Macaroni::Generators::Cpp::CppFileWriter;
~import Macaroni::Model::Cpp::Constructor;
~import Macaroni::Model::Cpp::ConstructorPtr;
~import Macaroni::Model::Cpp::ConstructorOverload;
~import Macaroni::Model::Cpp::ConstructorOverloadPtr;
~import Macaroni::Model::Cpp::Destructor;
~import Macaroni::Model::Element;
~import Macaroni::Model::ElementPtr;
~import boost::format;
~import Macaroni::Model::Cpp::Function;
~import Macaroni::Model::Cpp::FunctionOverload;
~import Macaroni::Model::Cpp::FunctionOverloadPtr;
~import Macaroni::Model::Project::LibraryTarget;
~import Macaroni::Model::Project::LibraryTargetPtr;
~import Macaroni::Model::Cpp::Namespace;
~import Macaroni::Model::Node;
~import Macaroni::Model::NodePtr;
~import Macaroni::Model::Project::TargetPtr;
~import Macaroni::Model::Cpp::Typedef;
~import Macaroni::Model::Cpp::Variable;
~import Macaroni::Model::Cpp::VariablePtr;
~import std::vector;
~import Macaroni::Core::Visitor;


~namespace Macaroni::Generators::Cpp;


// A visitor that writes out CodeText elements.
// This is what effectively produces how elements look and are arranged, though
// the text itself is coded into the CppFileWriter class.
class CodeTextProducer
{
    bool debugText;
    CppFileWriter & writer;

    public CodeTextProducer(bool debugText, CppFileWriter & writer)
    :   debugText(debugText),
        writer(writer)
    {
    }

    public void Write(CodeText & codeText, TargetPtr target, LibraryTargetPtr lib)
    {
        MACARONI_ASSERT(codeText.GetElement() != nullptr,
                        "Can't write null element!");
        const Element & constElement = *codeText.GetElement();
        // TODO: The visitor stuff needs to allow for const.
        Element & element = const_cast<Element &>(constElement);

        writer.InsertEmptyLine();
        if (debugText)
        {
            writer.Comment(str(boost::format("DEBUG : < WRITING CODETEXT %s")
                           % codeText));
        }
        switch(codeText.Type())
        {
            case CodeType::ForwardDeclaration:
                // Don't bother with this if it's an external library.
                if (element.OwnedBy(lib->CreateTargetPtr()))
                {
                    writeForwardDeclaration(element);
                }
                else
                {
                    writeIncludeStatement(element);
                }
                return;
            case CodeType::TypeDefinition:
                if (element.OwnedBy(target))
                {
                    // Only write this if you're in the actual unit.
                    writeTypeDefinition(element);
                }
                else
                {
                    writeIncludeStatement(element);
                }
                return;
            case CodeType::Implementation:
                if (element.OwnedBy(target))
                {
                    // Only write this if you're in the actual unit.
                    writeImplementation(element);
                }
                return;
            case CodeType::UsingStatement:
                writeUsingStatement(element);
                return;
            case CodeType::BlockTop:
                {
                    if (!element.OwnedBy(target)) { return; }
                    Block * blockPtr = dynamic_cast<Block *>(&element);
                    if (blockPtr && blockPtr->GetId() == "top")
                    {
                        writer.BlockContents(*blockPtr);
                    }
                }
                return;
            case CodeType::BlockBottom:
                {
                    if (!element.OwnedBy(target)) { return; }
                    Block * blockPtr = dynamic_cast<Block *>(&element);
                    if (blockPtr && blockPtr->GetId() == "bottom")
                    {
                        writer.BlockContents(*blockPtr);
                    }
                }
                return;
            default:
                MACARONI_ASSERT(false, "Bad type?");
        }
    }

// Define the visitors in the anonymous namespace to cut down the risk of
// Visual Studio problems.

~block "cpp" { namespace {

    struct IncludeStatementVisitor
    :   public BaseVisitor,
        public Visitor<Class>,
        public Visitor<FunctionOverload>,
        public Visitor<Variable>,
        public Visitor<Typedef>
    {
        CppFileWriter & writer;

        IncludeStatementVisitor(CppFileWriter & writer)
        :   writer(writer)
        {
        }

        virtual void Visit(Class & e)
        {
            writer.IncludeFile(e);
        }


        virtual void Visit(FunctionOverload & e)
        {
            writer.IncludeFile(e);
        }

        virtual void Visit(Typedef & e)
        {
            writer.IncludeFile(e);
        }

        virtual void Visit(Variable & e)
        {
            writer.IncludeFile(e);
        }
    };

    struct ForwardDeclarationVisitor
    :   public BaseVisitor,
        public Visitor<Class>,
        public Visitor<Element>,
        public Visitor<FunctionOverload>,
        public Visitor<Variable>,
        public Visitor<Typedef>
    {
        CppFileWriter & writer;

        ForwardDeclarationVisitor(CppFileWriter & writer)
        :   writer(writer)
        {
        }

        virtual void Visit(Class & e)
        {
            writer.EnterNamespace(e.GetNode()->GetParent());
            writer.WriteClassKeyword();
            writer.WriteNodeName(e.GetNode());
            writer.EndStatement();
        }

        virtual void Visit(Element & e)
        {
            writer.Comment(str(format("Can't handle element %s.")
                               % e.GetNodeRef().GetFullName()));
        }

        virtual void Visit(FunctionOverload & e)
        {

        }

        virtual void Visit(Typedef & e)
        {
            writer.EnterNamespace(e.GetNode()->GetParent());
            writer.WriteClassKeyword();
            writer.WriteNodeName(e.GetNode());
            writer.EndStatement();
        }

        virtual void Visit(Variable & e)
        {

        }
    };

    struct TypeDefinitionVisitor
    :   public BaseVisitor,
        public Visitor<Block>,
        public Visitor<Class>,
        public Visitor<Constructor>,
        public Visitor<ConstructorOverload>,
        public Visitor<Destructor>,
        public Visitor<Element>,
        public Visitor<Function>,
        public Visitor<FunctionOverload>,
        public Visitor<Variable>,
        public Visitor<Typedef>
    {
        Block * hPostDef;
        Class * owningClass;
        CppFileWriter & writer;

        TypeDefinitionVisitor(CppFileWriter & writer,
                              Class * owningClass=nullptr)
        :   hPostDef(nullptr),
            owningClass(owningClass),
            writer(writer)
        {
        }

        virtual void Visit(Block & b)
        {
            if (b.GetId() == "h")
            {
                writer.BlockContents(b);
            }
            else if (!owningClass &&
                     (b.GetId() == "h-predef" || b.GetId() == "cpp-include"))
            {
                // The blocks probably have include statements, so do this
                // first:
                writer.EnterRootNamespace();
                // Print these out, but only if we aren't iterating a class.
                writer.BlockContents(b);
            }
            else if (owningClass && b.GetId() == "h-postdef")
            {
                hPostDef = &b;
            }

        }

        virtual void Visit(Class & e)
        {
            NodePtr tpl = e.GetTemplateParameterList();
            if (!owningClass)
            {
                writer.EnterNamespace(e.GetNode()->GetParent());
            }

            writer.InsertEmptyLine();
            writer.CommentHeader(
                str(format("class %s") % e.GetNode()->GetName()),
                "Some description could in theory go here."
            );
            writer.TemplateParameterList(e);
            writer.ClassOrStructKeyword(e);
            if (!tpl)
            {
                writer.LibDecl();
            }
            writer.ClassName(e);
            writer.ClassParentList(e);
            writer.OpenBrace();


            // classFriends?
            // Print friend declarations
            for (auto & n : *(e.GetFriendNodes()))
            {
                auto c = n->GetElement<ClassPtr>();
                if (c)
                {
                    writer.FriendKeyword();
                    writer.FriendClassName(*c);
                    writer.EndStatement();
                }
                else
                {
                    auto fo = n->GetElement<FunctionOverloadPtr>();
                    if (fo)
                    {
                        writer.FriendKeyword();
                        writer.FriendFunctionOverloadName(*fo);
                    }
                    else
                    {
                        writer.Comment(str(format("I don't know how to make this "
                                                  "thing my friend: %s")
                                           % n->GetFullName()));
                    }
                }
            }

            // Iterate members.
            Node & classNode = e.GetNodeRef();
            vector<Block *> hPostDefBlocks;
            for (unsigned int i = 0; i < classNode.GetChildCount(); ++ i)
            {
                NodePtr child = classNode.GetChild(i);
                ElementPtr childElement = child->GetElement();
                if (childElement)
                {
                    TypeDefinitionVisitor cgev(writer, &e);
                    childElement->Accept(cgev);
                    // So wrong... ;_;
                    if (cgev.hPostDef)
                    {
                        hPostDefBlocks.push_back(cgev.hPostDef);
                    }
                }
            }
            // Write all the post def blocks
            for (Block * b : hPostDefBlocks)
            {
                writer.BlockContents(*b);
            }

            writer.CloseBraceForClass();
            writer.InsertEmptyLine();
        }

        virtual void Visit(Constructor & c)
        {
            auto func = [this](ConstructorOverload & co)
            {
                this->Visit(co);
            };

            c.GetNodeRef().IterateNodes<ConstructorOverload, decltype(func)>(func);
        }

        virtual void Visit(ConstructorOverload & co)
        {
            MACARONI_ASSERT(owningClass != nullptr, "Null owner for ctor?");
            writer.InsertEmptyLine();
            writer.ClassMemberAccess(co.GetAccess());
            if (co.IsVirtual())
            {
                writer.VirtualKeyword();
            }
            if (co.UsesInlineKeyword())
            {
                writer.InlineKeyword();
            }
            if (co.IsExplicit())
            {
                writer.ExplicitKeyword();
            }
            writer.ClassName(*owningClass);
            writer.FunctionArgumentList(co, true);
            writer.FunctionExceptionSpecifier(co);
            writer.FunctionHeaderBody(co);
        }

        virtual void Visit(Destructor & co)
        {
            MACARONI_ASSERT(owningClass != nullptr, "Null owner for dtor?");
            FunctionOverloadPtr foPtr = co.GetFunctionOverload();
            MACARONI_ASSERT(foPtr, "Destructor's function overload is null?");
            FunctionOverload & fo = *foPtr;

            writer.InsertEmptyLine();
            writer.ClassMemberAccess(fo.GetAccess());
            if (fo.IsVirtual())
            {
                writer.VirtualKeyword();
            }
            if (fo.UsesInlineKeyword())
            {
                writer.InlineKeyword();
            }
            writer.DestructorName(*owningClass);
            writer.FunctionArgumentList(fo, true);
            writer.FunctionExceptionSpecifier(fo);
            writer.FunctionHeaderBody(fo);
        }

        virtual void Visit(Element & e)
        {
            writer.Comment(str(format("Can't handle element %s.")
                               % e.GetNodeRef().GetFullName()));
        }

        virtual void Visit(Function & f)
        {
            auto func = [this](FunctionOverload & fo)
            {
                this->Visit(fo);
            };

            f.GetNodeRef().IterateNodes<FunctionOverload, decltype(func)>(func);
        }

        virtual void Visit(FunctionOverload & e)
        {
            if (!owningClass)
            {
                writer.EnterNamespace(e.GetNode()->GetParent()->GetParent());
                writer.InsertEmptyLine();
            }
            else
            {
                writer.NewLineIfNeeded();
                writer.ClassMemberAccess(e.GetAccess());
            }
            if (e.IsStatic())
            {
                writer.StaticKeyword();
            }
            if (e.IsVirtual())
            {
                writer.VirtualKeyword();
            }
            if (e.UsesInlineKeyword())
            {
                writer.InlineKeyword();
            }
            writer.Type(e.GetReturnType(), false);
            writer.Space();
            writer.WriteNodeName(e.GetNode()->GetParent());
            writer.FunctionArgumentList(e, true);
            writer.FunctionExceptionSpecifier(e);
            writer.FunctionHeaderBody(e);
        }

        virtual void Visit(Typedef & e)
        {
            if (owningClass)
            {
                writer.ClassMemberAccess(e.GetAccess());
            }
            else
            {
                writer.EnterNamespace(e.GetNode()->GetParent());
                writer.InsertEmptyLine();
            }

            writer.TypedefKeyword();
            writer.Type(e.GetType(), false);
            writer.Space();
            writer.WriteNodeName(e.GetNode());
            writer.EndStatement();
        }

        virtual void Visit(Variable & e)
        {
            if (owningClass)
            {
                writer.ClassMemberAccess(e.GetAccess());
            }
            writer.Type(e.GetType(), false);
            writer.Space();
            writer.WriteNodeName(e.GetNode());
            writer.EndStatement();
        }
    };

    struct UsingStatementVisitor
    :   public BaseVisitor,
        public Visitor<Class>,
        public Visitor<FunctionOverload>,
        public Visitor<Namespace>,
        public Visitor<Variable>,
        public Visitor<Typedef>
    {
        CppFileWriter & writer;

        UsingStatementVisitor(CppFileWriter & writer)
        :   writer(writer)
        {
        }

        virtual void Visit(Class & e)
        {
            writer.EnterNamespace(e.GetNode()->GetParent());
            writer.UsingStatement(e);
        }

        virtual void Visit(FunctionOverload & e)
        {
            writer.EnterNamespace(e.GetNode()->GetParent());
            writer.UsingStatement(e);
        }

        virtual void Visit(Namespace & e)
        {
            writer.EnterNamespace(e.GetNode()->GetParent());
            writer.UsingStatement(e);
        }

        virtual void Visit(Typedef & e)
        {
            writer.EnterNamespace(e.GetNode()->GetParent());
            writer.UsingStatement(e);
        }

        virtual void Visit(Variable & e)
        {
            writer.EnterNamespace(e.GetNode()->GetParent());
            writer.UsingStatement(e);
        }
    };

    struct ImplementationVisitor
    :   public BaseVisitor,
        public Visitor<Block>,
        public Visitor<Class>,
        public Visitor<Constructor>,
        public Visitor<ConstructorOverload>,
        public Visitor<Destructor>,
        public Visitor<Element>,
        public Visitor<Function>,
        public Visitor<FunctionOverload>,
        public Visitor<Variable>,
        public Visitor<Typedef>
    {
        Class * owningClass;
        CppFileWriter & writer;

        ImplementationVisitor(CppFileWriter & writer,
                              Class * owningClass=nullptr)
        :   owningClass(owningClass),
            writer(writer)
        {
        }

        virtual void Visit(Block & b)
        {
            writer.Comment("THIS IS A BLOCK!");
            writer.Comment(b.GetId());
            if (b.GetId() == "cpp")
            {
                writer.BlockContents(b);
            }
        }

        virtual void Visit(Class & e)
        {
            if (!owningClass)
            {
                writer.EnterNamespace(e.GetNode()->GetParent());
            }

            // Iterate members.
            Node & classNode = e.GetNodeRef();
            for (unsigned int i = 0; i < classNode.GetChildCount(); ++ i)
            {
                NodePtr child = classNode.GetChild(i);
                ElementPtr childElement = child->GetElement();
                if (childElement)
                {
                    ImplementationVisitor cgev(writer, &e);
                    childElement->Accept(cgev);
                }
            }
        }

        virtual void Visit(Constructor & c)
        {
            auto func = [this](ConstructorOverload & co)
            {
                this->Visit(co);
            };

            c.GetNodeRef().IterateNodes<ConstructorOverload, decltype(func)>(func);
        }

        virtual void Visit(ConstructorOverload & co)
        {
            if (co.UsesInlineKeyword() || !co.HasCodeBlock())
            {
                return;
            }
            MACARONI_ASSERT(owningClass != nullptr, "Null owner for ctor?");
            writer.InsertEmptyLine();
            writer.LibDecl();
            writer.ConstructorImplementationName(*owningClass);
            writer.FunctionArgumentList(co, true);
            writer.FunctionExceptionSpecifier(co);
            writer.ConstructorInitializerList(co);
            writer.FunctionCodeBlock(co);
        }

        virtual void Visit(Destructor & co)
        {
            MACARONI_ASSERT(owningClass != nullptr, "Null owner for dtor?");
            FunctionOverloadPtr foPtr = co.GetFunctionOverload();
            MACARONI_ASSERT(foPtr, "Destructor's function overload is null?");
            FunctionOverload & fo = *foPtr;
            if (fo.UsesInlineKeyword() || !fo.HasCodeBlock())
            {
                return;
            }

            writer.InsertEmptyLine();
            writer.LibDecl();
            writer.DestructorImplementationName(*owningClass);
            writer.FunctionArgumentList(fo, true);
            writer.FunctionExceptionSpecifier(fo);
            writer.FunctionCodeBlock(fo);
        }

        virtual void Visit(Element & e)
        {
            writer.Comment(str(format("Can't handle element %s.")
                               % e.GetNodeRef().GetFullName()));
        }

        virtual void Visit(Function & f)
        {
            auto func = [this](FunctionOverload & fo)
            {
                this->Visit(fo);
            };

            f.GetNodeRef().IterateNodes<FunctionOverload, decltype(func)>(func);
        }

        virtual void Visit(FunctionOverload & e)
        {
            if (e.UsesInlineKeyword() || !e.HasCodeBlock())
            {
                return;
            }
            if (!owningClass)
            {
                writer.EnterNamespace(e.GetNode()->GetParent()->GetParent());
                writer.InsertEmptyLine();
            }
            else
            {
                writer.InsertEmptyLine();
            }
            writer.LibDecl();
            writer.Type(e.GetReturnType(), false);
            writer.Space();
            writer.FunctionName(e);
            writer.FunctionArgumentList(e, true);
            writer.FunctionExceptionSpecifier(e);
            writer.FunctionCodeBlock(e);
        }

        virtual void Visit(Typedef & e)
        {
        }

        virtual void Visit(Variable & e)
        {
        }
    };


} }  // End anonymous namespace

    ~hidden void writeForwardDeclaration(Element & e)
    {
        ForwardDeclarationVisitor visitor(writer);
        e.Accept(visitor);
    }

    ~hidden void writeIncludeStatement(Element & e)
    {
        IncludeStatementVisitor visitor(writer);
        e.Accept(visitor);
    }

    ~hidden void writeTypeDefinition(Element & e)
    {
        TypeDefinitionVisitor visitor(writer);
        e.Accept(visitor);
    }

    ~hidden void writeImplementation(Element & e)
    {
        ImplementationVisitor visitor(writer);
        e.Accept(visitor);
    }

    ~hidden void writeUsingStatement(Element & e)
    {
        UsingStatementVisitor visitor(writer);
        e.Accept(visitor);
    }

};

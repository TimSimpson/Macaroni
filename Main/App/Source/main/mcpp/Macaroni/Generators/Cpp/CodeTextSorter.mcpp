~import MACARONI_ASSERT;
~import Macaroni::Generators::Cpp::CodeText;
~import std::cout;
~import Macaroni::Exceptions::SimpleStringException;
~import boost::format;
~import std::string;
~import std::vector;

~namespace Macaroni::Generators::Cpp;

class CodeTextSorter
// Accepts an arbitrary number of CodeText items and produces a sorted list.
// You start by adding a series of CodeText items with "Add", then call "Sort()"
// to get a sorted vector of CodeText pointers. Note that this never owns the
// pointers to any CodeText items.
{
    ~block "cpp-include"
    {
        #include "boost/graph/adjacency_list.hpp"
        #include "boost/graph/topological_sort.hpp"
        #include <deque>
        #include <iterator>
    }

    // divTop, divImpl, divBottom are fake CodeText items that exist to
    // help sort things. They divide the top- where certain special code blocks
    // that for example might enable or disable compilation live, the bottom,
    // which is at the very bottom of the code file and is similar, and the
    // "implementation", which for Cpp files is where the "internal" header
    // ends and the implementation starts.
    private CodeText * divTop;
    private CodeText * divImpl;
    private CodeText * divBottom;
    // This is the list of all code items which is used to sort everything.
    private vector<CodeText *> items;

    public CodeTextSorter(CodeText & divTop, CodeText & divImpl,
                          CodeText & divBottom)
    :   divTop(&divTop),
        divImpl(&divImpl),
        divBottom(&divBottom)
    {
    }

    public void Add(CodeText * ct)
    {
        MACARONI_ASSERT(ct != nullptr, "Can't add null!");
        for (CodeText * item : items)  // Don't add stuff we already have.
        {
            if (item == ct)
            {
                return;
            }
        }
        items.push_back(ct);  // Add this...
        for (CodeText * dep : ct->DependsOn())  // ... and every dependency.
        {
            Add(dep);
        }
    }

    public vector<CodeText *> Sort()
    {
        //http://www.boost.org/doc/libs/1_57_0/libs/graph/doc/using_adjacency_list.html

        // These lines construct the special graph type we use to sort
        // everything. We tell it this is a directed graph, and while we
        // use graphIds to sort, we store the CodeText pointer as a
        // property for each graph node.
        struct CodeTextTag {
            typedef boost::vertex_property_tag kind;
        };
        typedef boost::property<CodeTextTag, CodeText *> CodeTextProperty;
        typedef boost::adjacency_list
            <
                boost::vecS,
                boost::vecS,
                boost::directedS,
                CodeTextProperty
            >
            CodeTextGraph;

        CodeTextGraph graph(CodeText::MaxGraphId());

        // Now with the graph constructed, add_edge is used to establish
        // dependencies on node to another.

        // Add a dependency from the implementation to the top, in the rare
        // event there are no forward decls or typedefs.
        boost::add_edge(divImpl->GraphId(), divTop->GraphId(), graph);
        // Add dependency from divider bottom to implementation start in the
        // event there are no impls.
        boost::add_edge(divBottom->GraphId(), divImpl->GraphId(), graph);

        for (CodeText * ptr : items)
        {
            // This first switch establishes sort of global, simple
            // dependencies, such as the idea that any implementation text must
            // exist underneath the implementation divider (and therefore)
            // stay out of the header.
            switch(ptr->Type())
            {
                case CodeType::UsingStatement:
                case CodeType::Implementation:
                    // UsingStatement and Implementation has to be after impl
                    // start.
                    boost::add_edge(ptr->GraphId(),
                                    divImpl->GraphId(),
                                    graph);
                    // ensure the bottom divider stays at the bottom.
                    boost::add_edge(divBottom->GraphId(),
                                    ptr->GraphId(),
                                    graph);
                    break;
                case CodeType::TypeDefinition:
                case CodeType::ForwardDeclaration:
                    // This element depends on divider top...
                    boost::add_edge(ptr->GraphId(),
                                    divTop->GraphId(),
                                    graph);
                    // ...and the implementation start depends on this.
                    boost::add_edge(divImpl->GraphId(),
                                    ptr->GraphId(),
                                    graph);
                    break;
                case CodeType::BlockTop:
                    // the top divider depends on this top block.
                    boost::add_edge(divTop->GraphId(),
                                    ptr->GraphId(),
                                    graph);
                    break;
                case CodeType::BlockBottom:
                    // The bottom block depends on bottom divider.
                    boost::add_edge(ptr->GraphId(),
                                    divBottom->GraphId(),
                                    graph);
                    break;
                default:
                    break;
            }

            // Here is where the various code text elements begin to depend
            // on each other. For example, if you have a class that uses
            // another class as its parent, the first class establishes a
            // dependency to that other class elsewhere before this method is
            // called.
            for (CodeText * depPtr : ptr->DependsOn())
            {
                if (depPtr)
                {
                    boost::add_edge(ptr->GraphId(), depPtr->GraphId(), graph);
                }
            }
        }

        // This connects the graphIds to the actual CodeText items, so we
        // can retrieve them.
        boost::property_map<CodeTextGraph, CodeTextTag>::type ptrKey
            = boost::get(CodeTextTag(), graph);

        // Make sure it counts these...
        boost::put(ptrKey, divTop->GraphId(), divTop);
        boost::put(ptrKey, divImpl->GraphId(), divImpl);
        boost::put(ptrKey, divBottom->GraphId(), divBottom);

        for (CodeText * ptr : items)
        {
            boost::put(ptrKey, ptr->GraphId(), ptr);
        }

        // This is what calls the sort method.
        std::deque<int> results;
        try
        {
            boost::topological_sort(graph, std::back_inserter(results));
        }
        catch(const boost::not_a_dag & ex)
        {
            throwSortError();
        }

        /*
        vector<CodeText *> sortedList;
        vector<CodeText *> sortedImplementationList;
        for(auto itr = results.begin(); itr != results.end(); ++ itr)
        {
            CodeText * ptr = boost::get(ptrKey, *itr);
            // There can be nulls because the divider IDs didn't correspond
            // to an actual element. But even before that some of these numbers
            // still pointed to null. There's parts of this sorting library
            // I still don't fully grasp.
            if (ptr)
            {
                if (ptr->Type() == CodeType::Implementation)
                {
                    sortedImplementationList.push_back(ptr);
                }
                else
                {
                    sortedList.push_back(ptr);
                }
            }
        }
        for (auto itr = sortedImplementationList.begin();
             itr != sortedImplementationList.end(); ++ itr)
        {
            sortedList.push_back(*itr);
        }
        return sortedList;*/

        vector<CodeText *> sortedList;
        for (auto itr = results.begin();
             itr != results.end(); ++ itr)
        {
            CodeText * ptr = boost::get(ptrKey, *itr);
            // There can be nulls because the divider IDs didn't correspond
            // to an actual element. But even before that some of these numbers
            // still pointed to null. There's parts of this sorting library
            // I still don't fully grasp.
            if (ptr)
            {
                sortedList.push_back(ptr);
            }
        }
        return sortedList;
    }

    ~block "cpp"
    {
        MACARONI_SIMPLE_STRING_EXCEPTION_DEFINE(
            CycleError,  "Two bits of text which need to be generated both "
                         "depend on each other: %s.");
    }
    // This is not a very efficient function to say the least, but it only
    // runs right before an exception is thrown which will halt all progress
    // anyway.
    // I should probably usethe Boost Graph library to find the cycle
    // quicker but it was taking awhile to read through those docs...
    ~hidden void throwSortError()
    {
        const unsigned int size = ((unsigned int)CodeText::MaxGraphId());
        std::vector<bool> table(size * size);
        for (unsigned int i = 0; i < size * size; ++ i) {
            table[i] = false;
        }

        const auto addEdge = [=, &table] (CodeText * from, CodeText * to) {
            const auto fId = from->GraphId();
            const auto tId = to->GraphId();
            if (table[(fId * size) + tId] || table[(tId * size) + fId])
            {
                string msg;
                if (from && to)
                {
                    msg =str(format("%s <--> %s") % *from % *to);
                }
                else if (from)
                {
                    msg = str(format("%s <--> nullptr") % *from);
                }
                else if (to)
                {
                    msg = str(format("nullptr <--> %s") % *to);
                }
                else
                {
                    msg = "nullptr <--> nullptr";
                }
                throw CycleError(msg.c_str());
            }
            table[(fId * size) + tId] = true;
            table[(tId * size) + fId] = true;
        };

        addEdge(divImpl, divTop);
        addEdge(divBottom, divImpl);

        for (CodeText * ptr : items)
        {
            // This first switch establishes sort of global, simple
            // dependencies, such as the idea that any implementation text must
            // exist underneath the implementation divider (and therefore)
            // stay out of the header.
            switch(ptr->Type())
            {
                case CodeType::UsingStatement:
                case CodeType::Implementation:
                    // UsingStatement and Implementation has to be after impl
                    // start.
                    addEdge(ptr, divImpl);
                    // ensure the bottom divider stays at the bottom.
                    addEdge(divBottom, ptr);
                    break;
                case CodeType::TypeDefinition:
                case CodeType::ForwardDeclaration:
                    // This element depends on divider top...
                    addEdge(ptr, divTop);
                    // ...and the implementation start depends on this.
                    addEdge(divImpl, ptr);
                    break;
                case CodeType::BlockTop:
                    // the top divider depends on this top block.
                    addEdge(divTop, ptr);
                    break;
                case CodeType::BlockBottom:
                    // The bottom block depends on bottom divider.
                    addEdge(ptr, divBottom);
                    break;
                default:
                    break;
            }

            for (CodeText * depPtr : ptr->DependsOn())
            {
                if (depPtr)
                {
                    addEdge(ptr, depPtr);
                }
            }
        }


    }
};

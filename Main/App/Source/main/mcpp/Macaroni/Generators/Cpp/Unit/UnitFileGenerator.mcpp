~import Macaroni::Core::BaseVisitor;
~import boost::format;
~import Macaroni::Generators::Cpp::CodeGraph;
~import Macaroni::Generators::Cpp::CodeText;
~import Macaroni::Generators::Cpp::CodeTextProducer;
~import Macaroni::Generators::Cpp::CodeTextSorter;
~import Macaroni::Generators::Cpp::CodeType;
~import Macaroni::Generators::Cpp::CppFileWriter;
~import Macaroni::Model::Cpp::Class;
~import Macaroni::Model::Context;
~import std::cout;
~import Macaroni::Model::Element;
~import Macaroni::Model::ElementPtr;
~import Macaroni::Model::Cpp::Function;
~import Macaroni::Model::Cpp::FunctionOverload;
~import Macaroni::IO::GeneratedFileWriter;
~import Macaroni::IO::GeneratedFileWriterPtr;
~import Macaroni::Generators::Cpp::Library::LibraryConfigGenerator;
~import Macaroni::Model::Project::LibraryTarget;
~import Macaroni::Model::Project::LibraryTargetPtr;
~import Macaroni::Lua::LuaClass;
~import Macaroni::Lua::LuaFunction;
~import Macaroni::Lua::LuaOperator;
~import Macaroni::Model::Node;
~import Macaroni::Model::NodePtr;
~import boost::optional;
~import Macaroni::IO::Path;
~import Macaroni::IO::PathPtr;
~import Macaroni::Exception::SimpleException;
~import boost::shared_ptr;
~import std::string;
~import Macaroni::Model::Project::Target;
~import Macaroni::Model::Project::TargetPtr;
~import Macaroni::Model::Type;
~import Macaroni::Model::TypePtr;
~import Macaroni::Model::Project::UnitTarget;
~import Macaroni::Core::Variable;
~import std::vector;
~import Macaroni::Model::Cpp::Variable;
~import Macaroni::Core::Visitor;



~namespace Macaroni::Generators::Cpp::Unit;


class UnitFileGenerator {};

typedef shared_ptr<UnitFileGenerator> UnitFileGeneratorPtr
    @LuaClass
    [
        SameAsNode = UnitFileGenerator
    ]
;

class UnitFileGenerator
    @LuaClass
    [
        ReferenceType = UnitFileGeneratorPtr
    ]
{
    private bool debugText;
    private vector<ElementPtr> elementList;
    private LibraryConfigGenerator libConfig;
    private LibraryTargetPtr library;
    private TargetPtr target;  // So we can keep an ref count on this.
    private UnitTarget & unit;

    public UnitFileGenerator(LibraryTargetPtr library, TargetPtr unit,
                             bool debugText)
    :   debugText(debugText),
        libConfig(library),
        library(library),
        target(unit),
        unit(getUnitReference(unit))
    {
        unit->CreateElementList(elementList);
    }

    ~block "cpp"
    {
        MACARONI_SIMPLE_EXCEPTION_DEFINE(UnsetLibraryPtrException,
            "UnitFileGenerator create received a null library.");
        MACARONI_SIMPLE_EXCEPTION_DEFINE(UnsetTargetPtrException,
            "UnitFileGenerator constructor received a null pointer.");
    }

    public static UnitFileGeneratorPtr Create(
        TargetPtr lib, TargetPtr unit)
        @LuaFunction "Create"
    {
        return create(lib, unit, false);
    }

    public static UnitFileGeneratorPtr CreateDebug(
        TargetPtr lib, TargetPtr unit)
        @LuaFunction "CreateDebug"
    {
        return create(lib, unit, true);
    }

    ~hidden static UnitFileGeneratorPtr create(
        TargetPtr lib, TargetPtr unit, bool debugText=false)
    {
        LibraryTarget * lPtr = dynamic_cast<LibraryTarget *>(lib.get());
        if (!lPtr)
        {
            // Accursed Lua glue...
            throw UnsetLibraryPtrException();
        }
        UnitFileGeneratorPtr ptr(new UnitFileGenerator(lPtr, unit, debugText));
        return ptr;
    }


    ~hidden static UnitTarget & getUnitReference(TargetPtr t)
    {
        if (!t)
        {
            throw UnsetTargetPtrException();
        }
        return dynamic_cast<UnitTarget &>(*t);
    }

~block "cpp"
{ namespace {

    struct TextVisitor
    :   public BaseVisitor,
        public Visitor<Class>,
        public Visitor<Function>,
        public Visitor<FunctionOverload>,
        public Visitor<Variable>
    {
        CodeText codeText;
        GeneratedFileWriterPtr writer;
        CodeGraph & graph;


        TextVisitor(CodeGraph & graph, GeneratedFileWriterPtr gfw)
        :   graph(graph),
            writer(gfw)
        {
        }

        ~TextVisitor()
        {
        }

        virtual void Visit(Class & e)
        {
            writer->WriteLine("Class ", e.GetNode()->GetFullName());
            codeText = graph.Get(&e, CodeType::Implementation);
        }

        virtual void Visit(Function & e)
        {
            writer->WriteLine("Function ", e.GetNode()->GetFullName());
            codeText = graph.Get(&e, CodeType::Implementation);
        }

        virtual void Visit(FunctionOverload & e)
        {
            writer->WriteLine("FunctionOverload ", e.GetNode()->GetFullName());
            codeText = graph.Get(&e, CodeType::Implementation);
        }

        virtual void Visit(Variable & e)
        {
            writer->WriteLine("Variable ", e.GetNode()->GetFullName());
            codeText.SetElement(&e);
            //codeText.codeType = CodeType::Implementation;

            codeText = graph.Get(&e, CodeType::Implementation);
        }
    };


} } // end cpp block

    ~hidden void printCodeText(GeneratedFileWriterPtr writer,
                               CodeText & ct, int depth=0)
    {
        string pad(depth, ' ');
        if (!ct.GetElement())
        {
            writer->WriteLine(pad, " <NOT INITIALIZED?>");
        }
        else
        {
            writer->WriteLine(pad,
                              ct.GetElement()->GetNode()->GetFullName(),
                              ", ",
                              ct.Type());
            ct.IterateDependencies([&](CodeText & ct){
                printCodeText(writer, ct, depth + 4);
            });
        }
    }

    public void Generate(CodeGraph & graph, PathPtr rootPath)
        @LuaFunction "Generate"
    {
        unit.SetCppFileRootDirectory(rootPath);
        unit.SetHFileRootDirectory(rootPath);

        CodeTextSorter sorter(graph.DividerTop(),
                              graph.DividerImplementationStart(),
                              graph.DividerBottom());

        // Go through graph and make sure all the type definitions are
        // available. This will pull in the forward declarations and anything
        // else necessary as well.
        for (auto e : elementList)
        {
            sorter.Add(&graph.Get(e.get(), CodeType::BlockTop));
            sorter.Add(&graph.Get(e.get(), CodeType::TypeDefinition));
            sorter.Add(&graph.Get(e.get(), CodeType::BlockBottom));
        }
        vector<CodeText *> headerText = sorter.Sort();
        generateHeader(headerText);

        for (auto e : elementList)
        {
            sorter.Add(&graph.Get(e.get(), CodeType::UsingStatement));
            sorter.Add(&graph.Get(e.get(), CodeType::Implementation));
        }
        vector<CodeText *> cppText = sorter.Sort();


        /*// Get rid of dupes. Just leave in nulls to save time.
		for (int i = 0; i < headerText.size(); ++i)
        {
			if (nullptr == headerText[i]) {
				continue;
			}
            for (int j = i; j < cppText.size(); ++ j)
            {
                if (cppText[j] && *headerText[i] == *cppText[j])
                {
                    cppText[j] = nullptr;
                    break;
                }
            }
        }*/
        generateCpp(cppText);

    }

    ~hidden void generateCpp(vector<CodeText *> cppText)
    {
        auto cppWriter = unit.GetCppFile()->CreateFile(true);
        CppFileWriter cpp(libConfig, unit.GetContext()->GetRoot(),
                          cppWriter);

        CodeTextProducer producer(debugText, cpp);

        generateTextList(producer, cpp, cppText,
                         boost::none,
                         CodeText::DividerTopId());

        cpp.CppTop(this->unit);

        cpp.CommentHeader("Internal Header");
        cpp.InsertEmptyLine();
        generateHeaderWith(cppText, cpp, false);

        cpp.InsertEmptyLine();
        cpp.CommentHeader("Additional Dependencies");

        // Get the stragglers that aren't in the header but are still used.
        int index = 0;
        for (; index < cppText.size(); ++ index)
        {
            CodeText * ct = cppText[index];
            if (ct)
            {
                if (ct->Type() != CodeType::Implementation)
                {
                    ++ index;
                    break;
                }
                generateText(producer, cpp, *ct);
            }
        }

        int firstImplementationIndex = index;

        // Now bring in the using statements.
        //cpp.InsertEmptyLine();
        //cpp.CommentHeader("Using Statements");
        /*
        auto printUsing = [this, &cpp](CodeText * ct) {
            if (ct && ct->Type() == CodeType::TypeDefinition)
            {
                auto ePtr = ct->GetElement();
                if (ePtr)
                {
                    MACARONI_ASSERT(ePtr->GetNode(), "Node is null, wut?");
                    cpp.UsingStatement(*(ePtr->GetNode()));
                }
            }
        };
        for (CodeText * ct : cppText)
        {
            printUsing(ct);
        }*/

        // Finally, return to print the implementation details.
        cpp.InsertEmptyLine();
        cpp.CommentHeader("Implementation");

        generateTextList(producer, cpp, cppText,
                         CodeText::DividerImplementationStartId(),
                         CodeText::DividerBottomId());

        cpp.EnterRootNamespace();

        generateTextList(producer, cpp, cppText,
                         CodeText::DividerBottomId(),
                         boost::none);

        cpp.CppBottom();
    }

    ~hidden void generateHeader(vector<CodeText *> headerText)
    {
        auto headerWriter = unit.GetHFile()->CreateFile(true);
        CppFileWriter header(libConfig, unit.GetContext()->GetRoot(),
                             headerWriter);
        generateHeaderWith(headerText, header, true);
    }

    ~hidden void generateHeaderWith(vector<CodeText *> headerText,
                                    CppFileWriter header,
                                    bool includeTopAndBottomBlocks)
    {
        header.HeaderTop(this->unit);

        CodeTextProducer producer(debugText, header);
        if (includeTopAndBottomBlocks)
        {
            generateTextList(producer, header, headerText,
                             boost::none,
                             CodeText::DividerTopId());
        }

        header.InsertEmptyLine();
        header.HeaderStartingIncludes(this->unit);

        header.InsertEmptyLine();
        generateTextList(producer, header, headerText,
                         CodeText::DividerTopId(),
                         CodeText::DividerImplementationStartId());

        header.EnterRootNamespace();

        if (includeTopAndBottomBlocks)
        {
            generateTextList(producer, header, headerText,
                             CodeText::DividerBottomId(),
                             boost::none);
        }
        header.HeaderBottom();
    }

    ~hidden void generateTextList(CodeTextProducer & producer,
                                  CppFileWriter & writer,
                                  vector<CodeText *> & textList,
                                  const optional<int> & startDivider,
                                  const optional<int> & endDivider)
    {
        bool start = !startDivider;
        for (CodeText * ct : textList)
        {
            if (ct)
            {
                if (!start)
                {
                    if (ct->GraphId() == startDivider)
                    {
                        start = true;
                    }
                }
                else
                {
                    if (endDivider && endDivider.get() == ct->GraphId())
                    {
                        return;
                    }
                    else
                    {
                        generateText(producer, writer, *ct);
                    }
                }
            }
        }
        MACARONI_ASSERT(!endDivider, "Never saw end divier.");
    }

    ~hidden void generateText(CodeTextProducer & producer,
                              CppFileWriter & writer,
                              CodeText & ct)
    {
        if (debugText)
        {
            if ( ct.GetElement())
            {
                writer.Comment(str(format("DEBUG- Looking at %s (%s)")
                                   % ct % ct.GetElement()->GetTypeName()));
            }
        }
        if (ct.GetElement())
        {
            producer.Write(ct, target, library);
        }
        /*
        else
        {
            if (debugText)
            {
                writer.Comment(str(format("DEBUG- Not owned by our target: %s")
                               % ct.GetElement()->GetNodeRef().GetFullName()));
            }
            Element * e = const_cast<Element *>(ct.GetElement());
            writer.IncludeFile(*e);
        }*/
    }

    public string ToString()
        @LuaOperator "__tostring"
    {
        return "UnitGenerator";
    }

    ~hidden void writeHeader()
    {

    }
};

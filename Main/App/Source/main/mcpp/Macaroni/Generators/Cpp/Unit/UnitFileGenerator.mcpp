
~import Macaroni::Core::BaseVisitor;
~import boost::format;
~import Macaroni::Generators::Cpp::CodeGraph;
~import Macaroni::Generators::Cpp::CodeGraphPtr;
~import Macaroni::Generators::Cpp::CodeText;
~import Macaroni::Generators::Cpp::CodeTextProducer;
~import Macaroni::Generators::Cpp::CodeTextSorter;
~import Macaroni::Generators::Cpp::CodeType;
~import Macaroni::Generators::Cpp::CppFileWriter;
~import Macaroni::Model::Cpp::Class;
~import Macaroni::Model::Context;
~import std::cout;
~import Macaroni::Model::Element;
~import Macaroni::Model::ElementPtr;
~import Macaroni::Exception;
~import Macaroni::Model::Cpp::Function;
~import Macaroni::Model::Cpp::FunctionOverload;
~import Macaroni::IO::GeneratedFileWriter;
~import Macaroni::IO::GeneratedFileWriterPtr;
~import Macaroni::Generators::Cpp::GeneratorSettings;
~import Macaroni::Generators::Cpp::Library::LibraryConfigGenerator;
~import Macaroni::Model::Project::LibraryTarget;
~import Macaroni::Model::Project::LibraryTargetPtr;
~import Macaroni::Lua::LuaClass;
~import Macaroni::Lua::LuaFunction;
~import Macaroni::Lua::LuaGlueCode;
~import Macaroni::Lua::LuaOperator;
~import Macaroni::Model::Node;
~import Macaroni::Model::NodePtr;
~import boost::optional;
~import Macaroni::IO::Path;
~import Macaroni::IO::PathPtr;
~import Macaroni::Exceptions::SimpleException;
~import Macaroni::Exceptions::SimpleStringException;
~import boost::shared_ptr;
~import std::string;
~import std::stringstream;
~import Macaroni::Model::Project::Target;
~import Macaroni::Model::Project::TargetPtr;
~import Macaroni::Model::Type;
~import Macaroni::Model::Cpp::Typedef;
~import Macaroni::Model::TypePtr;
~import Macaroni::Model::Project::UnitTarget;
~import std::vector;
~import Macaroni::Core::Visitor;



~namespace Macaroni::Generators::Cpp::Unit;


class UnitFileGenerator {};

typedef shared_ptr<UnitFileGenerator> UnitFileGeneratorPtr
    @LuaClass
    [
        SameAsNode = UnitFileGenerator
    ]
;

class UnitFileGenerator
    @LuaClass
    [
        ReferenceType = UnitFileGeneratorPtr
    ]
{
    private vector<ElementPtr> elementList;
    private GeneratorSettings generatorSettings;
    private optional<LibraryConfigGenerator> libConfig;
    private LibraryTarget * library;
    //private TargetPtr target;  // So we can keep an ref count on this.
    private UnitTarget & unit;

    public UnitFileGenerator(GeneratorSettings settings,
                             LibraryTarget * library, UnitTarget & unit)
    :   generatorSettings(settings),
        libConfig(createLibConfig(library)),
        library(library),
        //target(unit),
        unit(unit)
    {
        unit.CreateElementList(elementList);
    }

    ~block "cpp-include"
    {
        #include <lua.h>
        #include <lauxlib.h>
    }

    ~block "cpp"
    {
        MACARONI_SIMPLE_EXCEPTION_DEFINE(UnsetLibraryPtrException,
            "UnitFileGenerator create received a null library.");
        MACARONI_SIMPLE_EXCEPTION_DEFINE(UnsetTargetPtrException,
            "UnitFileGenerator constructor received a null pointer.");
        MACARONI_SIMPLE_STRING_EXCEPTION_DEFINE(UnitSortError,
            "%s");
        MACARONI_SIMPLE_STRING_EXCEPTION_DEFINE(TextListGenerationException,
            "%s");
    }

    // Lua Stuff --------------------------------------------------------------

    public static void Lua_Generate(bool debugText, LibraryTargetPtr lib,
        TargetPtr targetPtr, CodeGraphPtr graph, PathPtr rootPath)
        @LuaFunction "Generate"
    {
        LibraryTarget * lPtr = dynamic_cast<LibraryTarget *>(lib.get());
        if (!lPtr)
        {
            // Accursed Lua glue...
            throw UnsetLibraryPtrException();
        }
        UnitTarget * unitPtr = dynamic_cast<UnitTarget *>(targetPtr.get());
        if (!unitPtr)
        {
            throw UnsetTargetPtrException();
        }
        GeneratorSettings generatorSettings;
        if (debugText)
        {
            generatorSettings.RedirectToMcppSource = false;
            generatorSettings.LogDebug = true;
        }
        UnitFileGenerator ufg(generatorSettings, lPtr, *unitPtr);
        ufg.Generate(*graph, *rootPath);
    }

    ~hidden optional<LibraryConfigGenerator> createLibConfig(
        LibraryTarget * library)
    {
        if (!library)
        {
            return boost::none;
        }
        LibraryConfigGenerator gen(*library);
        return gen;
    }


    ~hidden void printCodeText(GeneratedFileWriterPtr writer,
                               CodeText & ct, int depth=0)
    {
        string pad(depth, ' ');
        if (!ct.GetElement())
        {
            writer->WriteLine(pad, " <NOT INITIALIZED?>");
        }
        else
        {
            writer->WriteLine(pad,
                              ct.GetElement()->GetNode()->GetFullName(),
                              ", ",
                              ct.Type());
            auto idFunc = [&](CodeText & ct){
                printCodeText(writer, ct, depth + 4);
            };
            ct.IterateDependencies(idFunc);
        }
    }

    public void Generate(CodeGraph & graph, Path &rootPath)
    {
        unit.SetCppFileRootDirectory(rootPath);
        unit.SetHFileRootDirectory(rootPath);

        CodeTextSorter sorter(graph.DividerTop(),
                              graph.DividerImplementationStart(),
                              graph.DividerBottom());

        // Go through graph and make sure all the type definitions are
        // available. This will pull in the forward declarations and anything
        // else necessary as well.
        for (auto e : elementList)
        {
            sorter.Add(&graph.Get(e.get(), CodeType::BlockTop));
            sorter.Add(&graph.Get(e.get(), CodeType::TypeDefinition));
            sorter.Add(&graph.Get(e.get(), CodeType::BlockBottom));
        }
        vector<CodeText *> headerText = sorter.Sort();
        generateHeader(headerText);

        for (auto e : elementList)
        {
            sorter.Add(&graph.Get(e.get(), CodeType::UsingStatement));
            sorter.Add(&graph.Get(e.get(), CodeType::Implementation));
        }

        vector<CodeText *> cppText;

        cppText = sorter.SortWithValidation(unit.GetName());

        generateCpp(cppText);

    }



    ~hidden static void writeDebugFile(GeneratedFileWriterPtr writer,
                                       vector<CodeText *> textList)
    {
        writer->WriteLine("The following are all CodeText instances "
                                   "for this translation unit:");
        for (CodeText * ct : textList)
        {
            writer->WriteLine(str(format("%s") % *ct));
            for (CodeText * dep : ct->DependsOn())
            {
                writer->WriteLine(str(format("\t+-- %s") % *dep));
            }
        }
    }

    ~hidden void generateCpp(vector<CodeText *> cppText)
    {
        if (generatorSettings.LogDebug)
        {
            auto debugWriter = unit.GetCppFile()
                ->DifferentSuffix(".debug")->CreateFile(true);
            writeDebugFile(debugWriter, cppText);
        }


        auto cppWriter = unit.GetCppFile()->CreateFile(true);
        CppFileWriter cpp(libConfig, unit.GetContext()->GetRoot(),
                          cppWriter, generatorSettings);

        CodeTextProducer producer(generatorSettings, cpp);

        generateTextList("cpp-top", producer, cpp, cppText,
                         boost::none,
                         CodeText::DividerTopId());

        cpp.CppTop(this->unit);

        cpp.CommentHeader("Internal Header");
        cpp.InsertEmptyLine();
        generateHeaderWith(cppText, cpp, false);

        cpp.InsertEmptyLine();
        cpp.CommentHeader("Additional Dependencies");

        // Get the stragglers that aren't in the header but are still used.
        int index = 0;
        for (; index < cppText.size(); ++ index)
        {
            CodeText * ct = cppText[index];
            if (ct)
            {
                if (ct->Type() != CodeType::Implementation)
                {
                    ++ index;
                    break;
                }
                generateText(producer, cpp, *ct);
            }
        }

        int firstImplementationIndex = index;

        // Now bring in the using statements.
        //cpp.InsertEmptyLine();
        //cpp.CommentHeader("Using Statements");
        /*
        auto printUsing = [this, &cpp](CodeText * ct) {
            if (ct && ct->Type() == CodeType::TypeDefinition)
            {
                auto ePtr = ct->GetElement();
                if (ePtr)
                {
                    MACARONI_ASSERT(ePtr->GetNode(), "Node is null, wut?");
                    cpp.UsingStatement(*(ePtr->GetNode()));
                }
            }
        };
        for (CodeText * ct : cppText)
        {
            printUsing(ct);
        }*/

        // Finally, return to print the implementation details.
        cpp.InsertEmptyLine();
        cpp.CommentHeader("Implementation");

        generateTextList("cpp-implementation", producer, cpp, cppText,
                         CodeText::DividerImplementationStartId(),
                         CodeText::DividerBottomId());

        cpp.EnterRootNamespace();

        generateTextList("cpp-bottom", producer, cpp, cppText,
                         CodeText::DividerBottomId(),
                         boost::none);

        cpp.CppBottom();
    }

    ~hidden void generateHeader(vector<CodeText *> headerText)
    {
        if (generatorSettings.LogDebug)
        {
            auto debugWriter = unit.GetCppFile()
                ->DifferentSuffix(".debug-hpp")->CreateFile(true);
            writeDebugFile(debugWriter, headerText);
        }

        auto headerWriter = unit.GetHFile()->CreateFile(true);
        CppFileWriter header(libConfig, unit.GetContext()->GetRoot(),
                             headerWriter, generatorSettings);
        generateHeaderWith(headerText, header, true);
    }

    ~hidden void generateHeaderWith(vector<CodeText *> headerText,
                                    CppFileWriter header,
                                    bool includeTopAndBottomBlocks)
    {
        if (generatorSettings.LogDebug)
        {
            header.Comment("Unit File Generator is looking at these Elements:");
            for (auto e : elementList)
            {
                header.Comment(str(format("\t%s")
                               % e->GetNodeRef().GetFullName()));
            }
            header.Comment("");
        }
        header.HeaderTop(this->unit);

        CodeTextProducer producer(generatorSettings, header);
        if (includeTopAndBottomBlocks)
        {
            generateTextList("header-top", producer, header, headerText,
                             boost::none,
                             CodeText::DividerTopId());
        }

        header.InsertEmptyLine();
        header.HeaderStartingIncludes(this->unit);

        header.InsertEmptyLine();
        generateTextList("header-main", producer, header, headerText,
                         CodeText::DividerTopId(),
                         CodeText::DividerImplementationStartId());

        header.EnterRootNamespace();

        if (includeTopAndBottomBlocks)
        {
            generateTextList("header-bottom", producer, header, headerText,
                             CodeText::DividerBottomId(),
                             boost::none);
        }
        header.HeaderBottom();
    }

    ~hidden void generateTextList(string generationType,
                                  CodeTextProducer & producer,
                                  CppFileWriter & writer,
                                  vector<CodeText *> & textList,
                                  const optional<int> & startDivider,
                                  const optional<int> & endDivider)
    {
        bool start = !startDivider;
        for (CodeText * ct : textList)
        {
            if (ct)
            {
                if (endDivider && endDivider.get() == ct->GraphId())
                {
                    return;
                }
                if (!start)
                {
                    if (ct->GraphId() == startDivider)
                    {
                        start = true;
                    }
                }
                else
                {
                    generateText(producer, writer, *ct);
                }
            }
        }

        if (endDivider)
        {
            // This is a costly error message, but if it has to be thrown the
            // user is screwed anyway and the reason it happens is very hard
            // to understand.
            stringstream stream;
            stream << "Unit " << unit.GetName() << ", " << generationType
                << " - can't find the end divider.\n"
                << "This indicates an impossible dependency chain or a bug in Macaroni.\n"
                << "What follows is the entire code text considered for this unit.\n";
            for (CodeText * ct : textList)
            {
                if (ct) {
                    stream << "\t" << *ct << "\n";
                    if (ct->GraphId() == startDivider)
                    {
                        stream << "\t\t!!! ^^^^^-- Unit would have begun generating text here.\n";
                    }
                }
            }
            stream << "\nNever saw the end divider, which was:";
            stream << endDivider.get() << "\n";
            string msg = stream.str();
            throw TextListGenerationException(msg.c_str());
        }
    }

    ~hidden void generateText(CodeTextProducer & producer,
                              CppFileWriter & writer,
                              CodeText & ct)
    {
        if (generatorSettings.LogDebug)
        {
            if ( ct.GetElement())
            {
                writer.Comment(str(format("DEBUG- Looking at %s (%s)")
                                   % ct % ct.GetElement()->GetTypeName()));
            }
        }
        if (ct.GetElement())
        {
            TargetPtr target(&unit);
            producer.Write(ct, target, library);
        }
    }

    public string ToString()
        @LuaOperator "__tostring"
    {
        return "UnitGenerator";
    }

    ~hidden void writeHeader()
    {

    }
};

 ~import Macaroni::Generators::Cpp::CodeGraph;
~import Macaroni::Model::Project::ExeTarget;
~import Macaroni::IO::GeneratedFileWriter;
~import Macaroni::IO::GeneratedFileWriterPtr;
~import Macaroni::Generators::Cpp::GeneratorSettings;
~import Macaroni::Generators::Cpp::Library::LibraryConfigGenerator;
~import Macaroni::Model::Project::LibraryTarget;
~import Macaroni::Model::Project::LibraryTargetPtr;
~import Macaroni::Lua::LuaClass;
~import Macaroni::Lua::LuaGlueCode;
~import Macaroni::Lua::LuaFunction;
~import Macaroni::Model::Project::ProjectVersion;
~import Macaroni::Model::Project::ProjectVersionPtr;
~import Macaroni::IO::Path;
~import Macaroni::IO::PathPtr;
~import boost::shared_ptr;
~import Macaroni::Model::Project::Target;
~import Macaroni::Model::Project::TargetList;
~import Macaroni::Model::Project::TargetListPtr;
~import Macaroni::Model::Project::TargetPtr;
~import Macaroni::Generators::Cpp::Unit::UnitFileGenerator;
~import Macaroni::Model::Project::UnitTarget;

~namespace Macaroni::Generators::Cpp::Project;

// This replaces the Lua UnitFileGenerator.LibraryTargetGenerator module.
//
// Currently that is called as follows:
//
// Cpp.lua 's Generate2 method calls the old generate for each library, and for
// each test and executable. So the library "owns" the elements it iterates
// over.
//
// The Library call looks like this:
//
//      local rootGenPath = Path.New(path.AbsolutePath)
//      local libGen = LibraryTargetGenerator.new(library);
//      libGen:IterateUnits(library, rootGenPath);
//
// A big change from the Lua version is this iterates a ProjectVersion,
// not a library. There were a number of (obvious) problems doing it that
// way, not the least of which where the wonky generation of stand alone
// executables.
//
// IterateUnits calls the UnitFileGenerator.
//
// It stores the CodeGraph class, which can be thought of as the main memory
// of Macaroni source code generation.


// This class only exists to make the Lua Glue work.
class ProjectGenerator {};

typedef shared_ptr<ProjectGenerator> ProjectGeneratorPtr
    @LuaClass
    [
        SameAsNode = ProjectGenerator
    ]
;

class ProjectGenerator
    @LuaClass [ ReferenceType = ProjectGeneratorPtr ]
{
    //TODO: When Macaroni IV is available, move to global functions in a unit.

    public static void Lua_Generate(ProjectVersion & version,
                                    Path & rootPath,
                                    bool debug)
        @LuaFunction "Generate"
        @LuaGlueCode ={
            Macaroni::Model::Project::ProjectVersionPtr & arg1
                = Macaroni::Model::Project::ProjectVersionLuaMetaData::GetInstance(L, 1);
            Macaroni::IO::PathPtr & arg2
                = Macaroni::IO::PathLuaMetaData::GetInstance(L, 2);
            bool debug = lua_toboolean(L, 3);
            try
            {
                Macaroni::Generators::Cpp::Project::ProjectGenerator::Lua_Generate(
                    *arg1, *arg2, debug);
                return 0;
            }
            catch(const Macaroni::Exception & ex)
            {
                // Actually show Lua the real error. >:-(
                luaL_error(L, ex.message().c_str());
            }
            catch(const std::exception & ex)
            {
                luaL_error(L, ex.what());
            }
        }
    {
        GeneratorSettings settings;
        if (debug)
        {
            settings.RedirectToMcppSource = false;
            settings.InsertDebugTracers = true;
        }
        else
        {
            settings.InsertDebugTracers = false;
        }
        ProjectGenerator pg(settings, version, rootPath);
        pg.IterateTargets();
    }


    private GeneratorSettings generatorSettings;
    private CodeGraph graph;
    private Path rootPath;
    private ProjectVersion & version;

    public ProjectGenerator(GeneratorSettings generatorSettings,
                            ProjectVersion & version,
                            Path rootPath)
    :   generatorSettings(generatorSettings),
        graph(),
        rootPath(rootPath),
        version(version)
    {

    }

    // Called initially for the project. Only "top level" targets are acted on,
    // i.e. Libraries and exes.
    public void IterateTargets()
    {
        GeneratedFileWriterPtr debugFile;
        if (generatorSettings.InsertDebugTracers)
        {
            debugFile =
                rootPath.NewPathForceSlash("project.debug")->CreateFile();
            debugFile->WriteLine("Project File Targets:");
        }
        for (Target * tPtr : version.GetTargetsVec())
        {
            generateTargetFiles(debugFile.get(), tPtr);
        }
    }

    private void generateTargetFiles(GeneratedFileWriter * debugFile,
                                     Target * target)
    {
        // Dispatch based on Target type.

        // TODO: I'm way too stressed for time right now to create a visitor
        //       pattern in the stupid Target hierarchy, but that's what
        //       ultimately should be here.
        ExeTarget * et = dynamic_cast<ExeTarget *>(target);
        LibraryTarget * lt = dynamic_cast<LibraryTarget *>(target);
        UnitTarget * ut = dynamic_cast<UnitTarget *>(target);

        if (et != nullptr && debugFile)
        {
            debugFile->WriteLine("~ exe?",
                                 target->GetName());
            //generateExeFiles(debugFile, *et);
        }
        else if (lt != nullptr)
        {
            if (debugFile) {
                debugFile->WriteLine("~ lib ",
                                     target->GetName());
            }
            generateLibraryFiles(debugFile, *lt);
        }
        else if (ut != nullptr)
        {
            if (debugFile) {
                debugFile->WriteLine("~ unit ",
                                     target->GetName());
            }
            generateUnitFiles(debugFile, *ut);
        }
        else if (target)
        {
            if (debugFile) {
                debugFile->WriteLine("~ ??! ",
                                     target->GetName());
            }
        }
        else
        {
            if (debugFile) {
                debugFile->WriteLine("~ Found a null target in project.");
            }
        }

    }

    // Given a LibraryTarget, generate all of it's child units.
    // This writes the Cpp and H files for all units owned by a Library, and
    // then writes the special library header and pch files.
    private void generateLibraryFiles(GeneratedFileWriter * debugFile,
                                      LibraryTarget & lt)
    {
        // Old Lua method would iterate libs and exes, and then each of their
        // children, but this may not have been the best idea, particularly
        // because each unit target can easily know its parent and can
        // give this info to the unit generator as it is created.

        // Iterate all the units owned by a Library.
        /*TargetListPtr dependencies = lt.GetDependencies();
        for (TargetPtr & dep : dependencies)
        {
            if (dep->GetParent() && (*(dep->GetParent())) == lt)
            {
                generateTargetFiles(debugFile, *dep);
            }
        }*/

        if (LibraryConfigGenerator::BoostConfigIsAvailable(lt))
        {
            LibraryConfigGenerator lcg{lt};
            lcg.WriteFile(rootPath);
            //lcg.WritePchFile(rootPath);
        }

    }

    private void generateUnitFiles(GeneratedFileWriter * debugFile,
                                   UnitTarget & ut)
    {
        if (!ut.IsGenerated())
        {
            if (debugFile) {
                debugFile->WriteLine("\tskipping ", ut.GetName());
            }
            return;
        }
        if (debugFile) {
            debugFile->Write("\tWriting ", ut.GetName());
        }

        LibraryTargetPtr lib = ut.GetParent<LibraryTargetPtr>();
        UnitFileGenerator ufg(generatorSettings, lib.get(), ut);
        ufg.Generate(graph, rootPath);
    }

 /*
    private static void writeUnitFiles(
        GeneratedFileWriterPtr debugOut,
        Target & target)
    {
        LibraryTargetPtr lib;

        TargetPtr parent = target.GetParent();
        if (parent)
        {
            LibraryTarget * libPtr = dynamic_cast<LibraryTarget *>(parent.get());
            if (libPtr)
            {
                lib = libPtr;
            }
        }
        if (debugOut)
        {
            if (lib)
            {
                debugOut->Write("Lib: ", lib->ToString(), "\t");
            }
            debugOut->WriteLine("Unit :", target->ToString());
        }
        UnitFileGenerator ug(generatorSettings, lib, target)
        ug.Generate(graph, rootPath);
    }*/
};


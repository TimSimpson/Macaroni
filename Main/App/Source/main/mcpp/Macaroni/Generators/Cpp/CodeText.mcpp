~import Macaroni::Generators::Cpp::CodeType;
~import Macaroni::Generators::Cpp::CodeGraph;
~import Macaroni::Model::Element;
~import Macaroni::Model::Node;
~import std::ostream;
~import std::string;
~import std::vector;
~import Macaroni::Core::Visitor;


~namespace Macaroni::Generators::Cpp;



class CodeText
{
    private CodeType codeType;              // Fwd decl, definition, impl, etc.
    private vector<CodeText *> dependsOn;   // Everything this depends on.
    private Element * element;              // The C++ element it represents.
    private int graphId;                    // Used by Boost's graph stuff.
    friend CodeGraph;

    // This is only used so the CodeText can be stored in STL containers.

    public CodeText()
    :   codeType(CodeType::ForwardDeclaration),
        dependsOn(),
        element(nullptr),
        graphId(-1)  // Make it clear this shouldn't participate in anything.
    {
    }

    public CodeText(CodeType ct, Element * e)
    :   codeType(ct),
        dependsOn(),
        element(e),
        graphId(createNewGraphId())
    {
    }

    public CodeText(const CodeText & other)
    :   codeType(other.codeType),
        dependsOn(),
        element(other.element),
        graphId(other.graphId)
    {
    }

    // Secret constructor used by graph to create divider instances.
    protected CodeText(int graphId)
    :   codeType(CodeType::Divider),
        dependsOn(),
        element(nullptr),
        graphId(graphId)
    {

    }

    public CodeText & operator=(const CodeText & other)
    {
        this->codeType = other.codeType;
        this->element = other.element;
		this->dependsOn = other.dependsOn;
        this->graphId = other.graphId;
        return *this;
    }

    public CodeText & operator=(CodeText && other)
    {
        this->codeType = other.codeType;
        this->element = other.element;
        this->dependsOn = std::move(other.dependsOn);
        this->graphId = other.graphId;
        return *this;
    }

    public bool operator==(const CodeText & other)
    {
        return this->graphId == other.graphId;
    }

    protected void addDependency(CodeText * newDep)
    {
        MACARONI_ASSERT(newDep != nullptr, "Null not allowed for newDep.");
        if (newDep->element == this->element)
        {
            // Avoid situations where a class that has a function which returns
            // a variable of its own type causes problems.
            return;
        }
        for (CodeText * ct : dependsOn)
        {
            if (ct == newDep)
            {
                return;
            }
        }
        dependsOn.push_back(newDep);
    }

    ~hidden static int createNewGraphId()
    {
        // This code is not thread safe, which doesn't matter today.
        const int result = (++ currentGraphId());
        MACARONI_ASSERT(result >= 3, "Too many nodes.");
        return result;
    }

    ~hidden static int & currentGraphId()
    {
        // This code is not thread safe, which doesn't matter today.
        static int counter = 3;
        return counter;
    }

    public vector<CodeText *> & DependsOn()
    {
        return dependsOn;
    }

    public const vector<CodeText *> & DependsOn() const
    {
        return dependsOn;
    }

    public static int DividerBottomId()
    {
        return 2;
    }

    public static int DividerImplementationStartId()
    {
        return 1;
    }

    public static int DividerTopId()
    {
        return 0;
    }

    public const Element * GetElement() const
    {
        return element;
    }

    public int GraphId() const
    {
        return graphId;
    }

    public bool HasDependencyOn(CodeText & ct)
    {

        for(auto * element : dependsOn)
        {
            if (element == &ct)
            {
                return true;
            }
        }
        return false;
    }

    public bool Initialized() const
    {
        return element != nullptr;
    }

    public bool IsDividerBottom() const
    {
        return graphId == DividerBottomId();
    }

    public bool IsDividerImplementationStart() const
    {
        return graphId == DividerImplementationStartId();
    }

    public bool IsDividerTop() const
    {
        return graphId == DividerTopId();
    }

    template<typename Func>
    public void IterateDependencies(Func & f)
    {
        for (CodeText * ct : dependsOn)
        {
            MACARONI_ASSERT(ct != nullptr, "Null codetext?");
            f(*ct);
        }
    }

    public static int MaxGraphId()
    {
        return currentGraphId();
    }

    public const CodeType Type() const
    {
        return codeType;
    }

    public ~global ostream & operator<<(ostream & out, const CodeType & t)
    {
        switch(t)
        {
            case CodeType::BlockTop:
                out << "BlockTop";
                return out;
            case CodeType::ForwardDeclaration:
                out << "ForwardDeclaration";
                return out;
            case CodeType::TypeDefinition:
                out << "TypeDefinition";
                return out;
            case CodeType::UsingStatement:
                out << "UsingStatement";
                return out;
            case CodeType::Implementation:
                out << "Implementation";
                return out;
            case CodeType::BlockBottom:
                out << "BlockBottom";
                return out;
            case CodeType::Divider:
                out << "Divider";
                return out;
            default:
                out << "??!";
                return out;
        }
    }

    public ~global ~friend ostream & operator<<(ostream & out,
                                                const CodeText & ct)
    {
        CodeText::printStart(out, ct, false, 0);
        return out;
    }

    public static void PrettyPrint(ostream & out, const CodeText & ct,
                                   int startTabs=0)
    {
        printStart(out, ct, true, startTabs);
    }

    ~hidden static void printStart(ostream & out,
                                   const CodeText & ct,
                                   bool withNewLines,
                                   int startTabs)
    {

        std::vector<const CodeText *> seen;
        out << "[" << ct.GraphId() << "] ";
        CodeText::printToStream(seen, out, ct, withNewLines, startTabs);
    }


    public string ShortString() const
    {
        return (element ? element->GetNode()->GetFullName() : "<null>");
    }

    // This extra function helps us avoid cycles by keeping track of where
    // we started iterating from.
    private static void printToStream(
        std::vector<const CodeText *> history,
        ostream & out,
        const CodeText & ct,
        bool withNewLines,
        int tabs=0)
    {
        if (std::find(history.begin(), history.end(), &ct) != history.end())
        {
            out << "<CYCLE! ";
            out << ct.codeType << " of ";
            if (ct.element && ct.element->GetNode())
            {
                out << ct.element->GetNode()->GetFullName();
            }
            else
            {
                out << "<none>";
            }
            out << " appears again s a dependency in this chain>";
            return;
        }
        history.push_back(&ct);

        out << ct.codeType;
        out << " of ";
        if (ct.element && ct.element->GetNode())
        {
            out << ct.element->GetNode()->GetFullName();
        }
        else
        {
            out << "<none>";
        }
        out << " {"; // }
        ++ tabs;
        bool seenOne = false;
        for (auto * dep : ct.dependsOn)
        {
            if (dep)
            {
                if (withNewLines)
                {
                    out << "\n" << string((tabs * 2), ' ');
                }
                else
                {
                    if (seenOne)
                    {
                        out << ", ";
                    }
                }
                printToStream(history, out, *dep, withNewLines, tabs);
                seenOne = true;
            }
        }
        tabs --;
        if (withNewLines)
        {
            if (seenOne)
            {
                out << "\n" << string((tabs * 2), ' ');
            }
            // {
            out << "}\n"  << string((tabs * 2), ' ');
        }
        else
        {
            // {
            out << "} ";
        }
    }

};

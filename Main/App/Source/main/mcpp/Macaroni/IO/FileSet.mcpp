~import boost::filesystem::directory_iterator;
~import Macaroni::Exception;
~import boost::format;
~import boost::intrusive_ptr;
~import Macaroni::Lua::LuaClass;
~import Macaroni::Lua::LuaFunction;
~import Macaroni::Lua::LuaIncludes;
~import Macaroni::Lua::LuaIndexExtraCode;
~import Macaroni::Lua::LuaOperator;
~import Macaroni::Lua::LuaProperty;
~import nullptr;
~import Macaroni::IO::Path;
~import Macaroni::IO::PathListPtr;
~import Macaroni::IO::PathPtr;
~import boost::filesystem::path;
~import boost::regex;
~import std::string;
~import Macaroni::StringException;
~import std::vector;
~import Macaroni::Cpp::UseLightDef;

~namespace Macaroni::IO;

class FileSet {};
class RegexFileSetIterator {};

~import Macaroni::IO::FileSet;
~import Macaroni::IO::RegexFileSetIterator;
~import Macaroni::IO::RelativeFileSet;

typedef intrusive_ptr<FileSet ~l> FileSetPtr
	@LuaClass [ SameAsNode = FileSet ]
	@UseLightDef true;

/**
 * A collection of file paths which may or may not be relative to some root
 * path.
 */
class FileSet
	@LuaClass [
		ReferenceType = FileSetPtr
	]
	@LuaIncludes ={
		#include <Macaroni/IO/RegexFileSetLuaMetaData.h>
	}
	@LuaIndexExtraCode ={
		string index_0(luaL_checkstring(L, 2));
		FileSet * fs = instance.get();
		RegexFileSetPtr rfs = boost::dynamic_pointer_cast<RegexFileSet>(
			instance);
		if (rfs)
		{
			int result = RegexFileSetLuaMetaData::Index(L, rfs, index_0);
			if (result > 0)
			{
				return result;
			}
		}
		// Let the generated code do the rest.
	}
{
	~import Macaroni::IO::RegexFileSet;

	private int refCount;

	public FileSet()
	: refCount(0)
	{
	}

	public virtual ~FileSet() = default;

	/** Creates a set of files given by a Regex applied to some path.
	 *  Every file in the set will be relative to the path argument. */
	public static FileSetPtr CreateRegex(const string & pathStr,
		                                 const string & regex)
		@LuaFunction "CreateRegex"
	{
		path p(pathStr);
		FileSetPtr ptr(new RegexFileSet(p, regex));
		return ptr;
	}

	/** Creates a set of files given by a regex applied to some relative path.
	 *  Every file in the set will be relative to the root path of the
	 *  relative path argument. */
	public static FileSetPtr CreateRelative(PathPtr relativePath,
		                                    const string & regex)
		@LuaFunction "CreateRelative"
	{
		FileSetPtr ptr(new RelativeFileSet(*relativePath, regex.c_str()));
		return ptr;
	}

	/** Returns the paths as a list, not an iterator. This is mainly
	 *  useful from Lua code. */
	public virtual PathListPtr GetPaths() const
		@LuaFunction "GetPaths" = 0;

	/////** If this FileSet is relative to some central directory, this returns a
	//// *  relative Path showing the connection.
	//// *  Example: If a user specifies a directory for iteration, such as
	//// *  "src/code", then this would return a relative path where the root was
	//// *  "./" and the path was "./src/code". This is used in certain plugins. */
	////public virtual PathPtr GetRelativePath() const
	////	@LuaProperty "RelativePath" = 0;

	/** Gets the core path used for this FileSet (or nil).
	 *  This is only useful for FileSets which have a core path. */
	public virtual PathPtr GetRootPath() const
		@LuaProperty "RootPath" = 0;

	public ~global ~friend void intrusive_ptr_add_ref(FileSet * const p)
	{
		p->refCount ++;
	}

	public ~global ~friend void intrusive_ptr_release(FileSet * const p)
	{
		p->refCount --;
		if (p->refCount < 1) {
			delete p;
		}
	}

	/** True if this FileSet was created with a relative path.
	 *  If false, "RootPath" for this will be an absolute. Otherwise, RootPath
	 *  will itself be a relative path which has its own root path.
	 *  All files in this collection will be relative to RootPath, but the root
	 *  of RootPath will point to some other directory that originated this
	 *  collection. */
	public virtual bool IsRelativePath() const
		@LuaProperty "IsRelativePath" = 0;

	public virtual string ToString() const
		@LuaOperator "__tostring" = 0;
}



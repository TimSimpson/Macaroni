~import boost::filesystem::directory_iterator;
~import Macaroni::Exception;
~import boost::format;
~import boost::intrusive_ptr;
~import Macaroni::Lua::LuaClass;
~import Macaroni::Lua::LuaFunction;
~import Macaroni::Lua::LuaOperator;
~import Macaroni::Lua::LuaProperty;
~import nullptr;
~import Macaroni::IO::Path;
~import Macaroni::IO::PathListPtr;
~import Macaroni::IO::PathPtr;
~import boost::filesystem::path;
~import boost::regex;
~import std::string;
~import Macaroni::StringException;
~import std::vector;
~import Macaroni::Cpp::UseLightDef;

~namespace Macaroni::IO;

class FileSet {};
class FileSetIterator {};

~import Macaroni::IO::FileSet;
~import Macaroni::IO::FileSetIterator;


typedef intrusive_ptr<FileSet ~l> FileSetPtr
	@LuaClass [ SameAsNode = FileSet ]
	@UseLightDef true;

/**
 * A collection of files.
 * It usually is constructed by iterating from a givne root directory and
 * including all files which match a pattern.
 * Note that the build environment can include patterns to exclude.
 * Also...
 * this class is... um... "inspired" by Ant's FileSet class.
 * http://ant.apache.org/manual/CoreTypes/fileset.html
 */
class FileSet
	@LuaClass [
		ReferenceType = FileSetPtr
	]
{
	friend FileSetIterator;

	private int refCount;
	private regex regExp;
	private path root;

	/**
	 * Constructs a file set by iterating from the rootPath.
	 */
	public FileSet(const path & rootPath)
	:	refCount(0),
	    regExp("."),
		root(rootPath)
	{
	}

	public FileSet(const path & rootPath, regex regExp)
	:	refCount(0),
	    regExp(regExp),
		root(rootPath)
	{
	}

	public FileSet(const path & rootPath, const char * regExToMatch)
	:	refCount(0),
	    regExp(regExToMatch),
		root(rootPath)
	{
	}

	public FileSet(const path & rootPath, string regExToMatch)
	:	refCount(0),
	    regExp(regExToMatch),
		root(rootPath)
	{
	}

	public FileSet(const FileSet & other)
	:	regExp(other.regExp),
		root(other.root)
	{
	}

	public void operator=(const FileSet & other)
		@LuaOperator "__eq"
	{
		this->regExp = other.regExp;
		this->root = other.root;
	}


	public FileSetIterator Begin() const
	{
		return FileSetIterator(this);
	}

	public static FileSetPtr Create(const string & pathStr,
		                            const string & regex)
		@LuaFunction "Create"
	{
		path p(pathStr);
		FileSetPtr ptr(new FileSet(p, regex));
		return ptr;
	}

	public FileSetIterator End() const
	{
		return FileSetIterator(nullptr);
	}


	public PathListPtr GetPaths() const
		@LuaFunction "GetPaths"
	{
		PathListPtr rtnList(new PathList());
		for(FileSetIterator itr = Begin(); itr != End(); ++ itr)
		{
			PathPtr p(new Path(root, *itr));
			rtnList->push_back(p);
		}
		return rtnList;
	}

	public PathPtr GetPath() const
		@LuaProperty "Path"
	{
		PathPtr ptr(new Path(root));
		return ptr;
	}

	public path GetRoot() const
	{
		return root;
	}

	public std::string GetRegex() const
		@LuaProperty "Regex"
	{
		return regExp.str();
	}

	public ~global ~friend void intrusive_ptr_add_ref(FileSet * const p)
	{
		p->refCount ++;
	}

	public ~global ~friend void intrusive_ptr_release(FileSet * const p)
	{
		p->refCount --;
		if (p->refCount < 1) {
			delete p;
		}
	}

	public string ToString() const
		@LuaOperator "__tostring"
	{
		return str(format("%s %s") % this->GetRoot() % this->GetRegex());
	}

	/** Ensures that the path conforms to the given regular expression.
	 * Does not check to see that path is inside of root- this is used
	 * instead by the Iterator. */
	//bool testPath(boost::filesystem::path & path);
	protected bool testPath(const string & str) const
	{
		return boost::regex_search(str, this->regExp);
	}

}; // End FileSet class


class FileSetIterator
{
	friend FileSet;

	/**
	 * Special case- needed if this FileSet represents a single file.
	 */
	private bool iterateSingleFile;

	private vector<boost::filesystem::directory_iterator> stack;

	private FileSetIterator(const FileSet * parent)
		: fileSet(parent), iterateSingleFile(false), stack()
	{
		if (fileSet != nullptr)
		{
			if (is_directory(fileSet->root))
			{
				stack.push_back(directory_iterator(fileSet->root));
				iterate(true);
			}
			else
			{
				std::string path(fileSet->root.string());
				if (fileSet->testPath(path))
				{
					iterateSingleFile = true;
				}
				else
				{
					fileSet = nullptr;
				}
			}
		}
	}

	public path operator*()
	{
		if (iterateSingleFile)
		{
			return fileSet->root;
		}
		if (finished())
		{
			throw Macaroni::StringException("FileSet iterator is finished.");
		}
		directory_iterator & itr = stack.back();
		boost::filesystem::path path = *itr;
		return path;
	}

	public bool operator==(const FileSetIterator& other) const
	{
		if (&other == this)
		{
			return true;
		}
		if (this->fileSet == nullptr || other.fileSet == nullptr)
		{
			return this->fileSet == other.fileSet;
		}
		if (other.stack.size() != this->stack.size())
		{
			return false;
		}
		for(size_t i = 0; i < stack.size(); i ++)
		{
			if (other.stack[i] != stack[i])
			{
				return false;
			}
		}
		return true;
	}

	public inline bool operator!=(const FileSetIterator& other) const
	{
		return !(operator==(other));
	}

	public FileSetIterator operator++()
	{
		using boost::filesystem::is_directory;
		if (iterateSingleFile)
		{
			iterateSingleFile = false;
			fileSet = nullptr;
			return *this;
		}
		if (finished())
		{
			throw Macaroni::StringException("Index out of bounds.");
		}
		iterate(false);
		return *this;
	}

	private bool finished()
	{
		if (fileSet == nullptr)
		{
			MACARONI_ASSERT(stack.size() < 1,
				"Stack size < 1, yet fileset  null.");
			return true;
		}
		return false;
	}

	private const FileSet * fileSet;

	/**
	 * Internal method to iterate through directories recursively.
	 */
	private void iterate(bool freshItr)
	{
		using boost::filesystem::is_directory;
		directory_iterator end_itr;
		while(stack.size() > 0)
		{
			directory_iterator & itr = stack.back();

			if (!freshItr)
			{
				itr ++;
			}
			freshItr = false;

			if (itr == end_itr)
			{
				stack.pop_back();
			}
			else if (is_directory(itr->status()))
			{
				stack.push_back(directory_iterator(*itr));
				freshItr = true;
				continue;
			}
			else if (true)
			{
				if (fileSet->testPath((*itr).path().string()))//boost::regex_search((*itr).string(), fileSet->regExp))
				{
					return;
				}
			}
		}
		fileSet = nullptr;
		return;
	}

}; // End Iterator class


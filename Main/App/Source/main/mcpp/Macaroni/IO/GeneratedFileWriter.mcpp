/**
 * Copyright 2011 Tim Simpson
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
~import boost::filesystem::create_directories;
~import Macaroni::Exception;
~import BOOST_FOREACH;
~import Macaroni::IO::GeneratedFileWriter;
~import Macaroni::Lua::LuaClass;
~import Macaroni::Lua::LuaFunction;
~import Macaroni::Lua::LuaOperator;
~import Macaroni::Lua::LuaProperty;
~import std::ofstream;
~import std::ifstream;
~import std::ostream;
~import boost::filesystem::path;
~import Macaroni::IO::Path;
~import boost::shared_ptr;
~import std::string;
~import Macaroni::StringException;
~import std::stringstream;

namespace Macaroni::IO
{

typedef shared_ptr<ostream> ostreamptr;
typedef shared_ptr<GeneratedFileWriter> GeneratedFileWriterPtr
	@LuaClass [ SameAsNode = GeneratedFileWriter ]
;

class GeneratedFileWriter
	@LuaClass [ ReferenceType = GeneratedFileWriterPtr ]
{
	//TODO: Move to outside of class def. due to bug in Macaroni.
	//Fix bug and move back!
	//typedef shared_ptr<ostream> ostreamptr;
	~block "h-predef"
	{
		#include <sstream>
	}

	bool closed;
	int columnNumber;
	bool directToFile;
	const Path filePath;
	bool fileWasWritten;
	bool hasSpace;
	int lineNumber;
	bool trackFormatInfo;
	ostreamptr writer;

	public GeneratedFileWriter(const Path & filePath, bool trackFormatInfo=false)
	:	closed(false),
		columnNumber(0),
		filePath(filePath),
		fileWasWritten(false),
		hasSpace(true),
	    lineNumber(1),
	    trackFormatInfo(trackFormatInfo),
	    writer()
	{
		path boostPath(filePath.GetAbsolutePath());
		path parent = boostPath.parent_path();
		if (!boost::filesystem::exists(parent))
		{
			boost::filesystem::create_directories(parent);
		}

		if (boost::filesystem::exists(boostPath))
		{
			if (!boost::filesystem::is_regular(boostPath))
			{
				stringstream msg;
                msg << "Cannot create GeneratedFileWriter for "
                    << boostPath.string()
					<< ": the file exists and it is non-regular.";
				throw Macaroni::StringException(msg.str().c_str());
			}
			writer = ostreamptr(new stringstream());
			directToFile = false;
		}
		else
		{
			writer = ostreamptr(new ofstream(boostPath.string().c_str(),
				                             ofstream::trunc));
			directToFile = true;
		}
	}

	public ~GeneratedFileWriter()
	{
		Close();
	}

	public bool Close()
		@LuaFunction "Close"
	{
		if (!closed)
		{
			if (directToFile)
			{
				(dynamic_cast<ofstream *>(writer.get()))->close();
				fileWasWritten = true;
			}
			else
			{
				stringstream & ss = dynamic_cast<stringstream &>(
					*(dynamic_cast<stringstream *>(writer.get()))
					);
				path boostPath(this->filePath.GetAbsolutePath());
				fileWasWritten = overwriteFileWithBufferIfDifferent(boostPath, ss);
			}
			closed = true;
		}
		return fileWasWritten;
	}

	// Returns the current column count. This is only available when
	// trackFormatInfo is specified in the constructor.
	public inline int GetColumnNumber() const
	{
		return columnNumber;
	}

	public inline const string GetFilePath() const
		@LuaProperty "FilePath"
	{
		std::string result = filePath.GetRelativePathNormalized();
		return result;
	}

	public inline const string & GetAbsoluteFilePath() const
		@LuaProperty "FilePath"
	{
		return filePath.GetAbsolutePath();
	}

	// Returns true if this ends with a space. Only available if trackFormatInfo
	// is specified in the constructor.
	public inline bool HasSpace() const
	{
		return hasSpace;
	}

	public inline int GetLineNumber() const
		@LuaProperty "LineNumber"
	{
		return lineNumber;
	}

	public static bool isFileDifferentThanBuffer(const path & boostFilePath,
	                                             stringstream & current)
	{
		char buf1[256];
		char buf2[256];

		ifstream existing(boostFilePath.string().c_str());
		current.seekg(std::ios_base::beg);

		bool eof = false;
		while(!eof)
		{
			existing.read(buf1, 256);
			current.read(buf2, 256);
			if (existing.gcount() != current.gcount())
			{
				return true;
			}
			else if (existing.gcount() != 256)
			{
				eof = true;
			}
			if (strncmp(buf1, buf2, existing.gcount()) != 0)
			{
				return true;
			}
		}
		return false;
	}

	public static bool overwriteFileWithBufferIfDifferent(
		const path & boostFilePath, stringstream & current)
	{
		if (!isFileDifferentThanBuffer(boostFilePath, current))
		{
			return false;
		}
		current.seekg(std::ios_base::beg);
		ofstream output(boostFilePath.string().c_str(), ofstream::trunc);
		output << current.str() ;
		output.close();
		return true;
	}

	public std::string ToString() const
		@LuaOperator "__tostring"
	{
		std::stringstream ss;
		ss << "GeneratedFileWriter [" << GetFilePath() << "]";
		return ss.str();
	}

	public void Write(const char c)
	{
		if ('\n' == c)
		{
			lineNumber += 1;
			columnNumber = 0;
			hasSpace = true;
		}
		else
		{
			columnNumber += 1;
			hasSpace = isspace(c);
		}
		(*writer) << c;
	}

	public void Write(const char * oldString)
	{
		if (trackFormatInfo)
		{
			const char * lastNewLine = oldString;
			const char * itr;
			for (itr = oldString; '\0' != *itr; ++ itr)
			{
				if ('\n' == *itr)
				{
					lineNumber += 1;
					columnNumber = 0;
					lastNewLine = itr;
				}
			}
			// Check to see if this ends on a space-
			if (oldString != itr && isspace(*(itr - 1)))
			{
				hasSpace = true;
			}
			else
			{
				hasSpace = false;
			}
			columnNumber += (itr - lastNewLine);
		}
		(*writer) << oldString;
	}

	public void Write(const std::string & text)
		@LuaFunction "Write"
	{
		Write(text.c_str());
		//lineNumber += std::count(text.begin(), text.end(), '\n');
		//(*writer) << text;
	}

	template<typename T>
	public void Write(const T & t)
	{
		// This is slow, but there won't be too many times were it gets used...
		// I think.
		std::stringstream s;
		s << t;
		Write(s.str().c_str());
		//(*writer) << t;
	}

	template<typename T, typename... Parameters>
	public void Write(const T & t, const Parameters & ... args)
	{
		Write(t);
		Write(args...);
	}

	public void WriteLine()
	{
		(*writer) << std::endl;
		lineNumber += 1;
		columnNumber = 0;
	}

	public void WriteLine(const std::string & text)
		@LuaFunction "WriteLine"
	{
		Write(text);
		WriteLine();
	}

	template<typename T>
	public void WriteLine(const T & t)
	{
		Write(t);
		(*writer) << std::endl;
		lineNumber += 1;
		columnNumber = 0;
	}

	template<typename T, typename... Parameters>
	public void WriteLine(const T & t, const Parameters & ... args)
	{
		Write(t);
		WriteLine(args...);
	}
};

} // end namespace

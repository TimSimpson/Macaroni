~import Macaroni::Lua::LuaClass;
~import Macaroni::Lua::LuaFunction;
~import Macaroni::Lua::LuaOperator;
~import Macaroni::Lua::LuaProperty;
~import boost::intrusive_ptr;
~import Macaroni::Cpp::UseLightDef;

~namespace Macaroni::Environment;

class Output {};

typedef boost::intrusive_ptr<Output> OutputPtr 
	~hfile=<Macaroni/Environment/OutputPtr.h>
	@UseLightDef true
	@LuaClass [ SameAsNode = Output ]
;

class Output
	@LuaClass [ 
		ReferenceType = OutputPtr 
	]
{
	~block "h-predef" {
		#include <boost/format.hpp>	
	}
	
	public virtual ~Output()
	{		
	}

	public ~global ~friend void intrusive_ptr_add_ref(Output * p) {
		p->addReference();
	}

	public ~global ~friend void intrusive_ptr_release(Output * p) {
		if (p->releaseReference()) {
			delete p;
		}
	}
	
	protected virtual void addReference() = 0;

	/* Finishes a Output. */
	public virtual void End()
		@LuaFunction "End" = 0;

	/** If true is returned, the reference will be destroyed. */
	protected virtual bool releaseReference() = 0;

	/* Starts a new Output. */
	public virtual OutputPtr Start(const char * name)
		@LuaFunction "Start" = 0;	

	public virtual void Write(const char * msg) const
		@LuaFunction "Write" = 0;
	
	public void Write(const std::string & msg) const
	{
		this->Write((const char *) msg.c_str());	
	}	

	~block "h" {
		public: 
		template<class charT, class Traits> 
		inline void Write(const boost::basic_format<charT,Traits> & format) {
			Write((const char *) format.str().c_str());
		} 
	}
	
	public virtual void WriteLine(const char * msg) const
		@LuaFunction "WriteLine" = 0;

	public void WriteLine(const std::string & msg) const
	{
		this->WriteLine((const char *) msg.c_str());	
	}

	~block "h" {
		public: 
		template<class charT, class Traits> 
		inline void WriteLine(const boost::basic_format<charT,Traits> & format) {
			WriteLine((const char *) format.str().c_str());
		} 
	}


};

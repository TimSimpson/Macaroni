~import std::exception;
~import boost::format;
~import Macaroni::Lua::LuaClass;
~import Macaroni::Lua::LuaFunction;
~import Macaroni::Lua::LuaOperator;
~import Macaroni::Lua::LuaProperty;
~import Macaroni::InternalSource;
~import boost::intrusive_ptr;
~import boost::optional;
~import Macaroni::Exception;
~import std::stringstream;
~import Macaroni::Cpp::UseLightDef;

~namespace Macaroni::Environment;

class Output {};

typedef boost::intrusive_ptr<Output> OutputPtr
	~hfile=<Macaroni/Environment/OutputPtr.h>
	@UseLightDef true
	@LuaClass [ SameAsNode = Output ]
;

class Output
	@LuaClass [
		ReferenceType = OutputPtr
	]
{
	~block "h-predef" {
		#include <boost/format.hpp>
	}

	~block "h"
	{
	public:
		enum LEVEL {
			ERROR,       /* Always displays. */
			WARN,        /* Always displays. */
			IMPORTANT,   /* Always displays. */
			INFO,        /* Medium verbosity. */
			DEBUG        /* High verbosity. */
		};
	}

	class LEVEL { ~hfile=<Macaroni/Environment/Output.h> };


	public virtual ~Output()
	{
	}

	public ~global ~friend void intrusive_ptr_add_ref(Output * p) {
		p->addReference();
	}

	public ~global ~friend void intrusive_ptr_release(Output * p) {
		if (p->releaseReference()) {
			delete p;
		}
	}

	protected virtual void addReference() = 0;

	/* Finishes a Output. */
	public virtual void End()
		@LuaFunction "End" = 0;


	public virtual void LuaError(const char * msg)
		@LuaFunction "Error"
	{
		WriteAnything(ERROR, msg, false);
	}

	/*public void Error(const std::string & msg) const
	{
		Error(msg.c_str());
	}*/

	public void LuaErrorLine(const char * msg)
		@LuaFunction "ErrorLine"
	{
		WriteAnything(ERROR, msg, true);
	}

	/*public void ErrorLine(const std::string & msg) const
	{
		ErrorLine(msg.c_str());
	}

	public void ErrorLine(const Macaroni::Exception & ex) const
	{
		ErrorLine(ex.message());
	}

	public void ErrorLine(const std::exception & ex) const
	{
		ErrorLine(ex.what());
	}*/

	/** If true is returned, the reference will be destroyed. */
	protected virtual bool releaseReference() = 0;

	/* Starts a new Output. */
	public virtual OutputPtr Start(const char * name)
		@LuaFunction "Start" = 0;

	/** This single function is impemented by subclasses. */
	protected virtual void WriteAnything(LEVEL level, const char * msg,
		                                 bool newLine) = 0;

	/** Pass in various types. */
	protected virtual void WriteAnything(LEVEL level, const std::string & msg,
		                                 bool newLine)
	{
		WriteAnything(level, msg.c_str(), newLine);
	}

	protected virtual void WriteAnything(LEVEL level, const exception & ex,
		                                 bool newLine)
	{
		WriteAnything(level, ex.what(), newLine);
	}

	protected virtual void WriteAnything(LEVEL level,
		                                 const Macaroni::Exception & ex,
		                                 bool newLine)
	{
		WriteAnything(level, ex.where(), false);
		WriteAnything(level, ex.message(), false);
		WriteAnything(level, "", newLine);
	}

	protected void WriteAnything(
		LEVEL level,
		const optional<InternalSource> & source,
		bool nl)
	{
		if (source)
		{
			stringstream msg;
			msg << source.get().FileName
				<< ", line " << source.get().Line;
			WriteAnything(level, msg.str(), nl);
		} else {
			WriteAnything(level, "Source unknown.", nl);
		}
	}

	protected virtual void WriteAnything(LEVEL level,
		                                 const wchar_t * msg,
		                                 bool newLine)
	{
		stringstream ss;
		ss << msg;
		WriteAnything(level, ss.str().c_str(), newLine);
	}

	~block "h" {
		public:
		template<class charT, class Traits>
		inline void WriteAnything(
			LEVEL level,
			const boost::basic_format<charT,Traits> & format,
			bool newLine) {
			WriteAnything(level, (const char *) format.str().c_str(), newLine);
		}
	}

	public virtual void LuaWrite(const char * msg)
		@LuaFunction "Write"
	{
		WriteAnything(DEBUG, msg, false);
	}

	public virtual void LuaWriteLine(const char * msg)
		@LuaFunction "WriteLine"
	{
		WriteAnything(DEBUG, msg, true);
	}

	~block "h"
	{
	public:
		template<typename T>
		inline void Error(T arg) {
			WriteAnything(ERROR, arg, false);
		}

		template<typename T>
		inline void ErrorLine(T arg) {
			WriteAnything(ERROR, arg, true);
		}

		template<typename T>
		inline void Write(T arg) {
			WriteAnything(DEBUG, arg, false);
		}

		template<typename T>
		inline void WriteLine(T arg) {
			WriteAnything(DEBUG, arg, true);
		}
	}
};

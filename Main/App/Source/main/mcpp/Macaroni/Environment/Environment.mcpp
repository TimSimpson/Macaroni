/**
 * Copyright 2011 Tim Simpson
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

~import Macaroni::AppPaths;
~import Macaroni::AppPathsPtr;
~import BOOST_FOREACH;
~import Macaroni::Model::Context;
~import Macaroni::Model::ContextLuaMetaData;
~import Macaroni::Model::ContextPtr;
~import Macaroni::Model::Element;
~import Macaroni::Exception;
~import boost::format;
~import Macaroni::Environment::Input;
~import Macaroni::Environment::InputPtr;
~import boost::optional;
~import Macaroni::Environment::Output;
~import Macaroni::Environment::OutputLuaMetaData;
~import Macaroni::Environment::OutputPtr;
~import Macaroni::Environment::LuaEnvironment;
~import Macaroni::Model::NodePtr;
~import boost::filesystem::path;
~import Macaroni::Model::Reason;
~import Macaroni::Environment::ReplCommand;
~import std::string;

// There's a bug which prevents Macaroni from detecting creating a node within
// a Namespace if the node has the same short name. :(

class Macaroni::Environment::Environment
/*
 * Handles the interactive portions of a context, particularly regarding
 * the project / build system.
 */
{
	private AppPathsPtr appPaths;
	private ContextPtr context;
	private InputPtr input;
	private LuaEnvironment luaEnvironment;
	private OutputPtr output;
	private bool quitRepl;

	public Environment(AppPathsPtr appPaths, ContextPtr context,
		               InputPtr input, OutputPtr output)
	: appPaths(appPaths),
	  context(context),
	  input(input),
	  luaEnvironment(),
	  output(output),
	  quitRepl(false)
	{
		output->WriteLine("Creating new Environment with the following "
		                  "AppPaths:");
		output->Write(format("Message file : %s") %
		           appPaths->GetMessagePaths().string());
		output->WriteLine("");
		output->Write("Library Paths : [");
		BOOST_FOREACH(const boost::filesystem::path & path,
			          appPaths->GetLibraryRepoPaths())
		{
			output->Write(path.string());
		}
		output->WriteLine("]");
		output->Write("Generator Paths : [");
		BOOST_FOREACH(const boost::filesystem::path & path,
			          appPaths->GetGeneratorPaths())
		{
			output->Write(path.string());
		}
		output->WriteLine("]");
		output->WriteLine("Opening internal modules...");
		luaEnvironment.OpenAllLuaModules();
		output->WriteLine("");


		ContextLuaMetaData::PutInstanceOnStack(luaEnvironment.GetState(),
		                                       context);
		lua_setglobal(luaEnvironment.GetState(), "context");

		OutputLuaMetaData::PutInstanceOnStack(luaEnvironment.GetState(),
		                                      output);
		lua_setglobal(luaEnvironment.GetState(), "output");


	}

	~hidden bool exit(string line)
		@ReplCommand [
			Name = "~exit",
			Summary = "Exit REPL."
		]
	{
		quitRepl = true;
		return true;
	}

	/* Finds any file named "project.lua" in the current directory or any
	 * directory it can find by iterating downward. */
	public static optional<path> FindDefaultProject()
	{
		path defaultLua = "project.lua";
		if (boost::filesystem::exists(defaultLua)) {
			return optional<path>(defaultLua);
		}
		path directory = "../";
		while(boost::filesystem::exists(directory)) {
			path file = directory / "project.lua";
			if (boost::filesystem::exists(file)) {
				return optional<path>(file);
			}
			directory = directory / "../";
		}
		return boost::none;
	}

	public inline ContextPtr GetContext()
	{
		return context;
	}

	public inline LuaEnvironment & GetLuaEnvironment()
	{
		return luaEnvironment;
	}

	~hidden bool maccy(string line)
		@ReplCommand[
			Name = "~",
			Summary = "Who is justice?"
		]
	{
		output->WriteLine("");
		output->WriteLine("           ~'o'~");
		output->WriteLine("           \\___/");
		output->WriteLine("");
		output->WriteLine("             ^");
        output->WriteLine("      ( I AM JUSTICE! )");
        output->WriteLine("");
		return true;
	}

	~hidden bool pwd(string line)
		@ReplCommand [
			Name = "~pwd",
			Summary = "Print working directory."
		]
	{
		output->WriteLine(appPaths->GetWorkingDirectory().string());
		return true;
	}


	public bool Repl()
	{
		output->WriteLine("Starting Lua REPL. Type \"~help\" for commands.");
		string line;
		quitRepl = false;
		while(!quitRepl)
		{
			input->ReadString(line);
			if (line == "~quit" || line=="~exit")
			{
				return true;
			}
			else if (!replCommand(line))
			{
				try
				{
					luaEnvironment.ParseString("REPL", line.c_str());
				} catch(const Macaroni::Exception & me) {
					output->WriteLine(format("Error parsing : %s")
					                  % me.what());
				}
				try
				{
					luaEnvironment.Run();
				} catch(const Macaroni::Exception & me) {
					output->WriteLine(format("Error running Lua : %s")
					                  % me.what());
				}
			}
		}
	}

	~hidden bool replCommand(string line);

	public bool RunDefaultProject() {
		optional<path> projectFilePath = FindDefaultProject();
		if (projectFilePath) {
			string filePath = projectFilePath.get().string();
			output->WriteLine(format("Parsing file %s...") % filePath);
			try
			{
				luaEnvironment.ParseFile(filePath);
				luaEnvironment.Run();
			} catch(const Macaroni::Exception & me) {
				output->WriteLine(me.what());
				return false;
			}			
			return true; // or throw :p
		} else {
			output->WriteLine("No \"project.lua\" file found.");
			return false;
		}
	}

	~hidden bool setDirectory(string line)
		@ReplCommand[
			Name = "~cd",
			Summary = "Change working directory."
		]
	{
		string newDir = line.substr(3, line.size() - 3);
		path p(newDir);
		appPaths->SetWorkingDirectory(p);
		std::vector<std::string> paths;
		paths.push_back(appPaths->GetWorkingDirectory().string());
		BOOST_FOREACH(path gp, appPaths->GetGeneratorPaths()) {
			paths.push_back(gp.string());
		}
		luaEnvironment.SetPackageDirectory(paths);
		return true;
	}

	~hidden bool showHelp(string line)
		@ReplCommand[
			Name = "~help",
			Summary = "Print help."
		]
	;
};

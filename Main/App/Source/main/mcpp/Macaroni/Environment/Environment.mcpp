/**
 * Copyright 2011 Tim Simpson
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

~import Macaroni::Environment::Values::Any;
~import Macaroni::Environment::Values::AnyPtr;
~import Macaroni::AppPaths;
~import Macaroni::AppPathsPtr;
//~import Macaroni::Environment::Values::AnyPtr;
~import BOOST_FOREACH;
~import Macaroni::Model::Context;
~import Macaroni::Model::ContextLuaMetaData;
~import Macaroni::Model::ContextPtr;
~import Macaroni::Model::Element;
~import Macaroni::Exception;
~import Macaroni::IO::FileNotFoundException;
~import boost::format;
~import Macaroni::Environment::Input;
~import Macaroni::Environment::InputPtr;
~import boost::optional;
~import Macaroni::Environment::Output;
~import Macaroni::Environment::OutputLuaMetaData;
~import Macaroni::Environment::OutputPtr;
~import boost::optional;
~import Macaroni::Environment::LuaEnvironment;
~import Macaroni::Model::NodePtr;
~import boost::filesystem::path;
~import Macaroni::IO::Path;
~import Macaroni::IO::PathPtr;
~import Macaroni::IO::PathLuaMetaData;
~import Macaroni::IO::Paths;
~import Macaroni::Environment::PluginFactory;
~import Macaroni::Environment::PluginFactoryLuaMetaData;
~import Macaroni::Environment::PluginFactoryPtr;
~import Macaroni::Model::Project::ProjectVersionId;
~import Macaroni::Model::Project::ProjectVersion;
~import Macaroni::Model::Project::ProjectVersionLuaMetaData;
~import Macaroni::Model::Project::ProjectVersionPtr;
~import Macaroni::Model::Reason;
~import Macaroni::Environment::ReplCommand;
~import std::string;
~import Macaroni::Model::Project::Resource;
~import Macaroni::Model::Project::ResourcePtr;

~import Macaroni::Environment::ProjectEnvironment;
~import Macaroni::Environment::ProjectEnvironmentPtr;
~import Macaroni::Environment::ProjectLoader;
~import Macaroni::Environment::ProjectLoaderPtr;
~import Macaroni::Environment::Values::Table;

// There's a bug which prevents Macaroni from detecting creating a node within
// a Namespace if the node has the same short name. :(

class Macaroni::Environment::Environment
/*
 * Handles the interactive portions of a context, particularly regarding
 * the project / build system.
 */
{
	~block "h-predef" {
		#include <boost/algorithm/string.hpp>
		#include <Macaroni/Environment/PluginFactory.h>
		#include <Macaroni/Environment/ProjectLoader.h>
		#include <Macaroni/Environment/ProjectEnvironment.h>
	}

	~block "cpp"
	{
		MACARONI_SIMPLE_STRING_EXCEPTION_DEFINE(ChildProjectFileNotFound,
			"Did not find subproject: no file found at %s.");

		MACARONI_SIMPLE_STRING_EXCEPTION_DEFINE(LoadProjectException,
			"Error parsing the definition file for project %s.");

		MACARONI_SIMPLE_STRING_EXCEPTION_DEFINE(LoadProjectException2,
			"After running the project definition file, project %s was "
			"still undefined, meaning the definition file is incorrect.");

		MACARONI_SIMPLE_STRING_EXCEPTION_DEFINE(LoadProjectException3,
			"The project definition file defined no \"project\" "
			"variable (%s).");

		MACARONI_SIMPLE_STRING_EXCEPTION_DEFINE(LoadProjectException4,
			"Error parsing the project file %s.");

		MACARONI_SIMPLE_STRING_EXCEPTION_DEFINE(ProjectNotFoundException,
			"Could not find a file for project %s.");

		/*optional<path> parentDir(const path & child)
		{
			const string::size_type index = child.string().find(
				boost::filesystem::slash<boost::filesystem::path>::value);
			if (string::npos == index)
			{
				return boost::none;
			}
			else
			{
				return path(child.string().substr(index + 1));
			}
		}*/
	}

	private AppPathsPtr appPaths;
	private ContextPtr context;
	private ProjectEnvironmentPtr currentProject;
	private InputPtr input;
	// private GetLuaEnvironment() GetLuaEnvironment();
	private OutputPtr output;
	//private PluginFactoryPtr pluginFactory;
	private ProjectLoaderPtr pLoader;
	// Properties given at runtime, usually via the command line.
	private AnyPtr runTimeProperties;
	private bool quitRepl;
	private const bool showPaths;
	// The working directory. This is always the project file's directory.
	private path workingDirectory;
	// The file current being parsed.
	//private ProjectVersionId workingProjectId;

	public Environment(AppPathsPtr appPaths, ContextPtr context,
		               InputPtr input, OutputPtr output,
		               AnyPtr runTimeProperties,
		               bool showPaths=false)
	: appPaths(appPaths),
	  context(context),
	  currentProject(),
	  input(input),
	  output(output),
	  pLoader(),
	  runTimeProperties(runTimeProperties),
	  //pluginFactory(new PluginFactory(appPaths)),
	  quitRepl(false),
	  showPaths(showPaths),
	  workingDirectory("./")
	{
		if (showPaths)
		{
			output->DebugLine("Creating new Environment with "
				              "the following AppPaths:");
			output->DebugLine(format("Message file : %s") %
			           appPaths->GetMessagePaths().string());
			output->DebugLine("");
			output->Debug("Library Paths : [");
			bool seenOnce = false;
			BOOST_FOREACH(const boost::filesystem::path & path,
				          appPaths->GetLibraryRepoPaths())
			{
				if (seenOnce)
				{
					output->Debug(", ");
				}
				seenOnce = true;
				output->Debug(path.string());
			}
			output->DebugLine("]");
			output->Debug("Generator Paths : [");
			BOOST_FOREACH(const boost::filesystem::path & path,
				          appPaths->GetGeneratorPaths())
			{
				output->Debug(path.string());
			}
			output->DebugLine("]");
		}
		pLoader = new ProjectLoader(appPaths, context, output,
			                        runTimeProperties);
	}

	public AppPathsPtr GetAppPaths()
	{
		return appPaths;
	}

	~hidden bool exit(string line)
		@ReplCommand [
			Name = "~exit",
			Summary = "Exit REPL."
		]
	{
		quitRepl = true;
		return true;
	}

	/* Finds any file named "project.lua" in the current directory or any
	 * directory it can find by iterating downward. */
	public static optional<path> FindDefaultProject(
		optional<path> dirOrProjectFile=boost::none)
	{
		using boost::filesystem::equivalent;
		using boost::filesystem::exists;
		using boost::filesystem::is_directory;

		path directory = "";
		path defaultLua = "project.lua";
		if (dirOrProjectFile)
		{
			path dirOrProjectFilePath = dirOrProjectFile.get();
			if (is_directory(dirOrProjectFilePath))
			{
				directory = dirOrProjectFilePath;
				defaultLua = directory / "project.lua";
			}
			else if (exists(dirOrProjectFilePath))
			{
				defaultLua = directory;
				directory = dirOrProjectFilePath.parent_path();
			}
		}

		if (exists(defaultLua)) {
			return optional<path>(defaultLua);
		}
		directory = directory / "../";
		while(exists(directory)) {
			path file = directory / "project.lua";
			if (exists(file)) {
				return optional<path>(file);
			}
			const path nextDirectory = directory / "../";
			// Make sure we're not endlessly iterating over "/" in Unix.
			if (equivalent(directory, nextDirectory))
			{
				return boost::none;
			}
			directory = nextDirectory;
		}
		return boost::none;
	}

	public inline ContextPtr GetContext()
	{
		return context;
	}

	public OutputPtr GetOutput()
	{
		return output;
	}

	~hidden ProjectEnvironmentPtr getProjectEnvironment()
	{
		//TODO: Store this based on various factors.
		return currentProject;
	}


	~hidden bool maccy(string line)
		@ReplCommand[
			Name = "~",
			Summary = "Who is justice?"
		]
	{
output->WriteLine("    _____________________    ");
output->WriteLine("   /                     \\   ");
output->WriteLine("  |   I AM JUSTICE!!!!    |  ");
output->WriteLine("   \\_______________  ____/   ");
output->WriteLine("     ....          \\|   _    ");
output->WriteLine("     ( '' \"\"\"....__.  __ )-)( ");
output->WriteLine("    (_. (____''' ___=)'_)_(/_)_ ");
output->WriteLine("       (________""   \\(--(----- / ");
output->WriteLine("                     \\________/  ");
        output->WriteLine("");
		return true;
	}

	~hidden bool pwd(string line)
		@ReplCommand [
			Name = "~pwd",
			Summary = "Print working directory."
		]
	{
		output->WriteLine(this->workingDirectory.string());
		return true;
	}


	public bool Repl()
	{
		output->WriteLine("Starting Lua REPL. Type \"~help\" for commands.");
		string line;
		quitRepl = false;
		while(!quitRepl)
		{
			input->ReadString(line);
			if (line == "~quit" || line=="~exit")
			{
				quitRepl = true;
			}
			else if (!replCommand(line))
			{
				RunCommand(line.c_str());
			}
		}
		return true;
	}

	~hidden bool replCommand(string line);

	public bool RunCommand(const char * cmd)
	{
		//TODO: Use a fetched pEnv and do this directly.
		return getProjectEnvironment()->RunCommand(cmd, this->output);
	}

	/** Runs the default project. Does not return the Id. */
	public bool RunDefaultProject(
		optional<path> dirOrProjectFile=boost::none)
	{
		optional<path> projectFilePath = FindDefaultProject();
		if (projectFilePath) {
			try {
				currentProject = pLoader->RunNonInstalledProject(
					projectFilePath.get());
				return true;
			} catch (const Macaroni::Exception & me) {
				output->ErrorLine(format("Error running default project : %s")
			                      % me.message());
				return false;
			}
		} else {
			output->ErrorLine("No \"project.lua\" file found.");
			return false;
		}
	}


	~hidden bool showHelp(string line)
		@ReplCommand[
			Name = "~help",
			Summary = "Print help."
		]
	;

};

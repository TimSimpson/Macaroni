/**
 * Copyright 2011 Tim Simpson
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

~import std::cin;
~import std::cout;
~import Macaroni::Environment::Environment;
~import Macaroni::Exception;
~import Macaroni::Environment::Input;
~import Macaroni::Environment::InputPtr;
~import Macaroni::InternalSource;
~import boost::optional;
~import Macaroni::Environment::Output;
~import Macaroni::Environment::OutputPtr;
~import Macaroni::Environment::Messages;
~import std::string;
~import std::stringstream;
~import std::vector;

~namespace Macaroni::Environment;

class Console : public virtual Input, public virtual Output
{
	~block "h-internal-predef"
	{
		#include <Macaroni/ME.h>
		#ifdef MACARONI_COMPILE_TARGET_WINDOWS
			#include <windows.h>
		#endif
	}

	~block "h-internal"
	{
		#ifdef MACARONI_COMPILE_TARGET_WINDOWS

			struct PlatformConsole
			{
				bool ok;
				::WORD originalColor;
				HANDLE stdOut;

				PlatformConsole()
				:	ok(false)
				{
					stdOut = GetStdHandle(STD_OUTPUT_HANDLE);
					if (INVALID_HANDLE_VALUE != stdOut)
					{
						CONSOLE_SCREEN_BUFFER_INFO info;
						if (0 != GetConsoleScreenBufferInfo(stdOut, &info))
						{
							originalColor = info.wAttributes;
							ok = true;
						}
					}
				}

				void SetError()
				{
					if (ok)
					{
						// It probably is wrong to not write to stderr... but
						// then why does it feel so right?
						SetConsoleTextAttribute(stdOut, (WORD) 12);
					}
				}
				void SetNormal()
				{
					if (ok)
					{
						SetConsoleTextAttribute(stdOut, originalColor);
					}
				}

			};
		#else
			struct PlatformConsole
			{
				void SetError(){}
				void SetNormal(){}
			};
		#endif
	}


	private int indentLevel;
	private std::string indentString;
	private bool open;
	~block "h"
	{
		class PlatformConsole;
		typedef boost::shared_ptr<PlatformConsole> PlatformConsolePtr;
		PlatformConsolePtr platformConsole;
	}
	private int referenceCount;

	public Console(int indentLevel=0)
	: indentLevel(indentLevel),
	  indentString(indentLevel, '='),
	  open(true),
	  platformConsole(),
	  referenceCount(0)
	{
		platformConsole.reset(new PlatformConsole());
	}

	public virtual ~Console()
	{
	}

	protected virtual void addReference()
	{
		referenceCount ++;
	}

	public virtual void End()
	{
		open = false;
	}

	public virtual void Error(const char * msg) const
	{
		platformConsole->SetError();
		Write(msg);
		platformConsole->SetNormal();
	}


	public virtual void ErrorLine(const char * msg) const
	{
		platformConsole->SetError();
		WriteLine(msg);
		platformConsole->SetNormal();
	}

	public virtual void ReadString(string & input) const
	{
		cout << ">>";
		getline(cin, input);
	}

	protected virtual bool releaseReference()
	{
		referenceCount --;
		return referenceCount <= 0;
	}

	/* Starts a new Output. */
	public virtual OutputPtr Start(const char * name) {
		OutputPtr ptr(new Console(indentLevel + 1));
		return ptr;
	}


	public virtual void Write(const char * msg) const
	{
		cout << indentString << msg;
	}

	public void Write(const Exception & ex) const
	{
		Write(ex.where());
		cout << " : ";
		Write(ex.message());
	}

	public void Write(const std::string & msg) const
	{
		cout << indentString << msg;
	}

	public void Write(const optional<InternalSource> & source) const
	{
		if (source)
		{
			stringstream msg;
			msg << source.get().FileName
				<< ", line " << source.get().Line;
			WriteLine(msg.str());
		} else {
			WriteLine("Source unknown.");
		}
	}

	public void WriteMessage(const char * msgKey) const
	{
		cout << indentString << Macaroni::Environment::Messages::Get(msgKey);
	}

	public virtual void WriteLine(const char * msg) const
	{
		cout << indentString << msg << std::endl;
	}

	public void WriteLine(const wchar_t * msg) const
	{
		cout << indentString << msg << std::endl;
	}

	public void WriteLine(const Exception & ex) const
	{
		Write(ex);
		cout << std::endl;
	}

	public void WriteLine(const std::string & msg) const
	{
		cout << indentString << msg << std::endl;
	}

	public void WriteLine(const optional<InternalSource> & source) const
	{
		Write(source);
		cout << std::endl;
	}
};

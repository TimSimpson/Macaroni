~import boost::intrusive_ptr;
~import Macaroni::Lua::LuaClass;
~import Macaroni::Lua::LuaFunction;
~import Macaroni::Lua::LuaOperator;
~import Macaroni::Lua::LuaProperty;
~import std::string;
~import Macaroni::Cpp::UseLightDef;

~namespace Macaroni::Environment;

class Input {};

typedef boost::intrusive_ptr<Input> InputPtr;

class Input
{
	public virtual ~Input()
	{
	}

	public ~global ~friend void intrusive_ptr_add_ref(Input * p) {
		p->addReference();
	}

	public ~global ~friend void intrusive_ptr_release(Input * p) {
		if (p->releaseReference()) {
			delete p;
		}
	}

	protected virtual void addReference() = 0;

	public virtual void ReadString(string & input) const = 0;

	/** If true is returned, the reference will be destroyed. */
	protected virtual bool releaseReference() = 0;
};

~import Macaroni::Environment::Values::AnyPtr;
~import boost::intrusive_ptr;
~import Macaroni::Lua::LuaClass;
~import Macaroni::Lua::LuaFunction;
~import Macaroni::Lua::LuaGlueCode;
~import Macaroni::Lua::LuaIncludes;
~import Macaroni::Lua::LuaOperator;
~import Macaroni::Lua::LuaProperty;
~import Macaroni::Environment::Plugin;
~import Macaroni::Environment::PluginPtr;
~import std::string;
~import Macaroni::Model::Project::Target;
~import Macaroni::Model::Project::TargetPtr;
~import Macaroni::Cpp::UseLightDef;

~namespace Macaroni::Environment;

typedef intrusive_ptr<Plugin ~l> PluginPtr
        @LuaClass [ SameAsNode = Plugin ]
        @UseLightDef true;


class Plugin
    @LuaClass [
        ReferenceType = PluginPtr
    ]
	@LuaIncludes ={
		#include <Macaroni/Environment/Values/Basic.h>
		#include <Macaroni/Environment/LuaEnvironment.h>
		#include <sstream>
	}
{
    private const string name;
    private int referenceCount;

    public Plugin(const string & name)
    :   name(name),
        referenceCount(0)
    {
    }

	public virtual ~Plugin()
	{
	}

    public const string & GetName() const
        @LuaProperty "Name"
    {
        return name;
    }

    public ~global ~friend void intrusive_ptr_add_ref(Plugin * p)
    {
        p->referenceCount ++;
    }

    public ~global ~friend void intrusive_ptr_release(Plugin * p)
    {
        p->referenceCount --;
        if (p->referenceCount < 1)
        {
            delete p;
        }
    }

    public virtual void Run(string action, AnyPtr arguments
                    /* Some kind of work context */)
		@LuaFunction "Run"
		@LuaGlueCode ={
			try
			{
				PluginPtr & instance = PluginLuaMetaData::GetInstance(L, 1);

				// Set the global properties.
				lua_getglobal(L, "properties");
				AnyPtr globalProperties = LuaEnvironment::SerializeValue(L, -1);
				lua_pop(L, 1); // get rid of global table.
				instance->SetGlobalProperties(globalProperties);

				// Marshall arguments.
				const std::string arg1(luaL_checkstring(L, 2));
				//Macaroni::Model::Project::TargetPtr & arg2 =
				//	Macaroni::Model::Project::TargetLuaMetaData::GetInstance(L, 3);
				// The third argument will be a lua table. Or rather, it should be.
				Values::AnyPtr arg2(new Values::Table());
				if (1 == lua_istable(L, 3))
				{
					Values::Table & table = static_cast<Values::Table &>(*arg2);
					LuaEnvironment::SerializeTable(table, L, 3);
				}
				instance->Run(arg1, arg2);
				return 0;
			} catch(const Macaroni::Exception & ex) {
				return luaL_error(L, ex.message().c_str());
			}
		}
	= 0;

	public virtual void SetGlobalProperties(AnyPtr properties) = 0;

	public virtual string ToString()
		@LuaOperator "__tostring"
		= 0;
};

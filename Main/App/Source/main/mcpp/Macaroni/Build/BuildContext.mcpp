~import Macaroni::Model::Library;
~import Macaroni::Model::LibraryPtr;
~import Macaroni::Build::Manifest;
~import Macaroni::Build::ManifestPtr;
~import Macaroni::IO::Path;
~import Macaroni::IO::PathPtr;
~import boost::shared_ptr;
~import std::string;
~import std::vector;

namespace Macaroni::Build {

class BuildContext
{			
	private AppPathsPtr appPaths;
	private PathPtr installDir;
	private LibraryPtr library;
	private PathPtr outputDir;	
	private std::string properties;
	private vector<PathPtr> sourceDirs;

	public BuildContext(AppPathsPtr appPaths, LibraryPtr library, vector<PathPtr> sourceDirs, 
						PathPtr outputDir, PathPtr installDir, const std::string & properties)
	: appPaths(appPaths),
	  installDir(installDir),
	  library(library),
	  outputDir(outputDir),
	  properties(properties),
	  sourceDirs(sourceDirs)
	{
	}

	public inline AppPathsPtr & GetAppPaths()
	{
		return appPaths;
	}

	public inline PathPtr & GetInstallDir()
	{
		return installDir;
	}

	public inline LibraryPtr GetLibrary() 
	{
		return library;
	}	

	public inline PathPtr & GetOutputDir()
	{
		return outputDir;
	}

	public inline const std::string & GetProperties()
	{
		return properties;
	}

	public inline vector<PathPtr> & GetSourceDirs()
	{
		return sourceDirs;
	}

	
};

typedef shared_ptr<BuildContext> BuildContextPtr;

}// end namespace

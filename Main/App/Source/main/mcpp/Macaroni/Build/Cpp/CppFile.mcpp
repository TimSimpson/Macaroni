/**
 * Copyright 2011 Tim Simpson
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
~import Macaroni::Build::Cpp::CompilerSettings;
~import Macaroni::Environment::Console;
~import boost::filesystem::create_directories;
~import boost::optional;
~import boost::filesystem::path;
~import Macaroni::IO::Path;
~import Macaroni::Environment::Process;
~import std::string;
~import Macaroni::Environment::StringPair;
~import std::stringstream;
~import std::vector;

namespace Macaroni::Build::Cpp  {

class CppFile
{
	private Path obj;
	private Path src;

	public CppFile(path srcRoot, path srcPath, path outputDirectory)
	:	obj(srcRoot, srcPath), // this is indeed nonsense btw
		src(srcRoot, srcPath)
	{
		std::string::size_type dotIndex = src.ToString().rfind('.');
		std::string objRelativePath = src.ToString().substr(0, dotIndex) + ".obj";
		boost::filesystem::path objFile = outputDirectory / objRelativePath;		
		obj = Path(outputDirectory, objFile);
	}

	public bool Compile(CompilerSettings & settings, 
						vector<string> & configIncludePaths,
						const Console & console)
	{
		if (!IsObjectFileOutOfDate())
        {
            return true;
        }

        CreateObjectFileDirectories();
        console.WriteLine(
        "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ C++"
        );
        console.Write("Compiling ");
        console.Write(src.GetAbsolutePath());
        console.Write(" ==> ");
        console.WriteLine(obj.GetAbsolutePath());

        boost::filesystem::path objPath(obj.GetAbsolutePath());
        objPath.branch_path();

		std::vector<MACARONI_VE_CONST std::string> args;

		std::stringstream arg;
		arg << "/Fo" << obj.GetAbsolutePath();
		args.push_back(arg.str());
		
		args.push_back("/c");

		arg.str("");
		arg << "\"" << src.GetAbsolutePath() << "\"";
		args.push_back(arg.str());

		//TODO: The line below is undoubtably a bug. I'd care more if I'd used
		//this code in the past year and a half.
		args.push_back(settings.GetAdditionalCompilerArgs());
        for (unsigned int i = 0; i < settings.GetIncludePaths().size(); i ++)
        {
			arg.str("");
			arg << "-I\"" << settings.GetIncludePaths()[i] << "\"";
			args.push_back(arg.str());
        }
        for (unsigned int i = 0; i < configIncludePaths.size(); i ++)
        {	
			arg.str("");
            arg << "-I\"" << configIncludePaths[i] << "\"";
			args.push_back(arg.str());
        }  
 
        for (unsigned int i = 0; i < settings.GetPreprocessorDirectives().size(); i ++)
        {
            const StringPair & pair = settings.GetPreprocessorDirectives()[i];
			args.push_back("/D");
			arg.str("");
            arg << "\"" << pair.Name << "\"";  			
            if (!pair.Value.empty())
            {
				arg.str("");
				arg << "=\"" << pair.Value << "\"";
            }
			args.push_back(arg.str());
        }

        optional<path> ce(settings.GetCompilerExe());
        Process process(ce, args, 
                        objPath.branch_path(), settings.GetPaths(), 
                        settings.GetEnvironmentVariables());
        process.Run(console);    
        
        return ObjectFileExists();
	}

	public void CreateObjectFileDirectories()
	{
		path objPath = path(obj.GetAbsolutePath()).branch_path();
		boost::filesystem::create_directories(objPath);
	}

	public void DeleteObjectFile(const Console & console)
	{
		console.Write("Deleting ");
		console.WriteLine(obj.GetAbsolutePath());
	}

	public path GetObjectFilePath()
	{
		return boost::filesystem::path(obj.GetAbsolutePath());
	}

	public bool IsObjectFileOutOfDate() const
	{
		return obj.IsFileOlderThan(src.GetAbsolutePath());
	}

	public inline bool ObjectFileExists() const
	{
		return obj.Exists();
	}

} // end class

} // end namespace
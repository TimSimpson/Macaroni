/**
 * Copyright 2011 Tim Simpson
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
~import Macaroni::Build::Cpp::CompilerSettings;
~import Macaroni::Environment::Console;
~import boost::filesystem::create_directories;
~import boost::optional;
~import boost::filesystem::path;
~import Macaroni::IO::Path;
~import Macaroni::Environment::Process;
~import std::string;
~import Macaroni::Environment::StringPair;
~import std::stringstream;
~import std::vector;

namespace Macaroni::Build::Cpp  {

class CppFile
{
	private Path obj;
	private Path src;

	public CppFile(path srcRoot, path srcPath, path outputDirectory)
	:	obj(srcRoot, srcPath), // this is indeed nonsense btw
		src(srcRoot, srcPath)
	{
		std::string::size_type dotIndex = src.ToString().rfind('.');
		std::string objRelativePath = src.ToString().substr(0, dotIndex) + ".obj";
		boost::filesystem::path objFile = outputDirectory / objRelativePath;		
		obj = Path(outputDirectory, objFile);
	}

	public bool Compile(CompilerSettings & settings, 
						const vector<const string> & configIncludePaths,
						const Console & console)
	{
		if (!IsObjectFileOutOfDate())
		{
			return true;
		}

		CreateObjectFileDirectories();
		console.WriteLine(
		"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ C++"
		);
		console.Write("Compiling ");
		console.Write(src.GetAbsolutePath());
		console.Write(" ==> ");
		console.WriteLine(obj.GetAbsolutePath());

		boost::filesystem::path objPath(obj.GetAbsolutePath());
		objPath.branch_path();

		std::stringstream args;	
		args << "/Fo" << obj.GetAbsolutePath() << " ";
		args << "/c \"" << src.GetAbsolutePath() << "\" ";
		//args << " \"" << src.GetAbsolutePath() << "\" ";
		args << " " << settings.GetAdditionalCompilerArgs();
		for (unsigned int i = 0; i < settings.GetIncludePaths().size(); i ++)
		{
			args << " -I\"" << settings.GetIncludePaths()[i] << "\"";
		}
		for (unsigned int i = 0; i < configIncludePaths.size(); i ++)
		{
			args << " -I\"" << configIncludePaths[i] << "\"";
		}  
 
		for (unsigned int i = 0; i < settings.GetPreprocessorDirectives().size(); i ++)
		{
			const StringPair & pair = settings.GetPreprocessorDirectives()[i];
			args << " /D \"" << pair.Name << "\"";		
			if (!pair.Value.empty())
			{
				args << "=\"" << pair.Value << "\"";
			}
			args << " ";
		}

		optional<path> ce(settings.GetCompilerExe());
		Process process(ce, args.str(), 
						objPath.branch_path(), settings.GetPaths(), 
						settings.GetEnvironmentVariables());
		process.Run(console);	
		
		return ObjectFileExists();
	}

	public void CreateObjectFileDirectories()
	{
		path objPath = path(obj.GetAbsolutePath()).branch_path();
		boost::filesystem::create_directories(objPath);
	}

	public void DeleteObjectFile(const Console & console)
	{
		console.Write("Deleting ");
		console.WriteLine(obj.GetAbsolutePath());
	}

	public path GetObjectFilePath()
	{
		return boost::filesystem::path(obj.GetAbsolutePath());
	}

	public bool IsObjectFileOutOfDate() const
	{
		return obj.IsFileOlderThan(src.GetAbsolutePath());
	}

	public inline bool ObjectFileExists() const
	{
		return obj.Exists();
	}

} // end class

} // end namespace
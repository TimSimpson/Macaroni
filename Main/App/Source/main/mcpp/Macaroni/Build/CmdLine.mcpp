/**
 * Copyright 2011 Tim Simpson
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
~import Macaroni::AppPaths;
~import Macaroni::AppPathsPtr;
~import Macaroni::Environment::Values::Any;
~import Macaroni::Environment::Values::AnyPtr;
~import Macaroni::Build::BadArgException;
~import Macaroni::Environment::Values::Bool;
~import Macaroni::Environment::Console;
~import Macaroni::Model::Context;
~import Macaroni::Model::ContextPtr;
~import Macaroni::Environment::Environment;
~import Macaroni::IO::FileSet;
~import BOOST_FOREACH;
~import Macaroni::Environment::Input;
~import Macaroni::Environment::InputPtr;
~import boost::lexical_cast;
~import Macaroni::Model::Library;
~import Macaroni::Model::LibraryPtr;
~import Macaroni::Environment::LuaEnvironment;
~import Macaroni::Environment::MacaroniEnvironment;
~import Macaroni::Environment::Messages;
~import Macaroni::Build::NewProjectWizard;
~import Macaroni::Environment::Output;
~import Macaroni::Environment::OutputPtr;
~import boost::optional;
~import Macaroni::IO::Paths;
~import boost::filesystem::path;
~import Macaroni::IO::RegexFileSet;
~import Macaroni::SimpleException;
~import std::string;
~import std::stringstream;
~import Macaroni::Environment::Values::String;
~import Macaroni::Environment::Values::Table;
~import boost::program_options::variables_map;
~import std::vector;
~import Macaroni::Containers::VectorOfConstString;

namespace Macaroni::Build {

/** Governs the main execution routine of Macaroni.  The command line
 * has a few options other than just building the project, which
 * are sorted through here.
 */
class CmdLine
{
	private bool about;
	private bool build;
	private vector<string> buildOptions;
	private bool clean;
	private Console & console;
	private bool debugMode;
	private bool document;
	private bool endPrompt;
	private bool generate;
	private bool generateDebug;
	private bool generateLess;
	private vector<path> generatorPaths;
	private optional<int> initialReturnCode;
	private bool install;
	private vector<path> libraryRepoPaths;
	private string luaTestsPath;
	private path messagesPath;
	private optional<path> moonScriptPath;
	private optional<string> newProject;
	private Output * output;
	private optional<path> projectFile;
	private bool printTimes;
	private bool repl;
	private AnyPtr runTimeProperties;
	private bool skipGenSrcRedirects;
	private bool startPrompt;
	private bool showPaths;
	private bool verbose;

	~block "h-predef" {
		#include <boost/program_options.hpp>
	}

	~block "h" {
		public: CmdLine(int argc, const char * * argv,
			            Macaroni::Environment::Console & console);
	}

~block "cpp" {
	CmdLine::CmdLine(int argc, const char * * argv,
		             Console & console)
	:	about(false),
	    build(false),
	    buildOptions(),
		clean(false),
		console(console),
		debugMode(false),
		document(false),
		endPrompt(false),
		generate(false),
		generateDebug(false),
		generateLess(false),
		generatorPaths(),
		install(false),
		libraryRepoPaths(),
		luaTestsPath(""),
		messagesPath(""),
		moonScriptPath(),
		newProject(),
		initialReturnCode(1),
		output(&console),
		printTimes(false),
		repl(false),
		runTimeProperties(),
		skipGenSrcRedirects(false),
		startPrompt(false),
		showPaths(false),
		verbose(false)
	{
		namespace po = boost::program_options;
		po::options_description description("Options");
		vector<string> argGeneratorPaths;
		vector<string> argLibraryRepoPaths;
		string argMessagesPath;
		string argMoonScriptPath;
		string argNewProject;
		string argProjectFile;
		description.add_options()
("help,h", "Command line instructions.")
("about",
	po::bool_switch(&about),
	"Shows information on Macaroni.")
("build,b",
	po::bool_switch(&build),
	"Run the project's build phase, which may invoke a "
	"C++ compiler.")
("buildOptions,o",
	po::value<vector<string>>(&buildOptions),
	"Build options to pass to the build tool (such as CMake or "
    "Bjam).")
("clean,c",
	po::bool_switch(&clean),
	"Delete the generated directories before doing anything.")
("debug",
	po::bool_switch(&debugMode),
	"Do not catch internal exceptions.")
("document,d",
	po::bool_switch(&document),
	"Generate documentation.")
("endPrompt",
	po::bool_switch(&endPrompt),
	"If set, Macaroni will wait for user input before ending.")
("generate,g",
	po::bool_switch(&generate),
	"Run the project's generation phase, which will normally "
	"create C++ source code.")
("generateDebug",
	po::bool_switch(&generateDebug),
	"Adds debugging information to generated source code.")
("generateLess",
	po::bool_switch(&generateLess),
	"Run the project's \"generateLess\" phase, which may do "
	"something simple like updating generated project files.")
("generatorPath",
	po::value<vector<string>>(&argGeneratorPaths),
	"Path to Macaroni's Lua plugins.")
("luaTests",
	po::value<std::string>(&luaTestsPath),
	"Path to arbitrary Lua files for Macaroni to run.")
("libraryRepoPath",
	po::value<vector<string>>(&argLibraryRepoPaths),
	"Path to where additional Macaroni projects are stored.")
("messagesPath",
	po::value<decltype(argMessagesPath)>(&argMessagesPath),
	"Path to the messages file.")
("moonScriptPath",
	po::value<decltype(argMoonScriptPath)>(&argMoonScriptPath),
	"Path to MoonScript's Lua source code.")
("install,i",
	po::bool_switch(&install),
	"Install this project to your local artifact repo.")
("newProject",
	po::value<decltype(argNewProject)>(&argNewProject),
	"Create a new Macaroni project in the given directory.")
("printTimes",
	po::bool_switch(&printTimes),
	"Show milliseconds from program start next to all output.")
("repl",
	po::bool_switch(&repl),
	"Start an interactive Lua session after parsing any project"
	" files.")
("skipGenSrcRedirects",
	po::bool_switch(&skipGenSrcRedirects),
	"Skips inserting #line directives in generated C++ files.")
("startPrompt",
	po::bool_switch(&startPrompt),
	"If set, Macaroni will wait for user input before running.")
("showPaths",
	po::bool_switch(&showPaths),
	"If set, Macaroni will print out the file paths in use "
	"at the start of the program.")
("projectFile",
	po::value<string>(&argProjectFile),
	"Project file to run.")
("verbose",
	po::bool_switch(&verbose),
	"Show more console output.")
;
		po::positional_options_description pos;
		pos.add("projectFile", 1);

		po::variables_map map;
		try
		{
			po::store(po::command_line_parser(argc, argv)
					  .options(description)
					  .positional(pos).run(),
				      map);
			if (map.count("help"))
			{
				std::cout << description << std::endl;
				initialReturnCode = 0;
			}
			else
			{
				po::notify(map);
				convertArgsToPaths("generatorPath",
					argGeneratorPaths,
					generatorPaths
					);
				convertArgsToPaths("libraryRepoPath",
					argLibraryRepoPaths,
					libraryRepoPaths
					);

				if (argMessagesPath.empty()) {
					messagesPath = Paths::GetExeDirectoryPath()
						           / "Messages.txt";
				} else {
					messagesPath = convertArgToPath(
						"messagesPath", argMessagesPath);
				}
				moonScriptPath = convertOptionalArgToPathThatMustExist(
					"moonScriptPath", argMoonScriptPath);
				newProject = convertOptionalArgToString(argNewProject);
				projectFile = convertOptionalArgToPathThatMustExist(
					"project file", argProjectFile);
				initialReturnCode = boost::none;
			}
		}
		catch(const po::error & e)
		{
			std::cerr << e.what() << std::endl;
			if (argc < 1)
			{
				std::cerr << "Use argv--help for usage info." << std::endl;
			}
			std::cerr << "Run \"" <<
				(argc >= 1 ? argv[0] : "macaroni")
 			    << " --help\" to view usage info." << std::endl;
			initialReturnCode = 9;
		}
		catch(const BadArgException & bae)
		{
			std::cerr << bae.what() << std::endl;
			initialReturnCode = 9;
		}
		catch(...)
		{
			std::cerr << "Something weird happened." << std::endl;
			initialReturnCode = 10;
		}
	}

} // end c block


	public ~CmdLine()
	{
		luaTestsPath = "";
	}

	~hidden path convertArgToPath(const char * name,
		                          const string & arg)
	{
		path p = arg;
		if (!boost::filesystem::exists(p))
		{
			output->ErrorLine(
				str(boost::format("No directory found at the "
					"given %s path \"%s\"") % name % arg));
			throw BadArgException(MACARONI_INTERNAL_SOURCE);
		}
		return p;
	}

	~hidden optional<path> convertOptionalArgToPath(const string & arg)
	{
		if (arg.empty()) { return boost::none; }
		path p = arg;
		return p;
	}

	~hidden optional<path> convertOptionalArgToPathThatMustExist(
		const char * name, const string & arg)
	{
		auto rtn = convertOptionalArgToPath(arg);
		if (rtn)
		{
			if (!boost::filesystem::exists(rtn.get()))
			{
				output->ErrorLine(
					str(boost::format("No directory found at the "
						"given %s path \"%s\"") % name % arg));
				throw BadArgException(MACARONI_INTERNAL_SOURCE);
			}
		}
		return rtn;
	}

	~hidden optional<string> convertOptionalArgToString(const string & arg)
	{
		if (arg.empty()) { return boost::none; }
		return arg;
	}

	~hidden void convertArgsToPaths(
		const char * name,
		vector<string> & args, vector<path> & paths)
	{

		BOOST_FOREACH(const string & arg, args)
		{
			paths.push_back(convertArgToPath(name, arg));
		}
	}

	~hidden bool createNewProject(const string & projName)
	{
		initializeRuntimeProperties();

		AppPathsPtr appPaths = createAppPaths();
		Console * console = this->console.Clone();
		OutputPtr output(console);
		ContextPtr context(new Context("%ROOT%"));
		NewProjectWizard wizard(appPaths, context, output, runTimeProperties);

		const auto dir = appPaths->GetWorkingDirectory()
                       / projName;
		return wizard.Create(projName, dir);
	}

	private bool pathContains(vector<path> & paths, path & path)
	{
		BOOST_FOREACH(const boost::filesystem::path & p, paths)
		{
			if (p == path)
			{
				return true;
			}
		}
		return false;
	}

	private AppPathsPtr createAppPaths()
	{
		if (generatorPaths.size() < 1)
		{
			path gPath = Paths::GetExeDirectoryPath();
			generatorPaths.push_back(gPath / "Generators");
		}
		// Only include exe library path if nothing is specified
		//TODO: Get rid of EXE neighbor library path
		if (libraryRepoPaths.size() < 1)
		{
			path lPath1 = Paths::GetExeDirectoryPath();
			libraryRepoPaths.push_back(lPath1 / "Libraries");
		}
		path lPath2 = Paths::GetUserPath();
		lPath2 = lPath2 / "Libraries";
		if (!pathContains(libraryRepoPaths, lPath2))
		{
			libraryRepoPaths.push_back(lPath2);
		}
		path mPath = messagesPath;
		path possibleMoonScriptPath = Paths::GetExeDirectoryPath() / "MoonScript";
		AppPathsPtr appPaths(new AppPaths(generatorPaths, libraryRepoPaths,
										  mPath, moonScriptPath));
		return appPaths;
	}

	~hidden MacaroniEnvironment createEnvironment()
	// Creates a Macaroni Environment, taking into account command line flags.
	{
		initializeRuntimeProperties();
		Console * console = this->console.Clone();
		InputPtr input(console);
		OutputPtr output(console);
		ContextPtr context(new Context("%ROOT%"));
		Macaroni::Environment::Environment env(createAppPaths(), context,
		                                       input, output,
		                                       runTimeProperties,
		                                       showPaths);
		return env;
	}

	public bool DebugMode()
	{
		return debugMode;
	}

	public bool EndPrompt()
	{
		return endPrompt;
	}

	public bool Execute()
	{
		if (about)
		{
			printAboutText();
			return true;
		}
		if (newProject)
		{
			return createNewProject(newProject.get());
		}
		else if (!luaTestsPath.empty())
		{
			// Runs the unit for Macaroni.
			runLuaTests();
			return true;
		}
		else if (repl)
		{
			Messages::Get("Init.Test");
			return runProject(true);
		}
		else
		{
			Messages::Get("Init.Test");
			bool success = runProject(false);
			return success;
		}
		return false;
	}

	public optional<int> InitialReturnCode()
	{
		return initialReturnCode;
	}

	~hidden void initializeRuntimeProperties()
	{
		// This is where the stuff the user specified on the
		// command line turns into Lua values.
		Table * table;
		runTimeProperties.reset(table = new Table());

		// Set "buildOptions" to what the user passed in.
		Table * boTable;
		AnyPtr boTablePtr(boTable = new Table());

		int index = 0;
		for (const string & buildOption : buildOptions)
		{
			AnyPtr stringValue(new String(buildOption));
			boTable->SetAndGiveReference(++ index, stringValue);
		}
		table->SetAndGiveReference("buildOptions", boTablePtr);

		Table * generatorOptions;
		AnyPtr gsTablePtr(generatorOptions = new Table());
		AnyPtr redirect(new Bool(!skipGenSrcRedirects));
		generatorOptions->SetAndGiveReference("RedirectToMcppSource", redirect);
		AnyPtr logDebug(new Bool(generateDebug));
		generatorOptions->SetAndGiveReference("LogDebug", logDebug);
		table->SetAndGiveReference("generatorOptions", gsTablePtr);
	}

	public path MessagesPath()
	{
		return messagesPath;
	}

	~hidden void printAboutText()
	{
		output->WriteLine(
		#include <Macaroni/AboutText.h>
			);
	}

	public bool PrintTimes()
	{
		return printTimes;
	}

	~hidden void runLuaTests()
	{
		output->WriteLine("Running arbitrary LUA files.");
		Macaroni::Environment::LuaEnvironment lua;
		std::vector<std::string> paths;
		paths.push_back(luaTestsPath);
		paths.push_back(luaTestsPath + "/Generators");
		lua.SetPackageDirectory(paths);

		std::stringstream ss;
		ss << luaTestsPath << "/Tests.lua";
		lua.ParseFile(ss.str());
		lua.Run();
	}

	~hidden bool runProject(bool withRepl)
	{
		Macaroni::Environment::Environment env = createEnvironment();
		if (!env.FindDefaultProject(projectFile))
		{
			if (!projectFile)
			{
				output->ErrorLine("No project file found.");
			}
			else
			{
				output->ErrorLine(str(boost::format(
					"No project file found at %s.")
					% projectFile.get()));
			}
			return false;
		}
		if (!env.RunDefaultProject(projectFile) && !withRepl) {
			return false;
		}
		if (withRepl) {
			return env.Repl();
		} else {
			if (clean)
			{
				env.RunCommand("clean();");
			}
			if (generate)
			{
				if (!env.RunCommand("generate();"))
				{
					return false;
				}
			}
			else
			{
				if (generateLess)
				{
					if (!env.RunCommand("generateLess();"))
					{
						return false;
					}
				}
			}
			if (build)
			{
				if (!env.RunCommand("build();"))
				{
					return false;
				}
			}
			if (document)
			{
				if (!env.RunCommand("document();"))
				{
					return false;
				}
			}
			if (install)
			{
				if (!env.RunCommand("install();"))
				{
					return false;
				}
			}
			return true;
		}
	}

	public inline bool StartPrompt()
	{
		return startPrompt;
	}

	public inline bool Verbose()
	{
		return verbose;
	}

} // end class

} // end ns

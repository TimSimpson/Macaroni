// This file contains foward refs to all types within the project.
~import Macaroni::Lua::LuaClass;
~import Macaroni::Cpp::UseLightDef;


// Primitives (I just fixed this so this line will need to go soon)
//class size_t { ~hfile=<Macaroni/ME.h> };

// C std
class system { ~hfile=<cstdlib> };
class strlen { ~hfile=<string.h> };

// Std lib stuff
//~extern std::auto_ptr
//	include=<memory>;
~extern std::string::const_iterator
	include=<string>;
//~extern std::cin
//	include=<iostream>;
//~extern std::cout
//	include=<iostream>;
//~extern std::exception
//	include=<exception>;
//~extern std::fstream
//	include=<fstream>;
//~extern std::istream
//	include=<iostream>;
~extern std::map
	include=<map>
	using={ using std::map; }
	;
//~extern std::ofstream
//	include=<iostream>;
//~extern std::ostream
//	include=<iostream>;
~extern std::set
	include=<set>;
//~extern std::stringstream
//	include=<sstream>;
//~extern std::string
//	include=<string>;
~extern boost::tokenizer
	include=<boost/tokenizer.hpp>;
//~extern std::vector
//	include=<vector>;

~extern std::chrono::duration_cast
	include=<chrono>
	using={ using std::chrono::duration_cast; };
~extern std::chrono::milliseconds
	include=<chrono>
	using={ using std::chrono::milliseconds; };
~extern std::chrono::steady_clock
	include=<chrono>
	using={ using std::chrono::steady_clock; };

// Boost
~extern boost::bad_lexical_cast
	include=<boost/lexical_cast.hpp>;
~extern boost::flyweight
	include=<boost/flyweight.hpp>;
~extern boost::filesystem::directory_iterator
	include=<boost/filesystem/operations.hpp>
	using={ using boost::filesystem::directory_iterator; };
~extern boost::lexical_cast
	include=<boost/lexical_cast.hpp>
	using={ using boost::lexical_cast; };
~extern BOOST_FOREACH
	include=<boost/foreach.hpp>;
//~extern boost::format
//	include=<boost/format.hpp>;
~extern boost::hash
	include=<boost/functional/hash.hpp>;

/*~extern boost::filesystem::create_directories
	include=<boost/filesystem/convenience.hpp>;
~extern boost::intrusive_ptr
	include=<boost/intrusive_ptr.hpp>;
~extern boost::optional
	include=<boost/optional.hpp>;

//~extern boost::filesystem::path
	include=<boost/filesystem.hpp> } */
~extern boost::program_options::variables_map
	include=<boost/program_options.hpp>;
~extern boost::ptr_vector
	include=<boost/ptr_container/ptr_vector.hpp>;
~extern boost::regex
	include=<boost/regex.hpp>
	using={ using boost::regex; } ;
//~extern boost::shared_ptr
//	include=<boost/shared_ptr.hpp>;
~extern boost::to_lower
	include=<boost/algorithm/string.hpp>;
~extern boost::variant
		include=<boost/variant.hpp>
		using={ using boost::variant; }
	;
~extern boost::container::vector
	include=<boost/container/vector.hpp>;

// Lua
// #include <Lua/lualib.h>

class Macaroni::Containers::AssignVectorToConstElementVector { ~hfile=<Macaroni/Containers.h.> } //TODO: Make function


class MACARONI_ASSERT { ~hfile=<Macaroni/ME.h> };
class MACARONI_CHECK { ~hfile=<Macaroni/ME.h> };
class Macaroni::Model::Block { ~hfile=<Macaroni/Model/Block.h> };
class Macaroni::Model::Cpp::ClassLuaMetaData { ~hfile=<Macaroni/Model/Cpp/ClassLua.h> };
/*class Macaroni::Model::Cpp::ClassPtr {
	~hfile=<Macaroni/Model/Cpp/ClassPtr.h>
	@LuaClass
	[
		LuaGlueClass = Macaroni::Model::Cpp::ClassLuaMetaData,
		ReferenceType = Macaroni::Model::Cpp::ClassPtr,
	]
};
class Macaroni::Model::Cpp::Class
	@UseLightDef true
{
	~hfile=<Macaroni/Model/Cpp/Class.h>
	@LuaClass
	[
		LuaGlueClass = Macaroni::Model::Cpp::ClassLuaMetaData,
		ReferenceType = Macaroni::Model::Cpp::ClassPtr,
	]
};*/

class Macaroni::Model::ContextLuaMetaData { ~hfile=<Macaroni/Model/ContextLua.h> };


class Macaroni::IO::FileNotFoundException { ~hfile=<Macaroni/IO/FileNotFoundException.h> };
//class Macaroni::Model::FileName { ~hfile=<Macaroni/Model/FileName.h> }
//class Macaroni::Model::FileNamePtr { ~hfile=<Macaroni/Model/FileNamePtr.h> }
//class Macaroni::IO::FileSet { ~hfile=<Macaroni/IO/FileSet.h> };
class MACARONI_FAIL { ~hfile=<Macaroni/ME.h> };
class Macaroni::Model::Member { ~hfile=<Macaroni/Model/Member.h> };

class Macaroni::Model::ModelInconsistencyException
{ ~hfile=<Macaroni/Model/ModelInconsistencyException.h> };

class Macaroni::Model::NakedNodeList { ~hfile=<Macaroni/Model/NodePtr.h> };

~import Macaroni::Model::Node;
class Macaroni::Model::NodePtr
	@LuaClass [ SameAsNode=Macaroni::Model::Node ]
{ ~hfile=<Macaroni/Model/NodePtr.h> }

class Macaroni::Model::Node
	@UseLightDef true
{
	~hfile=<Macaroni/Model/Node.h>
	@LuaClass
	[
		ReferenceType = Macaroni::Model::NodePtr,
	]
};
class Macaroni::Model::NodeLuaMetaData { ~hfile=<Macaroni/Model/NodeLua.h> };
class nullptr { ~hfile=<Macaroni/ME.h> };
class Macaroni::Model::NodeList { ~hfile=<Macaroni/Model/NodePtr.h> };
class Macaroni::Model::NodeListPtr { ~hfile=<Macaroni/Model/NodePtr.h> };


// Path
~import Macaroni::IO::Path;
class Macaroni::IO::PathPtr
	@LuaClass [ SameAsNode=Macaroni::IO::Path ]
{ ~hfile=<Macaroni/IO/Path.h> };
class Macaroni::IO::PathLuaMetaData { ~hfile=<Macaroni/IO/PathLua.h> };
class Macaroni::IO::Path
	@LuaClass
	[
		ReferenceType = Macaroni::IO::PathPtr,
	]
{ ~hfile=<Macaroni/IO/Path.h> };

class Macaroni::IO::PathListLuaMetaData { ~hfile=<Macaroni/IO/PathLua.h> };
~import Macaroni::IO::PathList;
class Macaroni::IO::PathListPtr
	@LuaClass [ SameAsNode=Macaroni::IO::PathList ]
	{ ~hfile=<Macaroni/IO/Path.h> };
class Macaroni::IO::PathList
	@LuaClass [ ReferenceType = Macaroni::IO::PathListPtr ]
	{ ~hfile=<Macaroni/IO/Path.h> };


class Macaroni::Parser::Pippy::PippyParser { ~hfile=<Macaroni/Parser/Pippy/PippyParser.h> };
class Macaroni::Environment::StringPair { ~hfile=<Macaroni/Environment/StringPair.h> };

class MACARONI_THROW { ~hfile=<Macaroni/ME.h> };

class Macaroni::Model::Cpp::Variable { ~hfile=<Macaroni/Model/Cpp/Variable.h> };
class Macaroni::Model::Cpp::VariablePtr { ~hfile=<Macaroni/Model/Cpp/VariablePtr.h> };
class Macaroni::Containers::VectorOfConstString { ~hfile=<Macaroni/Containers.h> };
class MACARONI_VE_CONST { ~hfile=<Macaroni/ME.h> };

~extern std::array
	include=<array>
	;
~extern std::unique_ptr
	include=<memory>
	;
~extern std::unordered_map
	include=<unordered_map>
	;

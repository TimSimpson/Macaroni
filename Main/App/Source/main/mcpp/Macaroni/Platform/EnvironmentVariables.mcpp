/**
 * Copyright 2011 Tim Simpson
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
~import Macaroni::Platform::Windows::EnvironmentVariable;
~import std::exception;
~import Macaroni::Exception;
~import Macaroni::Platform::Windows::NonWindowsString;
~import std::string;
~import Macaroni::StringException;
~import std::stringstream;
~import Macaroni::Environment::StringPair;
~import boost::to_lower;
~import Macaroni::Platform::Windows::WindowsString;

// Original file require #include <memory>... I wonder what for.

namespace Macaroni::Platform {

/** 
 *  This class handles copying environment variables around. This is used
 *  in Windows to copy the variables from the calling process to the child.
 *  I don't think it is needed in Linux.
 */
class EnvironmentVariables
{
	private std::vector<EnvironmentVariable> vars;

	public EnvironmentVariables()
	:	vars()
	{
#ifdef MACARONI_COMPILE_TARGET_WINDOWS
		LPTCH orig = ::GetEnvironmentStrings();
		try
		{
			if (orig == NULL)
			{
				throw Macaroni::StringException("Could not grab environment strings.");
			}

			LPTSTR blockAsLpstr = (LPTSTR) orig;
			while(*blockAsLpstr)
			{
				size_t len = lstrlen(blockAsLpstr);
				std::auto_ptr<TCHAR> buffer((TCHAR *) (::operator new(sizeof(TCHAR) * (len + 1))));
				//::StringCchCopy(buffer.get(), len, blockAsLpstr);
				lstrcpyn(buffer.get(), blockAsLpstr, len + 1);
				//lstrncpy(buffer.get(), blockAsLpstr, len);
				(buffer.get())[len]='\0';
				NonWindowsString winStr(buffer.get());
				std::string normal = winStr.get();
				vars.push_back(EnvironmentVariable(normal));
				blockAsLpstr += (len + 1);
			}
			::FreeEnvironmentStrings((__in LPTCH) orig);
		} 
		catch(std::exception & ex) 
		{	
			::FreeEnvironmentStrings((__in LPTCH) orig);
			throw ex;
		}	

#endif
	}

	public ~EnvironmentVariables()
	{
	}

	public void CopyToMemoryBlock(void * vBlock)
	{
#ifdef MACARONI_COMPILE_TARGET_WINDOWS
		TCHAR * block = (TCHAR *) vBlock;
		for (unsigned int i = 0; i < vars.size(); i ++)
		{
			EnvironmentVariable & v = vars[i];
			std::stringstream ss;
			ss << v.GetName() << "=" << v.GetValue();
			std::string def = ss.str();

			Macaroni::Platform::Windows::WindowsString winStr(def);
			lstrcpyn(block, winStr.get(), def.size() + 1);
			block[def.size() + 1] = '\0';
			block += (def.size() + 1);
		}
		block[0] = '\0';

		// NOW CHECK AND SEE WHY IT WON'T WORK.
		std::vector<EnvironmentVariable> newVars;

		LPTSTR blockAsLpstr = (LPTSTR) vBlock;
		while(*blockAsLpstr)
		{
			size_t len = lstrlen(blockAsLpstr);
			std::auto_ptr<TCHAR> buffer((TCHAR *) (::operator new(sizeof(TCHAR) * (len + 1))));
			//::StringCchCopy(buffer.get(), len, blockAsLpstr);
			lstrcpyn(buffer.get(), blockAsLpstr, len + 1);
			//lstrncpy(buffer.get(), blockAsLpstr, len);
			(buffer.get())[len]='\0';
			try{
				NonWindowsString winStr(buffer.get());		
				std::string normal = winStr.get();
				newVars.push_back(EnvironmentVariable(normal));
				blockAsLpstr += (len + 1);
			} catch(std::exception ex) {
				throw ex;
			}
		}	
		

		for (unsigned int i = 0; i < newVars.size(); i ++)
		{
			EnvironmentVariable & a = vars[i];
			EnvironmentVariable & b = newVars[i];
			if (a.GetName() != b.GetName() ||
				a.GetValue() != b.GetValue())
			{
				int five = 5;
			}
		}
#endif
	}

	public EnvironmentVariable * Get(const string & name)
	{
#ifdef MACARONI_COMPILE_TARGET_WINDOWS
		string low = name;
		boost::to_lower(low);
		for (unsigned int i = 0; i < vars.size(); i ++)
		{
			if (vars[i].GetName() == low)
			{
				return &(vars[i]);
			}
		}
#endif
		return nullptr;
	}

	public size_t GetNeededMemoryBlockSize()
	{
		size_t total = 0;
#ifdef MACARONI_COMPILE_TARGET_WINDOWS
		for (unsigned int i = 0; i < vars.size(); i ++)
		{
			EnvironmentVariable & v = vars[i];
			total += (v.GetName().size() + 1 + v.GetValue().size() + 1);
		}
		total ++;
#endif
		return total;
	}
	
	public void Set(StringPair & pair)
	{
#ifdef MACARONI_COMPILE_TARGET_WINDOWS
		std::string low = pair.Name;
		boost::to_lower(low);
		for (unsigned int i = 0; i < vars.size(); i ++)
		{
			EnvironmentVariable & v = vars[i];
			if (v.GetName() == low)
			{
				v.SetValue(pair.Value);
				return;
			}
		}
		vars.push_back(EnvironmentVariable(pair.Name, pair.Value));
#endif
	}
};


}
/**
 * Copyright 2011 Tim Simpson
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
~import Macaroni::Exception;
~import boost::format;
~import Macaroni::InternalSource;
~import boost::optional;
~import Macaroni::Model::Source;
~import Macaroni::Model::SourcePtr;
~import std::string;


~namespace Macaroni::Parser;


/** Any exception which occurs within the Parser. */
class ParserException : public Exception
{
	private optional<InternalSource> internalSource;
	private string msg;
	private SourcePtr source;
	private string whatString;

	~block "h" {
	public: ParserException(
		Macaroni::Model::SourcePtr source,
		const std::string & msg,
		boost::optional<Macaroni::InternalSource> internalSource=boost::none);
	}

	~block "cpp" {
		ParserException::ParserException(SourcePtr source, const string & msg,
							optional<InternalSource> internalSource)
		:   internalSource(internalSource),
			msg(msg),
			source(source),
			whatString(str(format("%s : %s") % source->ToString() % msg))
		{
		}
	}

	public virtual ~ParserException() BOOST_NOEXCEPT = default; //TODO: override


	/** Returns the SourcePtr (which is richer than InternalSource). */
	public SourcePtr GetSource() const
	{
		return source;
	}

	/** Just the exception message without the source. */
	public const char * GetMessage() const
	{
		return msg.c_str();
	}

	/** Gives the source (in Macaroni code parsed at runtime) plus the message.
	 */
	public const char * what() const BOOST_NOEXCEPT override
	{
		return whatString.c_str();
	}

	public const optional<InternalSource> & where() const BOOST_NOEXCEPT override
	{
		return internalSource;
	}

};

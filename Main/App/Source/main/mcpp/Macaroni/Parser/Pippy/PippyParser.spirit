/**
 * Copyright 2011 Tim Simpson
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef MACARONI_PARSER_PIPPY_PIPPYPARSER_SPIRIT
#define MACARONI_PARSER_PIPPY_PIPPYPARSER_SPIRIT

#include "../../Model/Axiom.h"
#include "../../Model/Cpp/Namespace.h"
#include "../../Model/Node.h"
#include <iostream>
#include "../ParserException.h"
#include "../../Model/Reason.h"
#include <boost/spirit/core.hpp>
#include <boost/spirit/actor/push_back_actor.hpp>
#include <boost/spirit/utility/confix.hpp>
#include <boost/spirit/utility/chset.hpp>

//#include <boost/spirit/include/classic_core.hpp>
//#include <boost/spirit/include/classic_position_iterator.hpp>
//#include <boost/spirit/include/classic_functor_parser.hpp>
#include <boost/config/warning_disable.hpp>
#include <boost/spirit/include/qi.hpp>
#include <boost/spirit/include/phoenix_operator.hpp>
#include <boost/spirit/include/phoenix_object.hpp>
#include <iostream>
#include <fstream>
#include <vector>


using Macaroni::Model::Cpp::Namespace;
using Macaroni::Model::Cpp::NamespacePtr;
using Macaroni::Model::Node;
using Macaroni::Model::NodePtr;
using Macaroni::Model::Reason;
using Macaroni::Model::ReasonPtr;


BEGIN_NAMESPACE(Macaroni, Parser, Pippy)

/**
 *  This is a grammar for the declaration of types.
 * The form is:
 * TYPEDEF = [const] OLDNAME [const] [& | *] [const] NEWNAME 
 * OLDNAME is an existing name that the Node system can find,
 * while NEWNAME is a name that fits the bill of being a name but does not
 * already exist.
 * This grammar should be able to parse things such as:
 * int five
 * const char * string
 * Plant::Fruit::Apple const & appleRef;
 */
 template <typename Iterator>
struct complexDecls : grammar<Iterator, space_type>
{
    complexDecls() : complexDecls::base_type(expression)
    {
        expression =
            term
            >> *(   ('+' >> term)
                |   ('-' >> term)
                )
            ;
		nondigit
			=	range_p('a','z') | range_p('A','Z') | ch_p('_');
        term =
            factor
            >> *(   ('*' >> factor)
                |   ('/' >> factor)
                )
            ;

        factor =
            uint_
            |   '(' >> expression >> ')'
            |   ('-' >> factor)
            |   ('+' >> factor)
            ;
    }

    rule<Iterator, space_type> expression, nondigit, term, factor;
};


END_NAMESPACE

#endif
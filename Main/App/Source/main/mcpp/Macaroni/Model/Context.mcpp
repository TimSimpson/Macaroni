/**
 * Copyright 2011 Tim Simpson
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
~import Macaroni::Model::ContextPtr;
~import BOOST_FOREACH;
~import Macaroni::Model::Project::GroupList;
~import Macaroni::Model::Project::Group;
~import Macaroni::Model::Project::GroupPtr;
~import boost::intrusive_ptr;
~import Macaroni::Build::LibraryId;
~import Macaroni::Lua::LuaClass;
~import MACARONI_ASSERT;
~import Macaroni::Exceptions::SimpleException;
~import Macaroni::Model::Node;
~import Macaroni::Model::NodePtr;
~import boost::optional;
~import boost::filesystem::path;
~import Macaroni::Model::Project::Project;
~import Macaroni::Model::Project::ProjectPtr;
~import Macaroni::Model::Project::ProjectVersion;
~import Macaroni::Model::Project::ProjectVersionId;
~import Macaroni::Model::Project::ProjectVersionPtr;
~import std::string;
~import Macaroni::Model::Type;
~import Macaroni::Model::TypePtr;
~import std::unique_ptr;
~import std::vector;


~namespace Macaroni::Model;


/** This object holds a tree of Nodes.  In addition to providing the root Node,
 * it also stores a count of Node references.  Deleting this deletes all Nodes.
 */
class Context
	@LuaClass
	[
		ReferenceType = Macaroni::Model::ContextPtr,
	]
{
/*	~block "cpp"
	{
		MACARONI_SIMPLE_EXCEPTION_DEFINE(BadProjectFileSet,
			"Attempted to mark a path as belonging to a project file,"
			" but this path already belongs to another project.");
	}*/
	/*typedef map<string, ProjectVersionId> ProjectFileMemory;
	~block "h"
	{
		// A bug in Macaroni necessitates this. :(
		typedef std::map<std::string,
			Macaroni::Model::Project::ProjectVersionId>
			ProjectFileMemory;
	}*/
	private Node ~l * floater;
	private GroupList * groups;
	private bool hasBeenDeleted;
	//private ProjectFileMemory parsedProjectFiles;
	private int referenceCount;
	private Node ~l * root;
	private std::vector<unique_ptr<Type>> types;

	public ~global ~friend void intrusive_ptr_add_ref(Context * p)
	{
		p->onAddReference();
	}

	public ~global ~friend void intrusive_ptr_release(Context * p)
	{
		p->onReleaseReference();
	}

	public Context(const std::string & rootName)
	: floater(nullptr),
	  groups(nullptr),
	  hasBeenDeleted(false),
	  referenceCount(0),
	  root(nullptr),
	  types()
	{
		groups = new GroupList(this);
		root = new Macaroni::Model::Node(*this, rootName);
	}

	public ~Context()
	{
		MACARONI_ASSERT(referenceCount == 0, "Ref count != 0 on Context destruction!");
		delete root;
		delete groups;
		if (floater)
		{
			delete floater;
		}
		hasBeenDeleted = true;
	}

	~block "cpp"
	{
		namespace {
			MACARONI_SIMPLE_EXCEPTION_DEFINE(DoubleFloaterException,
				"Can't create a second floating Node root. One already exists.");
			MACARONI_SIMPLE_EXCEPTION_DEFINE(ForeignFloaterException,
				"Can't land a floater because it was not created by this "
				"context.");
			MACARONI_SIMPLE_EXCEPTION_DEFINE(NoFloaterException,
				"No floater exists.");
		}
	}

	/** Creates a "floating" node, that isn't yet in a permanent spot. */
	public NodePtr CreateFloater(const string & name)
	{
		// No use sugar-coating this: it's exclusively so the parser can
	 	// work through template parameter lists and use them for the
	 	// return types on functions, then later make the template nodes
	 	// "owned" by the function nodes. It's a bit of a messy solution
	 	// but the best one I ever thought of outside of rewriting the
	 	// parser to use a proper lexer (not a terrible idea but not
	 	// trivial or really required). :(
		if (floater)
		{
			throw DoubleFloaterException(MACARONI_INTERNAL_SOURCE);
		}
		floater = new Macaroni::Model::Node(*this, name);
		NodePtr rtn(floater);
		return rtn;
	}

	/** This method exists so the Node can add a type. But it's better that
	 *  the type live here. */
	public TypePtr CreateType()
	{
		types.emplace_back(new Type(this));
		return TypePtr{types.back().get()};
	}

	public ProjectVersionPtr FindProjectVersion(const ProjectVersionId & id)
	{
		GroupPtr g = groups->Find(id.Group);
		if (g)
		{
			ProjectPtr p = g->FindProject(id.Name);
			if (p)
			{
				ProjectVersionPtr pv = p->FindVersion(id.Version);
				if (pv)
				{
					return pv;
				}
			}
		}
		return ProjectVersionPtr();
	}

	public int GetReferenceCount() const
	{
		return referenceCount;
	}

	/** The root Node could be considered the global namespace. */
	public NodePtr GetRoot()
	{
		return NodePtr(root);
	}

    public GroupPtr Group(string name)
	{
		return groups->FindOrCreate(name);
	}

	/*public optional<ProjectVersionId> CanBeginProjectFileParse(const path & path)
	{
		string absolutePath = boost::filesystem::system_complete(path).string();
		ProjectFileMemory::iterator itr = parsedProjectFiles.find(absolutePath);
		if (parsedProjectFiles.end() == itr)
		{
			parsedProjectFiles[absolutePath] = ProjectVersionId::PlaceHolder();
			optional<ProjectVersionId> rtnVal;
			return rtnVal;
		}
		else
		{
			optional<ProjectVersionId> rtnVal(parsedProjectFiles[absolutePath]);
			return rtnVal;
		}
	}*/

	/*public void MarkParsedProjectFile(const path & path,
		                              const ProjectVersionId & pvId)
	{
		string absolutePath = boost::filesystem::system_complete(path).string();
		if (parsedProjectFiles.find(absolutePath) != parsedProjectFiles.end())
		{
			const ProjectVersionId & id = parsedProjectFiles[absolutePath];
			if (id != ProjectVersionId::PlaceHolder() && id != pvId)
			{
				throw BadProjectFileSet(MACARONI_INTERNAL_SOURCE);
			}
		}
		parsedProjectFiles[absolutePath] = pvId;
	}*/

	/* Puts the "floating node" into it's forever home. */
	public void LandFloater(NodePtr newHome)
	{
		if (!floater)
		{
			throw NoFloaterException(MACARONI_INTERNAL_SOURCE);
		}
		newHome->adoptFloatingNode(floater);
		floater = nullptr;
	}

	private void onAddReference()
	{
		referenceCount ++;
	}

	private void onReleaseReference()
	{
		referenceCount --;
		// So... Macaroni doesn't so much have memory management as it has
		// memory. There is a bug where the referenceCount would routinely
		// go past 0 into negative numbers.
		// The meager check below wouldn't look for the referenceCount to slip
		// past zero (ugh) so this error never got caught until possibly years
		// after it had become almost untraceable.
		// For now, just don't delete the Context. Pretend its the Java heap.
		/*if (referenceCount == 0)
		{
			delete this;
		}*/
	}

};

/**
 * Copyright 2011 Tim Simpson
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
~import boost::filesystem::path;
~import Macaroni::Lua::LuaClass;
~import Macaroni::Lua::LuaFunction;
~import Macaroni::Lua::LuaOperator;
~import Macaroni::Lua::LuaProperty;
~import Macaroni::IO::Path;
~import std::string;
~import Macaroni::Cpp::UseLightDef;

namespace Macaroni::Model {

class FileName {};
typedef boost::intrusive_ptr<FileName ~l> FileNamePtr
	~hfile=<Macaroni/Model/FileNamePtr.h>
	@LuaClass [ SameAsNode = FileName ]
	@UseLightDef true
;


/** Represents any file name which could be the Source of Model information.
 *
 *  One important destinction between this and the fifteen other file / path
 *  classes in this project is that it can represent a file that is relative
 *  to a C++ project. For example, if you're writing a class named
 *  ::ACME::Animals this would represent some long path like
 *  C:\MyProject\target\ACME\Animals.h but also could be represented as
 *  ACME/Animals.h using the GetName() method. Path has the ability to do this
 *  but it is not strictly enforced.
*/
class FileName
	@LuaClass [ ReferenceType = FileNamePtr ]
{
	private Path path;
	private const bool real;
	private int referenceCount;

	~block "h"
	{
		protected:
			FileName(const Macaroni::IO::Path & path, bool real=true);
	}
	~block "cpp"
	{
		FileName::FileName(const Path & path, bool real)
		:	path(path),
			real(true),
			referenceCount(0)
		{
		}
	}

	protected ~FileName()
	{
	}

	public bool operator==(const FileName & other) const
		@LuaOperator "__eq"
	{
		return this->path == other.path;
	}

	public static FileNamePtr Create(const Path & path)
		@LuaFunction "Create"
	{
		return FileNamePtr(new FileName(path));
	}

	public static FileNamePtr Create(const string & root, const string & rel)
	{
		return Create(Path(root, rel));
	}

	public static FileNamePtr CreateNonPhysical(const string & path)
		@LuaFunction "CreateNonPhysical"
	{
		return FileNamePtr(new FileName(Path(path), false));
	}

	public string GetName() const
		@LuaProperty "Name"
		@LuaOperator "__tostring"
	{
		return path.GetRelativePathNormalized();
	}

	public string GetOsName() const
		@LuaProperty "OsName"
	{
		//boost::filesystem::path p(GetName());
		//return p.string();
		return path.GetAbsolutePathForceSlash();
	}

	public int GetReferenceCount() const
		@LuaProperty "ReferenceCount"
	{
		return referenceCount;
	}

	public ~global ~friend void intrusive_ptr_add_ref(FileName * p)
	{
		p->referenceCount ++;
	}

	public ~global ~friend void intrusive_ptr_release(FileName * p)
	{
		p->referenceCount --;
		if (p->referenceCount < 1)
		{
			delete p;
		}
	}

	public bool IsPhysical() const
	{
		return real;
	}
};

}

~import boost::intrusive_ptr;
~import Macaroni::Lua::LuaClass;
~import Macaroni::Model::Node;
~import Macaroni::Model::NodePtr;
~import Macaroni::Model::ReasonPtr;
~import Macaroni::Model::Project::Target;
~import Macaroni::Model::Project::TargetPtr;


~namespace Macaroni::Model;

class Element {};

class ElementLuaMetaData
{
	~hfile=<Macaroni/Model/ElementLua.h>
};

typedef intrusive_ptr<Element> ElementPtr
	@LuaClass [ SameAsNode=Macaroni::Model::Element ]
;

class Element
	@LuaClass 
	[
		LuaGlueClass = Macaroni::Model::ElementLuaMetaData,
		ReferenceType = Macaroni::Model::ElementPtr,
	]	
{
	friend Node;

	private Node * node;
	private ReasonPtr reasonCreated;

	protected Element(Node * node, const ReasonPtr reasonCreated)
	:	node(nullptr), 
		reasonCreated(reasonCreated)
	{
		node->setElement(this, reasonCreated);
		MACARONI_ASSERT(node != nullptr, 
			"Node must be initialized by base class.");
		MACARONI_ASSERT(reasonCreated != false, 
			"Reason created must be set by base class.");
	}

	public bool operator==(const Element & other) const
	{
		return this == &other;
	}

	public ~global ~friend void intrusive_ptr_add_ref(Element * p)
	{
		intrusive_ptr_add_ref(p->node);
	}

	public ~global ~friend void intrusive_ptr_release(Element * p)
	{
		intrusive_ptr_release(p->node);
	}	

	public NodePtr GetNode() const
	{
		return NodePtr(node);
	}

	protected Node * getNode() const
	{
		return node;
	}

	/** Gets the adopted home of this Element, or just the parent. */
	public Element * GetAdoptedParent() const
	{
		if (0 != node)
		{
			Node * const adoptedHome = node->adoptedHome;
			if (0 != adoptedHome)
			{
				return adoptedHome->element;
			}
			Node * const parentNode = node->getNode();
			if (0 != parentNode)
			{
				return parentNode->element;
			}
		}
	}

	/** Finds the target which owns this Element. If no target owns this 
	 *  element, recursively checks all parents. */
	public virtual TargetPtr GetOwner() const
	{
		Element * parent = this->GetAdoptedParent();
		if (0 != parent)
		{
			return parent->GetOwner();
		}
		return TargetPtr(); // By default, there is no owner.
	}

	/** Gets the parent of this Element's Element, or nullptr if nothing. */
	public Element * GetParent() const
	{
		if (0 != node)
		{
			Node * parentNode = node->getNode();
			if (0 != parentNode)
			{
				return parentNode->element;
			}
		}
	}

	public ReasonPtr GetReasonCreated() const
	{
		return reasonCreated;
	}

	public virtual const char * GetTypeName() const = 0;

	/** Returns true if this Elements's target is in the given target or a 
	 *  child of the given target. */
	public virtual bool OwnedBy(TargetPtr target) const
	{
		Element * parent = this->GetAdoptedParent();
		if (0 != parent)
		{
			return parent->OwnedBy(target);
		}
		return false;
	}

	protected void setReasonCreation(const ReasonPtr reason)
	{
		this->reasonCreated = reason;
	}

	/** Switches the owner to something else. Will throw an exception if the
	 *  new target is not related to the old one. */
	public virtual void SwitchOwner(TargetPtr target)
	{
		TargetPtr owner = GetOwner();
		if (owner)
		{
			Target::SwitchOwner(*this, *owner, *target);
		}
	}
	
};
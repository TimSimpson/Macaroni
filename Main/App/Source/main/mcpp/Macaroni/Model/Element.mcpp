~import boost::intrusive_ptr;
~import Macaroni::Lua::LuaClass;
~import Macaroni::Model::Node;
~import Macaroni::Model::NodePtr;
~import Macaroni::Model::ReasonPtr;


~namespace Macaroni::Model;

class Element {};

class ElementLuaMetaData
{
	~hfile=<Macaroni/Model/ElementLua.h>
};

typedef intrusive_ptr<Element> ElementPtr
	@LuaClass [ SameAsNode=Macaroni::Model::Element ]
;

class Element
	@LuaClass 
	[
		LuaGlueClass = Macaroni::Model::ElementLuaMetaData,
		ReferenceType = Macaroni::Model::ElementPtr,
	]	
{
	friend Node;

	private Node * node;
	private ReasonPtr reasonCreated;

	protected Element(Node * node, const ReasonPtr reasonCreated)
	:	node(nullptr), 
		reasonCreated(reasonCreated)
	{
		node->setElement(this, reasonCreated);
		MACARONI_ASSERT(node != nullptr, 
			"Node must be initialized by base class.");
		MACARONI_ASSERT(reasonCreated != false, 
			"Reason created must be set by base class.");
	}

	public ~global ~friend void intrusive_ptr_add_ref(Element * p)
	{
		intrusive_ptr_add_ref(p->node);
	}

	public ~global ~friend void intrusive_ptr_release(Element * p)
	{
		intrusive_ptr_release(p->node);
	}

	public NodePtr GetNode() const
	{
		return NodePtr(node);
	}

	protected Node * getNode() const
	{
		return node;
	}

	public ReasonPtr GetReasonCreated() const
	{
		return reasonCreated;
	}

	protected void setReasonCreation(const ReasonPtr reason)
	{
		this->reasonCreated = reason;
	}

	public virtual const char * GetTypeName() const = 0;
};
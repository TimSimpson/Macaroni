/**
 * Copyright 2011 Tim Simpson
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
~import Macaroni::Lua::LuaClass;
~import Macaroni::Lua::LuaFunction;
~import Macaroni::Lua::LuaOperator;
~import Macaroni::Lua::LuaProperty;
~import MACARONI_THROW;
~import std::string;
~import std::stringstream;

namespace Macaroni::Model {

	class TypeModifiers
		@LuaClass [ ReferenceType = TypeModifiers ]
	{
		private bool _const;
		private bool _constPointer;
		private bool _light;
		private bool _isParameterPack;
		private bool _pointer;
		private bool _reference;
		private bool _rvalue;

		public TypeModifiers()
			: _const(false), _constPointer(false),
			  _light(false),
			  _isParameterPack(false),
			  _pointer(false), _reference(false),
			  _rvalue(false)
		{
			if (ConstPointer() && !Pointer())
			{
				MACARONI_THROW("Cannot use 'ConstPointer' type modifier if the "
				               "'Pointer' modifier is not also set.");
			}
		}

		public bool operator== (const TypeModifiers & other) const
			@LuaOperator "__eq"
		{
			return this->Const() == other.Const()
				&& this->ConstPointer() == other.ConstPointer()
				&& this->Pointer() == other.Pointer()
				&& this->Reference() == other.Reference()
				&& this->IsParameterPack() == other.IsParameterPack();
		}

		public inline bool Const() const
			@LuaProperty "Const"
		{
			return _const;
		}

		public inline void SetConst(bool value)
		{
			_const = value;
		}

		public inline bool ConstPointer() const
			@LuaProperty "ConstPointer"
		{
			return _constPointer;
		}

		public inline void SetLight(bool value)
		{
			_light = value;
		}

		public inline bool Light() const
			@LuaProperty "Light"
		{
			return _light;
		}

		public inline void SetConstPointer(bool value)
		{
			_constPointer = value;
		}


		public inline bool Pointer() const
			@LuaProperty "Pointer"
		{
			return _pointer;
		}

		public inline void SetPointer(bool value)
		{
			_pointer = value;
		}

		public inline bool Reference() const
			@LuaProperty "Reference"
		{
			return _reference || _rvalue;
		}

		public inline void SetReference(bool value)
		{
			_reference = value;
		}

		public inline bool RvalueReference() const
			@LuaProperty "RvalueReference"
		{
			return _rvalue;
		}

		public inline void SetRvalueReference(bool value)
		{
			_rvalue = value;
		}

		public void SetIsParameterPack(bool value)
		{
			_isParameterPack = value;
		}

		public inline bool IsParameterPack() const
			@LuaProperty "IsParameterPack"
		{
			return _isParameterPack;
		}

		public bool MayOnlyNeedForwardDeclaration()
			@LuaProperty "MayOnlyNeedForwardDeclaration"
		{
			return (_constPointer || _light || _reference || _pointer
				    || _rvalue);
		}

		public string ToString()
			@LuaOperator "__tostring"
		{
			stringstream ss;
			ss << (Const() ? "const " : "")
			   << "T"
			   << (Light() ? " ~L" : "")
			   << (Pointer() ? " *" : "")
			   << (RvalueReference() ? " &&" : (Reference() ? " &" : ""))
			   << (ConstPointer() ? " const" : "")
			   << (IsParameterPack() ? "..." : "")
				;
			return ss.str();
		}
	};

}

/**
 * Copyright 2011 Tim Simpson
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
~import Macaroni::Lua::LuaClass;
~import Macaroni::Lua::LuaFunction;
~import Macaroni::Lua::LuaOperator;
~import Macaroni::Lua::LuaProperty;
~import boost::optional;
~import MACARONI_THROW;
~import Macaroni::Model::SimpleTypeModifiers;
~import Macaroni::Model::SimpleTypeModifiersPtr;
~import std::string;
~import std::stringstream;
~import std::unique_ptr;

~namespace Macaroni::Model;


class TypeModifiers : public SimpleTypeModifiers
	@LuaClass [ ReferenceType = TypeModifiers ]
{
	private bool _light;
	private bool _isParameterPack;
	private bool _reference;
	private bool _rvalue;

	public TypeModifiers()
	:	SimpleTypeModifiers(),
		_light(false),
		_isParameterPack(false),
		_reference(false),
		_rvalue(false)
	{
	}

	public TypeModifiers(const TypeModifiers & other)
	:	SimpleTypeModifiers(other),
	    _light(other._light),
		_isParameterPack(other._isParameterPack),
		_reference(other._reference),
		_rvalue(other._rvalue)
	{
	}

	// The destructor isn't virtual because there's no special things to do
	// to clean up this class since it's all dumb data.
	public ~TypeModifiers() = default;

	public bool operator== (const TypeModifiers & other) const
		@LuaOperator "__eq"
	{
		return SimpleTypeModifiers::operator==(other)
		    && this->Reference() == other.Reference()
			&& this->IsParameterPack() == other.IsParameterPack()
			&& this->Light() == other.Light()
			&& this->RvalueReference() == other.RvalueReference();
	}

	public inline bool Const() const BOOST_NOEXCEPT
		@LuaProperty "Const"
	{
		return SimpleTypeModifiers::Const();
	}

	public inline bool ConstPointer() const BOOST_NOEXCEPT
		@LuaProperty "ConstPointer"
	{
		return SimpleTypeModifiers::ConstPointer();
	}

	public inline bool Light() const BOOST_NOEXCEPT
		@LuaProperty "Light"
	{
		return _light;
	}

	public inline void SetLight(const bool value) BOOST_NOEXCEPT
	{
		this->_light = value;
	}

	public inline bool Mutable() const BOOST_NOEXCEPT
		@LuaProperty "Mutable"
	{
		return SimpleTypeModifiers::Mutable();
	}

	public inline Macaroni::Model::SimpleTypeModifiersPtr Pointer()
		const BOOST_NOEXCEPT
		@LuaProperty "Pointer"
	{
		return SimpleTypeModifiers::Pointer();
	}

	public inline bool Reference() const BOOST_NOEXCEPT
		@LuaProperty "Reference"
	{
		return _reference || _rvalue;
	}

	public inline void SetReference(const bool value) BOOST_NOEXCEPT
	{
		_reference = value;
	}

	public inline bool RvalueReference() const BOOST_NOEXCEPT
		@LuaProperty "RvalueReference"
	{
		return _rvalue;
	}

	public inline void SetRvalueReference(const bool value) BOOST_NOEXCEPT
	{
		_rvalue = value;
	}

	public void SetIsParameterPack(const bool value) BOOST_NOEXCEPT
	{
		_isParameterPack = value;
	}

	public inline bool IsParameterPack() const BOOST_NOEXCEPT
		@LuaProperty "IsParameterPack"
	{
		return _isParameterPack;
	}

	public bool MayOnlyNeedForwardDeclaration()
		@LuaProperty "MayOnlyNeedForwardDeclaration"
	{
		return (_light || _reference
			    || SimpleTypeModifiers::MayOnlyNeedForwardDeclaration()
			    || _rvalue);
	}

	public string ToString()
		@LuaOperator "__tostring"
	{
		stringstream ss;
		ss << "T"
		   << (Light() ? " ~L" : "")
		   << (SimpleTypeModifiers::ToString())
		   << (RvalueReference() ? " &&" : (Reference() ? " &" : ""))
		   << (IsParameterPack() ? "..." : "")
			;
		return ss.str();
	}

	public inline bool Volatile() const BOOST_NOEXCEPT
		@LuaProperty "Volatile"
	{
		return SimpleTypeModifiers::Volatile();
	}
};


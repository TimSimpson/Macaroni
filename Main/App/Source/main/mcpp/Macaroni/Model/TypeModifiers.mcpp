/**
 * Copyright 2011 Tim Simpson
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
~import Macaroni::Lua::LuaClass;
~import Macaroni::Lua::LuaFunction;
~import Macaroni::Lua::LuaIndexExtraCode;
~import Macaroni::Lua::LuaOperator;
~import Macaroni::Lua::LuaProperty;
~import boost::optional;
~import std::ostream;
~import MACARONI_THROW;
~import Macaroni::Model::SimpleTypeModifiers;
~import std::string;
~import std::stringstream;
~import std::unique_ptr;

~namespace Macaroni::Model;

//TODO: Due to a shortcoming in Macaroni, this class duplicates multiple
//      properties from SimpleTypeModifiers so it can wrap them in Lua glue.
//      It would be better for the Lua Glue generator to create some kind of
//      mapping but for now this is in place.

class TypeModifiers : public SimpleTypeModifiers
	@LuaClass [ ReferenceType = TypeModifiers ]
	@LuaIndexExtraCode ={
        const string index_0(luaL_checkstring(L, 2));
        if (index_0 == "Const"
        	|| index_0 == "ConstPointer"
        	|| index_0 == "Mutable"
        	|| index_0 == "SetPointer"
        	|| index_0 == "Volatile")
        {
        	return SimpleTypeModifiersLuaMetaData::Index(L, instance, index_0);
        }
        if (index_0 == "Pointer")
        {
            auto p = instance.Pointer();
            if (!p)
            {
                lua_pushnil(L);
            }
            else
            {
                SimpleTypeModifiersLuaMetaData::PutInstanceOnStack(L, p.get());
            }
            return 1;
        }
    } //;
{
	private bool _light;
	private bool _isParameterPack;
	private bool _reference;
	private bool _rvalue;

	public TypeModifiers()
	:	SimpleTypeModifiers(),
		_light(false),
		_isParameterPack(false),
		_reference(false),
		_rvalue(false)
	{
	}

	public TypeModifiers(const TypeModifiers & other)
	:	SimpleTypeModifiers(other),
	    _light(other._light),
		_isParameterPack(other._isParameterPack),
		_reference(other._reference),
		_rvalue(other._rvalue)
	{
	}

	public TypeModifiers & operator= (const TypeModifiers & other)
	{
		SimpleTypeModifiers::operator=(other);
		this->_light = other._light;
		this->_isParameterPack = other._isParameterPack;
		this->_reference = other._reference;
		this->_rvalue = other._rvalue;
		return *this;
	}

	// The destructor isn't virtual because there's no special things to do
	// to clean up this class since it's all dumb data.
	public ~TypeModifiers() = default;

	public bool operator== (const TypeModifiers & other) const
		@LuaOperator "__eq"
	{
		return SimpleTypeModifiers::operator==(other)
		    && this->Reference() == other.Reference()
			&& this->IsParameterPack() == other.IsParameterPack()
			&& this->Light() == other.Light()
			&& this->RvalueReference() == other.RvalueReference();
	}

	public bool operator!= (const TypeModifiers & other) const
    {
        return ! this->operator==(other);
    }

    public ~global ~friend ostream & operator<<(ostream & out,
    	                                        const TypeModifiers & mods)
    {
    	out //<< (mods.Light() ? " ~L" : "")
    	    << static_cast<const SimpleTypeModifiers &>(mods)
		    << (mods.RvalueReference() ? " &&" : (mods.Reference() ? " &" : ""))
		    << (mods.IsParameterPack() ? "..." : "");
		return out;
    }

	public inline bool Light() const BOOST_NOEXCEPT
		@LuaProperty "Light"
	{
		return _light;
	}

	public inline void SetLight(const bool value) BOOST_NOEXCEPT
	{
		this->_light = value;
	}

	/*public inline boost::optional<const SimpleTypeModifiers &> Pointer() const
        BOOST_NOEXCEPT
    {
    	return SimpleTypeModifiers::Pointer();
    }

    public inline boost::optional<SimpleTypeModifiers &> Pointer()
    	BOOST_NOEXCEPT
    {
        return SimpleTypeModifiers::Pointer();
    }*/


/*	public inline void SetPointer(::Macaroni::Model::SimpleTypeModifiers pointerInfo)
        @LuaProperty "Pointer"
    {
    	SimpleTypeModifiers::SetPointer(pointerInfo);
    }*/

    public inline bool Reference() const BOOST_NOEXCEPT
		@LuaProperty "Reference"
	{
		return _reference;
	}

	public inline void SetReference(const bool value) BOOST_NOEXCEPT
		@LuaProperty "Reference"
	{
		_reference = value;
	}

	public inline bool RvalueReference() const BOOST_NOEXCEPT
		@LuaProperty "RvalueReference"
	{
		return _rvalue;
	}

	public inline void SetRvalueReference(const bool value) BOOST_NOEXCEPT
		@LuaProperty "RvalueReference"
	{
		_rvalue = value;
	}

	public void SetIsParameterPack(const bool value) BOOST_NOEXCEPT
		@LuaProperty "IsParameterPack"
	{
		_isParameterPack = value;
	}

	public inline bool IsParameterPack() const BOOST_NOEXCEPT
		@LuaProperty "IsParameterPack"
	{
		return _isParameterPack;
	}

	public bool MayOnlyNeedForwardDeclaration() const
		@LuaProperty "MayOnlyNeedForwardDeclaration"
	{
		return (_light || _reference
			    || SimpleTypeModifiers::MayOnlyNeedForwardDeclaration()
			    || _rvalue);
	}

	public string ToString() const
		@LuaOperator "__tostring"
	{
		stringstream ss;
		ss << *this;
		return ss.str();
	}


	// Duplicated setters
	//TODO: Fix Lua stuff and re-do this

	public inline void SetConst(const bool value)
		@LuaProperty "Const"
	{
		return SimpleTypeModifiers::SetConst(value);
	}

	public inline void SetMutable(const bool value) BOOST_NOEXCEPT
        @LuaProperty "Mutable"
    {
    	SimpleTypeModifiers::SetMutable(value);
    }



    public inline void SetVolatile(const bool value) BOOST_NOEXCEPT
        @LuaProperty "Volatile"
    {
    	SimpleTypeModifiers::SetVolatile(value);
    }
};


~import Macaroni::Model::Element;
~import boost::intrusive_ptr;
~import Macaroni::Lua::LuaClass;
~import Macaroni::Lua::LuaFunction;

~namespace Macaroni::Model::Cpp;


class TemplateParameterList {};

typedef boost::intrusive_ptr<TemplateParameterList ~l> TemplateParameterListPtr
    @LuaClass [ SameAsNode=TemplateParameterList ]
;


class TemplateParameterList : public Element
    @LuaClass
    [
        ReferenceType = TemplateParameterListPtr,
    ]
{
    private TemplateParameterList(Node * host, const ReasonPtr reasonCreated)
    :   Element(host, reasonCreated)
    {
    }

    public static TemplateParameterListPtr Create(
        NodePtr host, const ReasonPtr reasonCreated
    )
    {
        TemplateParameterListPtr ptr(
            new TemplateParameterList(host.get(), reasonCreated)
        );
        return ptr;
    }

    public ~global ~friend void intrusive_ptr_add_ref(TemplateParameterList * p)
    {
        intrusive_ptr_add_ref(static_cast<Element *>(p));
    }

    public ~global ~friend void intrusive_ptr_release(TemplateParameterList * p)
    {
        intrusive_ptr_release(static_cast<Element *>(p));
    }

    public bool RequiresCppFile() const override
    {
        return false;
    }

    public bool RequiresHFile() const override
    {
        return false;
    }

    public const char * GetTypeName() const override
    {
        return "TemplateParameterList";
    }
};

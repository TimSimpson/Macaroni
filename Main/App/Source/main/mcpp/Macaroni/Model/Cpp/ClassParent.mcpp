/**
 * Copyright 2011 Tim Simpson
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
~import Macaroni::Lua::LuaClass;
~import Macaroni::Lua::LuaFunction;
~import Macaroni::Lua::LuaProperty;
~import Macaroni::Model::Cpp::Access;
~import Macaroni::Model::Cpp::Class;
~import Macaroni::Model::Cpp::ClassPtr;
~import Macaroni::Model::Cpp::Destructor;
~import boost::intrusive_ptr;
~import Macaroni::Model::Node;
~import Macaroni::Model::NodePtr;
~import Macaroni::Model::Type;
~import Macaroni::Model::TypePtr;
~import std::vector;
~import Macaroni::Cpp::UseLightDef;

namespace Macaroni::Model::Cpp
{

class ClassParent {};

typedef boost::intrusive_ptr<ClassParent ~l> ClassParentPtr
	~hfile=<Macaroni/Model/Cpp/ClassParentPtr.h>
;

typedef vector<ClassParent> ClassParentList
	~hfile=<Macaroni/Model/Cpp/ClassParentPtr.h>
;

typedef boost::shared_ptr<ClassParentList ~l> ClassParentListPtr
	~hfile=<Macaroni/Model/Cpp/ClassParentPtr.h>
;

class ClassParent
	@UseLightDef true
	@LuaClass
	[
		ReferenceType = ClassParentPtr,
	]
{
	friend Class;

	private Access access;
	private Class * child;
	private Type * parent; // Memory leak! Change to point eventually.
	private bool _virtual;

	private ClassParent(Class * node, Type * parent, Access access, bool _virtual)
	:	access(access),
		child(node),
		parent(parent),
		_virtual(_virtual)
	{
	}

	public ~global ~friend void intrusive_ptr_add_ref(ClassParent * p)
	{
		intrusive_ptr_add_ref(p->child);
	}

	public ~global ~friend void intrusive_ptr_release(ClassParent * p)
	{
		intrusive_ptr_release(p->child);
	}

	public inline AccessPtr GetAccess() const
		@LuaProperty "Access"
	{
		AccessPtr rtn(new Access(access));
		return rtn;
	}

	public inline ClassPtr GetChild() const
		@LuaProperty "Child"
	{
		return ClassPtr(child);
	}

	public TypePtr GetParent() const
		@LuaProperty "Parent"
	{
		return parent;
	}

	public bool IsVirtual() const
		@LuaProperty "IsVirtual"
	{
		return _virtual;
	}

};

} // end ns

/**
 * Copyright 2011 Tim Simpson
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
~import Macaroni::Model::Cpp::Constructor;
~import Macaroni::Model::Cpp::ConstructorPtr;
~import Macaroni::Model::Element;
~import Macaroni::Model::Cpp::ExceptionSpecifier;
~import Macaroni::Model::Cpp::Function;
~import Macaroni::Model::Cpp::FunctionOverload;
~import Macaroni::Model::Cpp::FunctionOverloadPtr;
~import boost::intrusive_ptr;
~import Macaroni::Model::ModelInconsistencyException;
~import Macaroni::Model::Node;
~import Macaroni::Model::Reason;
~import Macaroni::Model::ReasonPtr;
~import Macaroni::Model::Cpp::ScopeMember;
~import Macaroni::Model::SourcePtr;
~import Macaroni::Model::Type;
~import Macaroni::Model::Cpp::TypeInfo;
~import Macaroni::Model::TypeModifiers;
~import Macaroni::Model::TypePtr;
~import Macaroni::Model::Cpp::Variable;
~import Macaroni::Model::Cpp::VariablePtr;
~import Macaroni::Model::Cpp::VariableAssignment;


~namespace Macaroni::Model::Cpp;

class ConstructorOverload {};

typedef intrusive_ptr<ConstructorOverload> ConstructorOverloadPtr;

class ConstructorOverload : public FunctionOverload
{
	private std::vector<VariableAssignment> assignments;

	private bool isExplicit;

	private ConstructorOverload(
		Node * home,
		Model::ReasonPtr reason,
		bool isInline,
		Access access,
		bool isExplicit,
		const boost::optional<ExceptionSpecifier> exceptionSpecifier,
		Node * templateParameterList
	)
	:	FunctionOverload(nullptr, home, reason, isInline, access, true,
					     false, voidTypeInfo(home), false, false,
					     exceptionSpecifier,
					     templateParameterList,
					     boost::none),
	 	assignments(),
	 	isExplicit(isExplicit)
	{
	}

	public virtual ~ConstructorOverload() = default; //TODO: override

	public void AddAssignment(const VariableAssignment & assignment)
	{
		assignments.push_back(assignment);
	}

	public ConstructorPtr Create(NodePtr host, bool isInline, AccessPtr access,
		          			     Model::ReasonPtr reason);

	public static ConstructorOverloadPtr Create(
		NodePtr node, bool isInline, AccessPtr access, bool isExplicit,
		const boost::optional<ExceptionSpecifier> exceptionSpecifier,
		Model::ReasonPtr reason, NodePtr templateParameterList)
	{
		ConstructorOverload * co = new ConstructorOverload(
			node.get(), reason, isInline, *access, isExplicit,
			exceptionSpecifier,
			templateParameterList.get());
		return ConstructorOverloadPtr(co);
	}

	/** Creates a new Node under the given Node where the overload will be. */
	public static NodePtr CreateNode(NodePtr ctorHomeNode)
	{
		return ctorHomeNode->CreateNextInSequence("Overload#");
	}

	public const VariableAssignment & GetAssignment(int index) const
	{
		return assignments[index];
	}

	public int GetAssignmentCount() const
	{
		return assignments.size();
	}

	public const char * GetTypeName() const override
	{
		return "ConstructorOverload";
	}

	public ~global ~friend void intrusive_ptr_add_ref(ConstructorOverload * p)
	{
		intrusive_ptr_add_ref((ScopeMember *)p);
	}

	public ~global ~friend void intrusive_ptr_release(ConstructorOverload * p)
	{
		intrusive_ptr_release((ScopeMember *)p);
	}


	public inline bool IsExplicit() const
	{
		return isExplicit;
	}

	static ~hidden TypePtr voidTypeInfo(Node * home)
	{
		//TypeModifiers modifiers;
		//NodePtr node(home);
		//return TypePtr(new Type(node, modifiers));
		return TypePtr{};
	}


};

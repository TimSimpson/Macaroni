/**
 * Copyright 2011 Tim Simpson
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

~import Macaroni::Model::Element;
~import Macaroni::Model::ElementPtr;
~import Macaroni::Exception;
~import boost::intrusive_ptr;
~import Macaroni::Model::Node;
~import Macaroni::Model::Cpp::Scope;
~import boost::shared_ptr;
~import std::string;
~import std::stringstream;
~import Macaroni::Model::Project::Target;
~import Macaroni::Model::Project::TargetPtr;
~import std::vector;

~namespace Macaroni::Model::Cpp;

class Namespace {};

typedef intrusive_ptr<Namespace ~l> NamespacePtr;

class Namespace : public Scope
{
	protected Namespace(Target * target, Node * parent, ReasonPtr reason)
    :   Scope(target, parent, reason)
    {
    }

	public virtual ~Namespace() = default; //TODO: override

    public static NamespacePtr Create(
        TargetPtr target, NodePtr home, ReasonPtr reason)
    {
        return NamespacePtr(new Namespace(target.get(), home.get(), reason));
    }

	public const char * GetTypeName() const override
    {
        return "Namespace";
    }

    public ~global ~friend void intrusive_ptr_add_ref(Namespace * p)
    {
        intrusive_ptr_add_ref((ScopeMember *)p);
    }

    public ~global ~friend void intrusive_ptr_release(Namespace * p)
    {
        intrusive_ptr_release((ScopeMember *)p);
    }

	/** Returns true if the given member is an instance of Class. */
	public static bool IsInstance(ElementPtr other)
    {
        if (!other)
        {
            return false;
        }
        NamespacePtr nsPtr = boost::dynamic_pointer_cast<Namespace>(other);
        return (!!nsPtr);
    }
};

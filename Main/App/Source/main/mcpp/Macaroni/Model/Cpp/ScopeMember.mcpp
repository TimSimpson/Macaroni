/**
 * Copyright 2011 Tim Simpson
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
~import Macaroni::Model::Cpp::Access;
~import Macaroni::Model::Element;
~import boost::intrusive_ptr;
~import Macaroni::Model::Node;
~import boost::optional;
~import std::string;
~import std::stringstream;


~namespace Macaroni::Model::Cpp;


class ScopeMember{};

typedef boost::intrusive_ptr<ScopeMember> ScopeMemberPtr;

//2014-12-30:
//    This looks like some ancient idea I had before I really had a solid
//    plan for how all this would work. Maybe it should be killed, or at
//    least many of the classes inheriting from it should have their base
//    changed.
/** Concreate data concerning a Node.  In Macaroni, all nodes exist in a Scope
 * and are therefore ScopeMembers.  This class provides a link back to a node
 * which it uses to get certain useful data such as the name.  Methods for the
 * creation of new Model data remains in the Node. */
class ScopeMember : public Model::Element
{
	private Access access;
	private const bool isStatic;

	protected ScopeMember(Node * node, ReasonPtr reason,
		                  optional<Access> access=boost::none,
		                  optional<bool> isStatic=boost::none)
	:   Element(node, reason),
	    access(access.get_value_or( *(Access::Private())) ),
	    isStatic(isStatic.get_value_or(false))
	{
	}

	protected ScopeMember(const ScopeMember & other) = delete;

	protected void operator=(const ScopeMember & other) = delete;

	public ~ScopeMember() = default; //TODO: override

	public AccessPtr GetAccess() const
	{
		AccessPtr aPtr(new Access(this->access));
		return aPtr;
	}

	protected inline const Access & getAccess() const
	{
		return access;
	}

	public std::string GetFullName() const
	{
		return getNode()->GetFullName();
	}

	public const std::string & GetName() const
	{
		return getNode()->GetName();
	}

	public ~global ~friend void intrusive_ptr_add_ref(ScopeMember * p)
	{
		intrusive_ptr_add_ref(p->getNode());
	}

	public ~global ~friend void intrusive_ptr_release(ScopeMember * p)
	{
		intrusive_ptr_release(p->getNode());
	}

	public inline bool IsStatic() const
	{
		return isStatic;
	}

};

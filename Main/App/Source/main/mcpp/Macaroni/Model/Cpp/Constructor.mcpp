/**
 * Copyright 2011 Tim Simpson
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
~import Macaroni::Core::BaseVisitor;
~import Macaroni::Model::Element;
~import Macaroni::Model::Cpp::Function;
~import boost::intrusive_ptr;
~import Macaroni::Model::Node;
~import Macaroni::Model::Reason;
~import Macaroni::Model::ReasonPtr;
~import Macaroni::Model::Cpp::ScopeMember;
~import Macaroni::Model::Cpp::TypeInfo;
~import Macaroni::Model::Cpp::Variable;
~import Macaroni::Model::Cpp::VariablePtr;
~import Macaroni::Model::Cpp::VariableAssignment;
~import Macaroni::Core::Visitor;

~namespace Macaroni::Model::Cpp;

class Constructor{};

typedef intrusive_ptr<Constructor> ConstructorPtr;

/** Represents a function in any possible Scope. */
class Constructor : public Function
{
    private Constructor(Node * home, Model::ReasonPtr reason)
    :   Function(home, reason)
    {
    }

    public virtual ~Constructor() = default; //TODO: override

    public virtual bool Accept(BaseVisitor & v)
    {
        return Visit(*this, v);
    }

	public static ConstructorPtr Create(NodePtr host, Model::ReasonPtr reason)
    {
        ConstructorPtr ptr = host->GetElement<ConstructorPtr>();
        if (ptr)
        {
            // It's ok to reuse this.
            return ptr;
        }

        // If the pointer is null, it will create.
        // If it isn't, the Element will throw as the Node is assigned
        // to it, throwing anyway.
        ConstructorPtr rtn(new Constructor(host.get(), reason));
        return rtn;
    }

	public const char * GetTypeName() const override
    {
        return "Constructor";
    }

    public ~global ~friend void intrusive_ptr_add_ref(Constructor * p)
    {
        intrusive_ptr_add_ref((ScopeMember *)p);
    }

    public ~global ~friend void intrusive_ptr_release(Constructor * p)
    {
        intrusive_ptr_release((ScopeMember *)p);
    }
};

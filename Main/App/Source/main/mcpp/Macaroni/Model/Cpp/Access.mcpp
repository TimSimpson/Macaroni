/**
 * Copyright 2011 Tim Simpson
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
~import boost::shared_ptr;
~import Macaroni::Lua::LuaClass;
~import Macaroni::Lua::LuaOperator;
~import Macaroni::Lua::LuaProperty;
~import MACARONI_THROW;
~import std::string;
~import std::stringstream;

namespace Macaroni::Model::Cpp 
{

class Access {}

typedef shared_ptr<Access> AccessPtr	
	@LuaClass [ SameAsNode = Access ]	
	~hfile=<Macaroni/Model/Cpp/AccessPtr.h>	
;

class Access
	@LuaClass 
	[
		ReferenceType = Macaroni::Model::Cpp::AccessPtr,
	]
{			

	~block "h"
	{
		enum AccessData
		{
			Access_Internal,
			Access_InternalProtected,
			Access_Hidden,
			Access_Private,
			Access_Protected,	
			Access_Public,
			Access_NotSpecified
		};

		private: AccessData data;

	    private: Access(AccessData data);

	}

	~block "cpp"
	{
		Access::Access(AccessData data)
		: data(data)
		{
		}
		
	}
	

	public bool operator== (const Access & other) const
		@LuaOperator ""
	{
		return this->data == other.data;
	}

	public bool operator != (const Access & other) const
	{
		return this->data != other.data;
	}

	public const char * CppKeyword() const
		@LuaProperty "CppKeyword"
	{
		switch(data)
		{
		case Access_Hidden:
		case Access_Private:
			return "private";
		case Access_InternalProtected:
		case Access_Protected:
			return "protected";
		case Access_Internal:
		case Access_Public:
			return "public";
		case Access_NotSpecified:
			return "private /* Not Specified */";
		default:
			stringstream ss;
			ss << "Invalid enum value:" << data;
			MACARONI_THROW(ss.str().c_str());
			return nullptr;
		}		
	}

	/** True if this will be visible to consumers of a DLL. */
	public bool VisibleInLibrary() const
		@LuaProperty "VisibleInLibrary"
	{
		switch(data)
		{
		case Access_Internal:
		case Access_InternalProtected:
		case Access_Hidden:
		case Access_Private:
		case Access_NotSpecified:
			return false;
		case Access_Protected:
		case Access_Public:				
			return true;
		default:
			MACARONI_THROW("Invalid enum value!");
			return false;
		}		
	}

	/** True if this does appear in the header file. */
	public bool VisibleInHeader() const
		@LuaProperty "VisibleInHeader"
	{
		switch(data)
		{
		case Access_Internal:
		case Access_InternalProtected:
		case Access_Private:
		case Access_Protected:
		case Access_Public:
		case Access_NotSpecified:
			return true;
		case Access_Hidden:
			return false;
		default:
			MACARONI_THROW("Invalid enum value!");
			return false;
		}		
	}

	/** Like public, but not exported when used as a library. */
	public static AccessPtr Internal()
		@LuaProperty "Internal"
	{
		AccessPtr ptr(new Access(Access_Internal));
		return ptr;
	}

	/** Like protected, but not exported when used as a library. */
	public static AccessPtr InternalProtected()
		@LuaProperty "InternalProtected"
	{
		AccessPtr ptr(new Access(Access_InternalProtected));
		return ptr;
	}

	/** Extra private. Macaroni generators will not even put this in the header
	 * file.  */
	public static AccessPtr Hidden()
		@LuaProperty "Hidden"
	{
		AccessPtr ptr(new Access(Access_Hidden));
		return ptr;
	}

	public static AccessPtr Private()
		@LuaProperty "Private"
	{
		AccessPtr ptr(new Access(Access_Private));
		return ptr;
	}

	public static AccessPtr Protected()
		@LuaProperty "Protected"
	{
		AccessPtr ptr(new Access(Access_Protected));
		return ptr;
	}

	public static AccessPtr Public()
		@LuaProperty "Public"
	{
		AccessPtr ptr(new Access(Access_Public));
		return ptr;
	}

	public static AccessPtr NotSpecified()
	{
		AccessPtr ptr(new Access(Access_NotSpecified));
		return ptr;
	}

	public const char * ToString() const
		@LuaOperator "__tostring"
	{
		switch(data)
		{
		case Access_Internal:
			return "~inner";
		case Access_InternalProtected:
			return "~inner protected";
		case Access_Hidden:
			return "~hidden";
		case Access_Private:
			return "private";
		case Access_Protected:
			return "protected";
		case Access_Public:
			return "public";
		case Access_NotSpecified:
			return "not specified";
		default:
			stringstream ss;
			ss << "Invalid enum value:" << data;
			MACARONI_THROW(ss.str().c_str());
			return false;
		}		
	}
}; 

} // End Macaroni::Model::Cpp 

~import Macaroni::Model::Project::Config;
~import Macaroni::Model::Project::ConfigPtr;
~import Macaroni::Model::Project::Files;
~import Macaroni::Model::Project::FilesPtr;
~import boost::intrusive_ptr;
~import Macaroni::Lua::LuaClass;
~import Macaroni::Lua::LuaOperator;
~import Macaroni::Lua::LuaProperty;
~import std::string;
~import Macaroni::Model::Project::Target;
~import Macaroni::Cpp::UseLightDef;

~namespace Macaroni::Model::Project;

class Artifact {};

typedef intrusive_ptr<Artifact ~l> ArtifactPtr
	@LuaClass [ SameAsNode = Artifact ]
	@UseLightDef true
;

/**
 *  Represents a built component of a Target.
 *  Artifacts represent files that may or may not be gauranteed to exist at the
 *  time a new instance is instantiated. These files are generated by a 
 *  Macaroni plugin directly or with some external build tool, or they could 
 *  simply be predicted by a plugin.
 */
class Artifact
	@LuaClass [
		ReferenceType = ArtifactPtr
	]
{
	private ConfigPtr config;
	private FilesPtr files;
	private string name;
	private Target * const target;

	public Artifact(Target * target, const string & name)
	:	name(name),
		target(target)
	{
	}

	public ConfigPtr GetConfig()		
		@LuaProperty "Config"
	{
		return config;
	}

	public FilesPtr GetFiles()
		@LuaProperty "Files"
	{
		return files;
	}

	public TargetPtr GetTarget() 
		@LuaProperty "Target"
	{
		TargetPtr ptr(target);
		return ptr;
	}

	public ~global ~friend void intrusive_ptr_add_ref(Artifact * p)
	{
		intrusive_ptr_add_ref(p->target);
	}

	public ~global ~friend void intrusive_ptr_release(Artifact * p)
	{
		intrusive_ptr_release(p->target);
	}		

};
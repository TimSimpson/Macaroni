~import BOOST_FOREACH;
~import Macaroni::Model::Element;
~import Macaroni::Model::ElementLuaMetaData;
~import Macaroni::Exception;
~import Macaroni::Model::Project::ExeTarget;
~import Macaroni::Model::Project::LibraryTarget;
~import Macaroni::Model::Project::LibraryTargetLuaMetaData;
~import lua_State;
~import boost::optional;
~import Macaroni::IO::Path;
~import Macaroni::IO::PathListLuaMetaData;
~import Macaroni::IO::PathLuaMetaData;
~import Macaroni::IO::PathListPtr;
~import Macaroni::IO::PathPtr;
~import Macaroni::Model::Project::Resource;
~import Macaroni::Model::Project::ResourceLuaMetaData;
~import Macaroni::Model::Project::ResourcePtr;
~import std::string;
~import Macaroni::Model::Project::Target;
~import Macaroni::Model::Project::TargetLuaMetaData;
~import Macaroni::Model::Project::TargetPtr;
~import Macaroni::Model::Project::UnitTarget;
~import Macaroni::Model::Project::UnitTargetPtr;
~import Macaroni::Model::Project::UnitTargetLuaMetaData;
~import std::vector;


~namespace Macaroni::Model::Project;


class TargetLuaExtra
{
	~block "cpp-include"
	{
		#include <Macaroni/Lua.h>
	}

	~block "cpp"
	{
		#define LUA_GLUE_TRY try {
		#define LUA_GLUE_CATCH  \
			} catch(const Macaroni::Exception & ex) { \
				return luaL_error(L, ex.message().c_str()); \
			} catch(const std::exception & ex) { \
				return luaL_error(L, ex.what()); \
			}
	}

	public static int CreateElementList(lua_State * L)
	{
		LUA_GLUE_TRY
			TargetPtr instance = TargetLuaMetaData::GetInstance(L, 1);
			std::vector<ElementPtr> elements;
			instance->CreateElementList(elements);
			lua_newtable(L);
			int index = 1;
			BOOST_FOREACH(ElementPtr & e, elements)
			{
				lua_pushinteger(L, index);
				ElementLuaMetaData::PutInstanceOnStack(L, e);
				lua_rawset(L, -3);
				++ index;
			}
			return 1;
		LUA_GLUE_CATCH
	}

	public static int AddExe(lua_State * L)
	{
		return AddExeOrTest(L, "exe");
	}

	public static int AddTest(lua_State * L)
	{
		return AddExeOrTest(L, "test");
	}

/*	public static int Append(lua_State * L)
	{
		LUA_GLUE_TRY
			TargetPtr target = TargetLuaMetaData::GetInstance(L, 1);
			LibraryTarget * library =
				dynamic_cast<LibraryTarget *>(target.get());
			Lireturn AddExeOrTest(L, "test");
		LUA_GLUE_CATCH
	}	*/

	public static int AddExeOrTest(lua_State * L, const char * typeName)
	{
		LUA_GLUE_TRY
			TargetPtr target = TargetLuaMetaData::GetInstance(L, 1);
			LibraryTarget * library =
				dynamic_cast<LibraryTarget *>(target.get());
			LibraryTargetPtr lPtr(library);
			string name = luaL_checkstring(L, 2);
			PathListPtr sources;
			if (Macaroni::IO::PathListLuaMetaData::IsType(L, 3))
			{
				sources = Macaroni::IO::PathListLuaMetaData
					::GetInstance(L, 3);
			}
			else
			{
				PathPtr path = Macaroni::IO::PathLuaMetaData::GetInstance(L, 3);
				sources.reset(new Macaroni::IO::PathList());
				sources->push_back(path);
			}
			ExeTarget::Create(lPtr, name, typeName, sources);
			return 0;
		LUA_GLUE_CATCH
	}

	public static int index(lua_State * L, Target * target,
		                    const string & index)
	{
		//TODO: Yep, this sucks! There's a better method to do this involving
		// inheritance, I'm just being lazy here. Pure crappolla, no excuses!
		LUA_GLUE_TRY
			if (index == "ShortName")
			{
				optional<string> sn = target->GetShortName();
				if (sn)
				{
					lua_pushstring(L, sn.get().c_str());
				}
				else
				{
					lua_pushnil(L);
				}
				return 1;
			}
			LibraryTarget * library = dynamic_cast<LibraryTarget *>(target);
			if (0 != library)
			{
				LibraryTargetPtr lPtr(library);
				const int result = LibraryTargetLuaMetaData::Index(L, lPtr,
					                                               index);
				if (result > 0) {
					return result;
				}
				if (index == "AddExe")
				{
					lua_pushcfunction(L, AddExe);
                    return 1;
				}
				else if (index == "AddTest")
				{
					lua_pushcfunction(L, AddTest);
                    return 1;
				}
				/*else if (index == "Append")
				{
					lua_pushcfunction(L, Append);
					return 1;
				}*/
			}

			Resource * resource = dynamic_cast<Resource *>(target);
			if (0 != resource)
			{
				ResourcePtr ptr(resource);
				const int result = ResourceLuaMetaData::Index(L, ptr, index);
				if (result > 0) {
					return result;
				}
			}

			if (index == "CreateElementList")
			{
				lua_pushcfunction(L, CreateElementList);
				return 1;
			}
			UnitTarget * unitTarget = dynamic_cast<UnitTarget *>(target);
			if (0 != unitTarget)
			{
				if (index == "CppFile")
                {
                    PathLuaMetaData::PutInstanceOnStack(L,
                        unitTarget->GetCppFile());
                    return 1;
                }
				if (index == "Generated")
				{
					lua_pushboolean(L, unitTarget->IsGenerated());
					return 1;
				}
				if (index == "HFile")
				{
					PathLuaMetaData::PutInstanceOnStack(L,
						unitTarget->GetHFile());
					return 1;
				}
                if (index == "SetCppFile")
                {
                    lua_pushcfunction(L, SetCppFile);
                    return 1;
                }
				if (index == "SetCppFileRootDirectory")
				{
					lua_pushcfunction(L, SetCppFileRootDirectory);
					return 1;
				}
				if (index == "SetHFileAsUnknownRelativePath")
				{
					lua_pushcfunction(L, SetHFileAsUnknownRelativePath);
					return 1;
				}
                if (index == "SetCppFileAsUnknownRelativePath")
                {
                    lua_pushcfunction(L, SetCppFileAsUnknownRelativePath);
                    return 1;
                }
				if (index == "SetCppFileAsUnknownRelativePath")
				{
					lua_pushcfunction(L, SetCppFileAsUnknownRelativePath);
					return 1;
				}
				if (index == "SetHFile")
				{
					lua_pushcfunction(L, SetHFile);
					return 1;
				}
				if (index == "SetHFileRootDirectory")
				{
					lua_pushcfunction(L, SetHFileRootDirectory);
					return 1;
				}
			}

			if (index == "Unit")
			{
				lua_pushcfunction(L, Unit);
				return 1;
			}

			return 0;
		LUA_GLUE_CATCH
	}

	public static int SetCppFile(lua_State * L)
	{
		LUA_GLUE_TRY
			TargetPtr instance = TargetLuaMetaData::GetInstance(L, 1);
			UnitTarget * unitTarget =
				dynamic_cast<UnitTarget *>(instance.get());
			if (0 == unitTarget)
			{
				return luaL_error(L, "Expected a UnitTarget.");
			}
			PathPtr path;
			if (!lua_isnil(L, 2))
			{
				path = PathLuaMetaData::GetInstance(L, 2);
			}
			unitTarget->SetCppFile(path);
			return 0;
		LUA_GLUE_CATCH
	}

	public static int SetCppFileAsUnknownRelativePath(lua_State * L)
	{
		LUA_GLUE_TRY
			TargetPtr instance = TargetLuaMetaData::GetInstance(L, 1);
			UnitTarget * unitTarget =
				dynamic_cast<UnitTarget *>(instance.get());
			if (0 == unitTarget)
			{
				return luaL_error(L, "Expected a UnitTarget.");
			}
			string path = luaL_checkstring(L, 2);
			unitTarget->SetCppFileAsUnknownRelativePath(path);
			return 0;
		LUA_GLUE_CATCH
	}

	public static int SetCppFileRootDirectory(lua_State * L)
	{
		LUA_GLUE_TRY
			TargetPtr instance = TargetLuaMetaData::GetInstance(L, 1);
			UnitTarget * unitTarget =
				dynamic_cast<UnitTarget *>(instance.get());
			if (0 == unitTarget)
			{
				return luaL_error(L, "Expected a UnitTarget.");
			}
			PathPtr path = PathLuaMetaData::GetInstance(L, 2);
			unitTarget->SetCppFileRootDirectory(path);
			return 0;
		LUA_GLUE_CATCH
	}

	public static int SetHFile(lua_State * L)
	{
		LUA_GLUE_TRY
			TargetPtr instance = TargetLuaMetaData::GetInstance(L, 1);
			UnitTarget * unitTarget =
				dynamic_cast<UnitTarget *>(instance.get());
			if (0 == unitTarget)
			{
				return luaL_error(L, "Expected a UnitTarget.");
			}
			PathPtr path = PathLuaMetaData::GetInstance(L, 2);
			unitTarget->SetHFile(path);
			return 0;
		LUA_GLUE_CATCH
	}

	public static int SetHFileRootDirectory(lua_State * L)
	{
		LUA_GLUE_TRY
			TargetPtr instance = TargetLuaMetaData::GetInstance(L, 1);
			UnitTarget * unitTarget =
				dynamic_cast<UnitTarget *>(instance.get());
			if (0 == unitTarget)
			{
				return luaL_error(L, "Expected a UnitTarget.");
			}
			PathPtr path = PathLuaMetaData::GetInstance(L, 2);
			unitTarget->SetHFileRootDirectory(path);
			return 0;
		LUA_GLUE_CATCH
	}

	public static int SetHFileAsUnknownRelativePath(lua_State * L)
	{
		LUA_GLUE_TRY
			TargetPtr instance = TargetLuaMetaData::GetInstance(L, 1);
			UnitTarget * unitTarget =
				dynamic_cast<UnitTarget *>(instance.get());
			if (0 == unitTarget)
			{
				return luaL_error(L, "Expected a UnitTarget.");
			}
			string path = luaL_checkstring(L, 2);
			unitTarget->SetHFileAsUnknownRelativePath(path);
			return 0;
		LUA_GLUE_CATCH
	}

	public static int Unit(lua_State * L)
	{
		LUA_GLUE_TRY
			TargetPtr instance = TargetLuaMetaData::GetInstance(L, 1);
			bool generated(lua_toboolean(L, 1) != 0);
			string name(luaL_checkstring(L, 2));
			TargetPtr ptr(UnitTarget::Create(instance, generated, name));
			TargetLuaMetaData::PutInstanceOnStack(L, ptr);
			return 1;
		LUA_GLUE_CATCH
	}
};

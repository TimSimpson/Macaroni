~import BOOST_FOREACH;
~import Macaroni::Model::Context;
~import Macaroni::Model::ContextPtr;
~import Macaroni::Exception;
~import BOOST_FOREACH;
~import boost::format;
~import Macaroni::Model::Project::GroupList;
~import boost::intrusive_ptr;
~import Macaroni::Lua::LuaClass;
~import Macaroni::Lua::LuaIncludes;
~import Macaroni::Lua::LuaFunction;
~import Macaroni::Lua::LuaOperator;
~import Macaroni::Lua::LuaProperty;
~import Macaroni::Model::Project::Project;
~import Macaroni::Model::Project::ProjectPtr;
~import std::string;
~import Macaroni::StringException;
~import std::stringstream;
~import Macaroni::Cpp::UseLightDef;
~import Macaroni::Model::Project::Utils;
~import std::vector;


~namespace Macaroni::Model::Project;

class Group {};

typedef intrusive_ptr<Group ~l> GroupPtr
	@LuaClass [ SameAsNode = Group ]
	@UseLightDef true;

class Group
	@LuaClass [
		ReferenceType = GroupPtr
	]
	@LuaIncludes = {
		#include <Macaroni/Exception.h>
		#include <Macaroni/Model/Project/ProjectLuaMetaData.h>
	}
{
	// There's a bug in Macaroni which I'm not even sure I can solve where
	// "Project" can't be read correctly by MSVC 12.
	typedef Project ProjectAlias;

	friend GroupList;

	private Context * context;
	private const string name;
	private GroupList * const parent;
	private vector<Macaroni::Model::Project::Project *> projects;

	protected Group(Context * context, GroupList * parent, const string & name)
	: context(context),
	  name(name),
	  parent(parent)
	{
	}

	protected ~Group()
	{
		BOOST_FOREACH(Macaroni::Model::Project::Project * project, projects)
		{
			delete project;
		}
	}

	public bool operator==(const Group & other) const {
		return (name == other.name);
	}

	/** Returns a version of this ID which can be used as a C identifier.
	 * The point isn't to make a pretty name but just one that maps uniquely.
	 */
	public string GetCId() const
		@LuaFunction "GetCId"
	{
		return Utils::CreateCId(name);
	}

	public ContextPtr GetContext() const
	{
		ContextPtr ptr(context);
		return ptr;
	}

	public const string & GetName() const
		@LuaProperty "Name"
	{
		return name;
	}

	public ~global ~friend void intrusive_ptr_add_ref(Group * p)
	{
		intrusive_ptr_add_ref(p->parent);
	}

	public ~global ~friend void intrusive_ptr_release(Group * p)
	{
		intrusive_ptr_release(p->parent);
	}

	private void addProject(ProjectAlias * project) {
		BOOST_FOREACH(ProjectAlias * p, projects) {
			if (*p == *project) {
				throw Macaroni::StringException("Attempt to add the same project "
										  "twice.");
			}
		}
		projects.push_back(project);
	}

	/** Returns the project or an empty ptr if it doesn't exist. */
	public ProjectPtr FindProject(const std::string & name)
		@LuaFunction "FindProject"
	{
		using Macaroni::Model::Project::Project;
		BOOST_FOREACH(ProjectAlias * p, projects) {
			if (p->GetName() == name) {
				return p;
			}
		}
		return ProjectPtr();
	}

	public ProjectPtr Project(const std::string & name)
		@LuaFunction "Project"
	{
		using Macaroni::Model::Project::Project;
		ProjectPtr project = FindProject(name);
		if (!project)
		{
			project.reset(new Project(this, name));
			addProject(project.get());
		}
		return project;
	}

	public string ToString() const
		@LuaOperator "__tostring"
	{
		return str(format("Group=\"%s\"") % name);
	}
};

~import Macaroni::Lua::LuaClass;
~import Macaroni::Lua::LuaFunction;
~import Macaroni::Lua::LuaOperator;
~import Macaroni::Lua::LuaProperty;
~import Macaroni::IO::Path;
~import Macaroni::IO::PathPtr;
~import Macaroni::Model::Project::ProjectVersion;
~import Macaroni::Model::Project::ProjectVersionPtr;
~import Macaroni::Exceptions::SimpleException;
~import Macaroni::Exceptions::SimpleStringException;
~import std::string;
~import Macaroni::Model::Project::Target;
~import Macaroni::Model::Project::TargetPtr;


~namespace Macaroni::Model::Project;

 
/**
 * A C++ implementation file.
 */
class UnitTarget : public Target
	@LuaClass [
		ReferenceType = TargetPtr
	]
{
	private PathPtr cppFile;
	private PathPtr hFile;
	private bool generated;
	private string name;

	~block "cpp"
	{
		MACARONI_SIMPLE_EXCEPTION_DEFINE(NameCannotBeEmptyException,
			"Argument \"name\" cannot be empty.");
		MACARONI_SIMPLE_STRING_EXCEPTION_DEFINE(CppPathAlreadySetException,
			"The CppFile property was already set! Current value=%s");
		MACARONI_SIMPLE_STRING_EXCEPTION_DEFINE(HPathAlreadySetException,
			"The HFile property was already set! Current value=%s");
	}

	private UnitTarget(Target & parent, bool generated, const string & name)
	:  Target(parent.GetProjectVersion().get(), name),
	   cppFile(),
	   hFile(),
	   generated(generated),
	   name(name)
	{
		if (name == "")
		{
			throw NameCannotBeEmptyException(MACARONI_INTERNAL_SOURCE);
		}
		this->setParent(&parent);
		parent.AddDependency(this);
	}

	public static UnitTarget * Create(TargetPtr parent, bool generated, 
		                              const string & name)
		@LuaFunction "Create"
	{
		// The parent will handle the memory so this isn't a leak.
		return new UnitTarget(*parent, generated, name);
	}

	/** The CPP file. */
	public PathPtr GetCppFile() const		
	{
		return cppFile;
	}

	public bool IsGenerated() const
	{
		return generated;
	}

	public void SetCppFile(PathPtr value)
	{
		if (cppFile)
		{
			if (*cppFile != *value)
			{
				throw CppPathAlreadySetException(
					cppFile->GetAbsolutePathForceSlash().c_str(), 
					MACARONI_INTERNAL_SOURCE);
			}
		}
		cppFile = value;
	}

	public void SetCppFileAsUnknownRelativePath(string value)
	{
		PathPtr ptr(new Path("", value));
		SetCppFile(ptr);
	}

	public void SetCppFileRootDirectory(PathPtr path)
	{
		cppFile = cppFile->CreateWithDifferentRootPath(path);
	}

	/** The H file. */
	public PathPtr GetHFile() const		
	{
		return hFile;
	}

	public virtual const char * GetTypeName() const
	{
		return "unit";
	}

	public void SetHFile(PathPtr value)
	{
		if (hFile)
		{
			if (*hFile != *value) 
			{
				throw HPathAlreadySetException(
					hFile->GetAbsolutePathForceSlash().c_str(),
					MACARONI_INTERNAL_SOURCE);
			}
		}
		hFile = value;
	}

	public void SetHFileAsUnknownRelativePath(string value)
	{
		PathPtr ptr(new Path("", value));
		SetHFile(ptr);
	}

	public void SetHFileRootDirectory(PathPtr path)
	{
		hFile = hFile->CreateWithDifferentRootPath(path);
	}
};

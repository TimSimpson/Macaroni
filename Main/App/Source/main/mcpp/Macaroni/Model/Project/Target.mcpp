/**
 * Copyright 2011 Tim Simpson
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
~import Macaroni::Model::Project::Artifact;
~import Macaroni::Model::Project::ArtifactPtr;
~import Macaroni::Model::Project::ArtifactList;
~import Macaroni::Model::Project::ArtifactListPtr;
~import BOOST_FOREACH;
~import Macaroni::Model::Project::Config;
~import Macaroni::Model::Project::ConfigPtr;
~import Macaroni::Model::Context;
~import Macaroni::Model::ContextPtr;
~import boost::format;
~import Macaroni::Model::Element;
~import Macaroni::Model::ElementPtr;
~import Macaroni::Model::Project::Group;
~import Macaroni::Model::Project::GroupPtr;
~import boost::intrusive_ptr;
~import Macaroni::Lua::LuaClass;
~import Macaroni::Lua::LuaFunction;
~import Macaroni::Lua::LuaGlueCode;
~import Macaroni::Lua::LuaIncludes;
~import Macaroni::Lua::LuaIndexExtraCode;
~import Macaroni::Lua::LuaOperator;
~import Macaroni::Lua::LuaProperty;
~import Macaroni::Model::Node;
~import Macaroni::Model::NodePtr;
~import boost::optional;
~import Macaroni::Model::Project::PlatformName;
~import Macaroni::Model::Project::PlatformList;
~import Macaroni::Model::Project::PlatformListPtr;
~import Macaroni::Model::Project::Project;
~import Macaroni::Model::Project::ProjectVersion;
~import Macaroni::Model::Project::ProjectVersionPtr;
~import Macaroni::Model::Reason;
~import Macaroni::Exceptions::SimpleException;
~import Macaroni::Exceptions::SimpleStringException;
~import std::string;
~import Macaroni::Model::Project::TargetList;
~import Macaroni::Model::Project::TargetListPtr;
~import Macaroni::Model::Project::TargetLuaMetaData;
~import Macaroni::Model::Project::Files;
~import Macaroni::Cpp::UseLightDef;
~import std::vector;
~import Macaroni::Model::Project::Utils;

~namespace Macaroni::Model::Project;

class Target {};

typedef intrusive_ptr<Target ~l> TargetPtr
		@LuaClass [ SameAsNode = Target ]
		@UseLightDef true;

//~import Macaroni::Model::Project::TargetList;

//typedef vector<Target *> RealTargetList;

//typedef intrusive_ptr<TargetList> TargetListPtr;

class Target
	@LuaClass [
		ReferenceType = TargetPtr
	]
	@LuaIncludes ={
		#include <Macaroni/Model/Project/TargetLuaExtra.h>
	}
	@LuaIndexExtraCode ={
		const string index_0(luaL_checkstring(L, 2));
		int result = TargetLuaExtra::index(L, instance.get(), index_0);
		if (result > 0)
		{
			return result;
		}
	}
{
	friend ProjectVersion;
	friend TargetLuaMetaData;

	protected vector<Target *> dependencies;
	protected vector<Element *> elements;
	private bool implicit;
	private const string name;
	private Target * parent;
	private PlatformListPtr platformList;
	private ProjectVersion * const projectVersion;
	protected vector<Target *> requirements;
	protected optional<string> shortName;

	//protected FilesPtr sources;

	~block "cpp"
	{
		typedef Macaroni::Model::Project::Artifact ArtifactT;

		MACARONI_SIMPLE_EXCEPTION_DEFINE(DependencyAlreadyPresentException,
			"Attempted to add a dependency twice.");

		MACARONI_SIMPLE_EXCEPTION_DEFINE(ElementAlreadyAddedException,
			"Element was already added.");

		MACARONI_SIMPLE_STRING_EXCEPTION_DEFINE(ElementNotOwnedException,
			"%s");

		MACARONI_SIMPLE_EXCEPTION_DEFINE(InvalidTargetOperationException,
			"The requested method is not available on this Target.");

		MACARONI_SIMPLE_EXCEPTION_DEFINE(UnrelatedElementSwitchException,
			"An element may only switch its target to a different target with "
			"the same ProjectVersion.");
	}

	protected Target(ProjectVersion * projectVersion, const string & name,
		             optional<string> shortName, bool implicit=false)
	:   dependencies(),
		elements(),
		implicit(implicit),
	    name(name),
	    parent(0),
	    platformList(),
		projectVersion(projectVersion),
		requirements(),
		shortName(shortName)
		//sources(new Files())
	{
		projectVersion->AddTarget(this);
		platformList.reset(new PlatformList());
	}

	protected Target(ProjectVersion * projectVersion, const string & name,
		             optional<string> shortName,
		             FilesPtr sources)
	:   dependencies(),
		elements(),
	    name(name),
	    parent(0),
	    platformList(),
		projectVersion(projectVersion),
		requirements(),
		shortName(shortName)
		//sources(sources)
	{
		projectVersion->AddTarget(this);
		platformList.reset(new PlatformList());
	}

	public virtual ~Target() = default;

	public bool operator==(const Target & target) const
		@LuaOperator "__eq"
	{
		return (*projectVersion == *target.projectVersion
			    && name == target.name);
	}

	public virtual ArtifactPtr AddArtifact(const string & name, ConfigPtr config)
		@LuaFunction "AddArtifact"
		@LuaGlueCode ={
			TargetPtr & instance = TargetLuaMetaData::GetInstance(L, 1);
			const std::string arg1(luaL_checkstring(L, 2));
			ConfigPtr arg2;
			if (1 != lua_isnil(L, 3) && lua_gettop(L) >= 3)
			{
				arg2 = ConfigLuaMetaData::GetInstance(L, 3);
			}
			ArtifactPtr rtn = instance->AddArtifact(arg1, arg2);
			ArtifactLuaMetaData::PutInstanceOnStack(L, rtn);
			return 1;
		}
	{
		throw InvalidTargetOperationException(MACARONI_INTERNAL_SOURCE);
	}

	public void AddDependency(Target * dependency)
	{
		BOOST_FOREACH(Macaroni::Model::Project::Target * t, dependencies) {
			if (t->GetCId() == this->GetCId()) {
				throw DependencyAlreadyPresentException(
					MACARONI_INTERNAL_SOURCE);
			}
		}
		dependencies.push_back(dependency);
	}

	public void AddDependency(TargetPtr dependency)
		@LuaFunction "AddDependency"
	{
		AddDependency(dependency.get());
	}

	/** Establishes this target as the owner of the element. */
	public void AddElement(Element * element)
	{
		if (element->GetOwner() && element->GetOwner().get() != this)
		{
			string msg = str(format("Element %s is already owned by target %s, so "
				"cannot assign to target %s.") % element->GetNode()->GetFullName()
				% element->GetOwner()->ToString() % this->ToString());
			throw ElementNotOwnedException(msg.c_str());
		}
		BOOST_FOREACH(Element * e, elements) {
			if ((*e) == (*element)) {
				throw ElementAlreadyAddedException(MACARONI_INTERNAL_SOURCE);
			}
		}
		elements.push_back(element);
	}

	public void AddPlatform(const std::string & platformName)
		@LuaFunction "AddPlatform"
	/**
	 * Adds a platform that this target compiles / functions on.
	 * If the list is empty, then all platforms work; only by adding platforms
	 * do they begin to get filtered out.
	 */
	{
		BOOST_FOREACH(const PlatformName & name, *platformList)
		{
			if (name == platformName)
			{
				return;
			}
		}
		platformList->push_back(PlatformName(platformName));
	}

	public virtual ArtifactListPtr FindArtifacts(const string & name)
	{
		return FindArtifacts(name, ConfigPtr());
	}

	/** Returns a list of elements owned by this Target. */
	public void CreateElementList(vector<ElementPtr> & elementList)
	{
		BOOST_FOREACH(Element * e, elements)
		{
			elementList.push_back(ElementPtr(e));
		}
	}

	public void CreateElementList(vector<Element *> & elementList)
	{
		BOOST_FOREACH(Element * e, elements)
		{
			elementList.push_back(e);
		}
	}

	public TargetPtr CreateTargetPtr()
	{
		TargetPtr tp(this);
		return tp;
	}

	//TODO: If dealing with lists of artifacts gets too complex maybe put that
	//in its own class.
	public virtual  ArtifactListPtr FindArtifacts(
		const string & name, ConfigPtr config)
		@LuaFunction "FindArtifacts"
	{
		ArtifactListPtr ptr(new ArtifactList());
		return ptr;
	}

	public virtual ArtifactListPtr GetArtifacts()
		@LuaProperty "Artifacts"
	{
		ArtifactListPtr ptr(new ArtifactList());
		return ptr;
	}


	public ContextPtr GetContext() const
		@LuaProperty "Context"
	{
		return projectVersion->GetProject()->GetGroup()->GetContext();
	}

	/** Returns a version of this ID which can be used as a C identifier.
	 * The point isn't to make a pretty name but just one that maps uniquely.
	 */
	public string GetCId() const
		@LuaFunction "GetCId"
	{
		return str(format("%s___%s") % projectVersion->GetCId()
			                         % Utils::CreateCId(name));
	}

	public const PlatformListPtr GetPlatforms() const
		@LuaProperty "Platforms"
	{
		return platformList;
	}

	public string GetVersionFreeCId() const
		@LuaFunction "GetVersionFreeCId"
	{
		return str(format("%s___%s") % projectVersion->GetProject()->GetCId()
			                         % Utils::CreateCId(name));
	}

	/** Returns a version of this ID which can be used as a C identifier.
	 * The point isn't to make a pretty name but just one that maps uniquely.
	 */
	public string GetShortCId() const
		@LuaFunction "GetShortCId"
	{
		return str(format("%s") % Utils::CreateCId(name));
	}

	/** Returns the "short" name of a target. A short name is intended to
	 *  be used in place of the full ID in some contexts, such as when
	 *  DLLs or EXEs are created.
	 */
	public optional<string> GetShortName() const
	{
		return shortName;
	}

	/* This includes anything which gets included or must be run before this
	 * target. For example, in a Library, needed DLLs as well as every single
	 * TranslationUnit is a dependency. */
	public const TargetListPtr GetDependencies()
		@LuaProperty "Dependencies"
	{
		TargetListPtr ptr(new InnerTargetList(this, &dependencies));
		return ptr;
	}

	// Just get the vector, since that's all we want.
	public const vector<Target *> & GetDependenciesVec() const
	{
		return dependencies;
	}

	public bool IsImplicit() const
		@LuaProperty "Implicit"
	{
		return implicit;
	}

	public ProjectVersionPtr GetProjectVersion() const
		@LuaProperty "ProjectVersion"
	{
		ProjectVersionPtr ptr(projectVersion);
		return ptr;
	}

	public inline const string & GetName() const
		@LuaProperty "Name"
	{		return name;
	}

	public TargetPtr GetParent() const
		@LuaProperty "Parent"
	{
		return TargetPtr(parent);
	}

	template<typename PtrType>
	public PtrType GetParent() const
	{
		typedef typename PtrType::element_type UnderlyingType;

		TargetPtr p = GetParent();
		if (!p)
		{
			return PtrType();
		}
		PtrType rtnValue = boost::dynamic_pointer_cast<UnderlyingType>(p);
		if (!rtnValue)
		{
			return PtrType();
		}
		else
		{
			return rtnValue;
		}
	}

	/** Requirements are targets that this target does not need on its own but
	 *  anything which depends on this target is going to need.
	 *  The big difference is that the end result will not actually include the
	 *  requirements.
	 *  For example, a library might list unit tests as a requirement- meaning
	 *  the library could be built by itself, but if an exe is to be built
	 *  which depends on the library all of the libraries requirements - the
	 *  tests - should be run first. It also is a bit tricky in that sometimes
	 *  the targets in Requirements might list *this* target as a dependency
	 * (of course, if true unit tests just dependended on their
	 *	 TranslationUnits, and then the library dependended on the tests,
	 *  that'd be different).
	 */
	public virtual const vector<Target *> & GetRequirements() const
	{
		return requirements;
	}

	public virtual FilesPtr GetSources()
		@LuaProperty "Sources"
	{
		throw InvalidTargetOperationException(MACARONI_INTERNAL_SOURCE);
	}

	public virtual const char * GetTypeName() const
		@LuaProperty "TypeName"
	{
		return "target";
	}

	public bool HasDependencyOnProjectName(const string & name) const
		@LuaFunction "HasDependencyOnProjectName"
	{
		BOOST_FOREACH(Macaroni::Model::Project::Target * t, dependencies) {
			if (t->GetProjectVersion()->GetProject()->GetName() == name) {
				return true;
			}
		}
		return false;
	}

	public ~global ~friend void intrusive_ptr_add_ref(Target * p)
	{
		intrusive_ptr_add_ref(p->projectVersion);
	}

	public ~global ~friend void intrusive_ptr_release(Target * p)
	{
		intrusive_ptr_release(p->projectVersion);
	}

	public virtual int LuaIndex(lua_State * L, const string & name)
	{
		return 0;
	}

	public bool MatchesPlatform(const std::string & platformName) const
		@LuaFunction "MatchesPlatform"
	{
		if (platformList->size() == 0)
		{
			return true;  // If no names are defined, then everything matches.
		}
		else
		{
			BOOST_FOREACH(const PlatformName & name, *platformList)
			{
				if (name == platformName)
				{
					return true;
				}
			}
			return false;
		}
	}

	/** Returns true if this target is owned by the given target. */
	public virtual bool OwnedBy(Target * target)
	{
		return (0!= target && this->parent == target);
	}

	public virtual bool OwnedBy(TargetPtr target)
		@LuaFunction "OwnedBy"
	{
		return OwnedBy(target.get());
	}

	private void removeElement(Element & element)
	{
		typedef std::vector<Element *>::iterator Itr;
		for (Itr itr = elements.begin(); itr != elements.end(); ++itr)
		{
			if ((*(*itr)) == element)
			{
				elements.erase(itr);
				break;
			}
		}
	}

	protected void setParent(Target * parent)
	{
		this->parent = parent;
	}

	public static void SwitchOwner(Element & element, Target & from, Target & to)
	{
		if (from.projectVersion != to.projectVersion)
		{
			throw UnrelatedElementSwitchException(MACARONI_INTERNAL_SOURCE);
		}
		from.removeElement(element);
		to.AddElement(&element);
	}

	public string ToString() const
		@LuaOperator "__tostring"
	{
		return str(format("%s, Target=\"%s\"")
		           % projectVersion->ToString() % name);
	}

	class InnerTargetList : public TargetList
	{
		private Target * parent;
		private vector<Target *> * vec;

		public InnerTargetList(Target * parent, vector<Target *> * vec)
		:   parent(parent), vec(vec)
		{
			intrusive_ptr_add_ref(parent);
		}

		public ~InnerTargetList()
		{
			intrusive_ptr_release(parent);
		}

		//public virtual void AddReference()
		//{
		//	intrusive_ptr_add_ref(parent);
		//}

		public virtual int GetCount() const
		{
			return vec->size();
		}

		public virtual TargetPtr GetItem(int index) const
		{
			Target * t = (*vec)[index];
			TargetPtr ptr(t);
			return ptr;
		}

	};
};

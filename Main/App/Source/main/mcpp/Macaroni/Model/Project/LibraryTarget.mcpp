/**
 * Copyright 2011 Tim Simpson
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
~import Macaroni::AppPathsPtr;
~import Macaroni::Model::Project::Artifact;
~import Macaroni::Model::Project::ArtifactPtr;
~import Macaroni::Model::Project::ArtifactList;
~import Macaroni::Model::Project::ArtifactListPtr;
~import Macaroni::Model::Project::Config;
~import Macaroni::Model::Project::ConfigPtr;
~import BOOST_FOREACH;
~import boost::format;
~import Macaroni::Model::Element;
~import Macaroni::Exception;
~import Macaroni::IO::FileSet;
~import Macaroni::Environment::Values::Macaroni_IO_FileSet;
~import Macaroni::IO::FileSetPtr;
~import boost::intrusive_ptr;
~import Macaroni::Lua::LuaClass;
~import Macaroni::Environment::LuaEnvironment;
~import Macaroni::Lua::LuaFunction;
~import Macaroni::Lua::LuaGlueCode;
~import Macaroni::Lua::LuaOperator;
~import Macaroni::Lua::LuaProperty;
~import Macaroni::Model::NodePtr;
~import boost::optional;
~import boost::filesystem::path;
~import Macaroni::IO::PathList;
~import Macaroni::Environment::Values::Macaroni_IO_PathList;
~import Macaroni::IO::PathListPtr;
~import Macaroni::IO::Path;
~import Macaroni::IO::PathPtr;
~import Macaroni::Model::Project::ProjectVersion;
~import Macaroni::Model::Project::ProjectVersionPtr;
~import Macaroni::Model::Reason;
~import Macaroni::IO::RegexFileSet;
~import Macaroni::IO::RegexFileSetPtr;
~import Macaroni::Model::Project::Target;
~import Macaroni::Model::Project::Files;
~import Macaroni::Model::Project::FilesPtr;
~import Macaroni::Model::Project::FileList;
~import Macaroni::Model::Project::FileListPtr;
~import Macaroni::Environment::Values::Table;
~import Macaroni::Model::Project::TargetFileSweeper;
~import Macaroni::Environment::Values::Macaroni_Model_Project_Target;
~import Macaroni::Model::Project::TargetPtr;
~import std::string;
~import Macaroni::StringException;
~import Macaroni::Cpp::UseLightDef;
~import std::vector;

~namespace Macaroni::Model::Project;

//TODO: Rename to "Library" after getting rid of old class.

class LibraryTarget {};

typedef intrusive_ptr<LibraryTarget ~l> LibraryTargetPtr
		@LuaClass [ SameAsNode = LibraryTarget ]
		@UseLightDef true;

class LibraryTarget : public virtual Macaroni::Model::Project::Target
	@LuaClass [
		ReferenceType = LibraryTargetPtr
	]
{
	~import Macaroni::Model::Project::LibraryTargetLuaMetaData;

	protected ArtifactListPtr artifacts;
	protected PathListPtr headers;
	protected PathListPtr macaroniCode;

	protected LibraryTarget(ProjectVersion * projectVersion,
		            const string & name, optional<string> shortName)
	:   Target(projectVersion, name, shortName),
		artifacts(new ArtifactList()),
		headers(new PathList()),
		macaroniCode(new PathList())
	{
		//GetSources()->Add("Macaroni");
	}

	////private LibraryTarget(ProjectVersion * projectVersion,
	////	            const string & name, FilesPtr sources)
	////:   Target(projectVersion, name, sources),
	////    artifacts(new ArtifactList()),
	////	headers(new PathList())
	////{
	////	//GetSources()->Add("Macaroni");
	////}

	///*public virtual ArtifactPtr AddArtifact(const string & name, ConfigPtr config)
	//{
	//	ArtifactPtr ptr(new ArtifactT(this, name));
	//	return ptr;
	//}	*/

	public void AddMacaroniFile(const Path & p)
	{
		PathPtr ptr(new Path(p));
		macaroniCode->push_back(ptr);
	}

	public static LibraryTargetPtr Create(
		ProjectVersion * projectVersion,
		const string & name,
		optional<string> & shortName,
		const vector<Macaroni::Model::Project::TargetPtr> & dependencies,
		PathListPtr headers,
		PathListPtr sources,
		PathListPtr excludeFiles
		)
	{
		LibraryTargetPtr lib(new LibraryTarget(projectVersion, name, shortName));
		initialize(lib, dependencies, headers, sources, excludeFiles);
		return lib;
	}

	public void Append(
		const vector<Macaroni::Model::Project::TargetPtr> & dependencies,
		PathListPtr headers,
		PathListPtr sources,
		PathListPtr excludeFiles
		)
	{
		LibraryTargetPtr lib(this);
		initialize(lib, dependencies, headers, sources, excludeFiles);
	}

	public void Append(Table & table)
		@LuaFunction "Append"
		@LuaGlueCode ={
			TargetPtr target = TargetLuaMetaData::GetInstance(L, 1);
			LibraryTarget * library =
				dynamic_cast<LibraryTarget *>(target.get());
			if (0 == library)
			{
				luaL_error(L, "Expected a LibraryTarget for arg 1.");
			}
			LibraryTargetPtr lPtr(library);
			Table table;
			boost::optional<string> key("Library argument 2");
			LuaEnvironment::SerializeTable(table, L, 2, key);

			lPtr->Append(table);
			return 0;
		}
	{
		PathListPtr headers;
		if (table.Has("headers"))
		{
			headers = table.Get<Macaroni_IO_PathList>("headers");
		}
		else
		{
			headers.reset(new PathList());
		}
		PathListPtr sources = table.Get<Macaroni_IO_PathList>("sources");

		PathListPtr excludeFiles;
		if (table.Has("excludeFiles"))
		{
			excludeFiles = table.Get<Macaroni_IO_PathList>("excludeFiles");
		}

		vector<TargetPtr> dependencies;

		if (table.Has("dependencies"))
		{
			struct Func
			{
				vector<TargetPtr> & dependencies;

				Func(vector<TargetPtr> & dependencies)
				: dependencies(dependencies)
				{
				}

				void operator ()(TargetPtr target)
				{
					dependencies.push_back(target);
				}
			};
			Func f(dependencies);
			table.GetVector<Macaroni_Model_Project_Target, Func>(
				"dependencies", f);
		}
		Append(dependencies, headers, sources, excludeFiles);
	}

	// This is like "CreateElementList" but also includes all elements in the
	// targets owned by this library.
	public void FindAllElementsOwnedByLibraryOrOwnedTargets(
		vector<Element *> & elementList)
	{
		for (Target * tPtr : GetProjectVersion()->GetTargetsVec())
        {
        	if (tPtr)
        	{
        		auto otherLib = tPtr->GetParent<LibraryTargetPtr>();
        		if (tPtr == this ||
        			otherLib && otherLib.get() == this)
        		{
        			tPtr->CreateElementList(elementList);
        		}
        	}
        }
	}


	protected static void initialize(
		LibraryTargetPtr lib,
		const vector<Macaroni::Model::Project::TargetPtr> & dependencies,
		PathListPtr headers,
		PathListPtr sources,
		PathListPtr excludeFiles
		)
	{
		BOOST_FOREACH(TargetPtr target, dependencies) {
			lib->dependencies.push_back(target.get());
		}

		BOOST_FOREACH(PathPtr p, *headers)
		{
			lib->headers->push_back(p);
		}

		TargetFileSweeper sweeper(lib);

		if (sources)
		{
			BOOST_FOREACH(PathPtr p, *sources)
			{
				lib->headers->push_back(p);
			}
			sweeper.RecursivelyParseDirectory(*sources, excludeFiles);
		}
	}

	public ArtifactListPtr FindArtifacts(
		const string & name, ConfigPtr config) override
	{
		ArtifactListPtr results;
		BOOST_FOREACH(ArtifactPtr artifact, *artifacts)
		{
			if (artifact->GetName() == name)
			{
				if (!config || config->IsMatch(artifact->GetConfig()))
				{
					results->push_back(ArtifactPtr(artifact));
				}
			}
		}
		return results;
	}

	public ArtifactListPtr GetArtifacts() override
		@LuaProperty "Artifacts"
	{
		return artifacts;
	}

	public PathListPtr GetHeaders()
		@LuaProperty "Headers"
	{
		return headers;
	}

	public const PathList & GetHeadersRef() const
	{
		return *headers;
	}

	public PathListPtr GetMacaroniCode()
		@LuaProperty "MacaroniCode"
	{
		return headers;
	}

	public const char * GetTypeName() const override
	{
		return "lib";
	}

	protected int LuaIndex(lua_State * L, const string & name) override
	{
		LibraryTargetPtr me(this);
		return LibraryTargetLuaMetaData::Index(L, me, name);
		/*
		if (name == "Headers")
		{
			FileListLuaMetaData::PutInstanceOnStack(L, this->GetHeaders());
			return 1;
		}
		return 0;*/
	}

	void readFile(std::stringstream & contents, const std::string & filePath)
	{
		std::ifstream file(filePath.c_str());
		if (!file.is_open())
		{
			std::stringstream ss;
			ss << "Could not open file " << filePath << "!";
			throw Macaroni::StringException(ss.str().c_str());
		}
		std::string line;
		while(! file.eof())
		{
			std::getline(file, line);
			contents << line << "\n";
		}
		file.close();
	}

	public string ToString() const
		@LuaOperator "__tostring"
	{
		return str(format("%s (Library)")
		           % Target::ToString());
	}

};

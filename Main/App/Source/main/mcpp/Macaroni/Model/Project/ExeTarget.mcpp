~import BOOST_FOREACH;
~import boost::intrusive_ptr;
~import Macaroni::Lua::LuaClass;
~import Macaroni::Environment::LuaEnvironment;
~import Macaroni::Lua::LuaFunction;
~import Macaroni::Lua::LuaOperator;
~import Macaroni::Lua::LuaProperty;
~import Macaroni::Lua::LuaClass;
~import Macaroni::Lua::LuaFunction;
~import Macaroni::Lua::LuaGlueCode;
~import Macaroni::Lua::LuaIncludes;
~import Macaroni::Lua::LuaIndexExtraCode;
~import Macaroni::Lua::LuaOperator;
~import Macaroni::Lua::LuaProperty;
~import Macaroni::Model::Project::LibraryTarget;
~import Macaroni::Model::Project::LibraryTargetPtr;
~import boost::optional;
~import Macaroni::IO::PathList;
~import Macaroni::IO::PathListPtr;
~import Macaroni::IO::PathPtr;
~import Macaroni::Environment::Values::Macaroni_IO_PathList;
~import Macaroni::IO::PathListPtr;
~import Macaroni::Model::Project::ProjectVersion;
~import std::string;
~import Macaroni::Environment::Values::String;
~import Macaroni::Environment::Values::Table;
~import Macaroni::Environment::Values::TablePtr;
~import Macaroni::Environment::Values::Macaroni_Model_Project_Target;
~import Macaroni::Environment::Values::Macaroni_Model_Project_ProjectVersion;
~import Macaroni::Model::Project::TargetList;
~import Macaroni::Model::Project::TargetListPtr;
~import Macaroni::Model::Project::TargetPtr;
~import Macaroni::Cpp::UseLightDef;
~import std::vector;

~namespace Macaroni::Model::Project;

class ExeTarget {};

typedef intrusive_ptr<ExeTarget ~l> ExeTargetPtr
	@LuaClass [ SameAsNode = LibraryTarget ]
	@UseLightDef true;

class ExeTarget : public virtual LibraryTarget
	@LuaClass [
		ReferenceType = ExeTargetPtr
	]
{

	private const string subType;

	protected ExeTarget(ProjectVersion * projectVersion, const string & name,
		                optional<string> & shortName,
		                const string & subType)
	:	LibraryTarget(projectVersion, name, shortName),
	    Target(projectVersion, name, shortName),
		subType(subType)
	{
	}

	public static ExeTargetPtr Create(
		LibraryTargetPtr lib,
		const string & name,
		const string & subType,
		PathListPtr sources
		)
	{
		ProjectVersion * proj = lib->GetProjectVersion().get();
		vector<TargetPtr> deps;
		deps.push_back(lib);
		return Create(proj, name, boost::none, subType, deps, lib->GetHeaders(), sources);
	}

	public static ExeTargetPtr Create(
		ProjectVersion * projectVersion,
		const string & name,
		optional<string> shortName,
		const string & subType,
		const vector<TargetPtr> & dependencies,
		PathListPtr headers,
		PathListPtr sources
		)
	{
		ExeTargetPtr exe(new ExeTarget(projectVersion, name, shortName, subType));
		PathListPtr excludeFiles;
		initialize(exe, dependencies, headers, sources, excludeFiles);
		return exe;
	}

	public static TargetPtr Create(Table & table)
		@LuaFunction "Create"
		@LuaGlueCode ={
			Table table;
			boost::optional<string> key("Create argument 1");
			LuaEnvironment::SerializeTable(table, L, 1, key);

			TargetPtr target = ExeTarget::Create(table);

			TargetLuaMetaData::PutInstanceOnStack(L, target);
			return 1;
		}
	{
		ProjectVersionPtr projectVersion =
			table.Get<Macaroni_Model_Project_ProjectVersion>("projectVersion");
		const string name = table.Get<String>("name");
		const string subType = table.Get<String>("subType");
		optional<string> shortName = boost::none;
		if (table.Has("shortName"))
		{
			shortName = table.Get<String>("shortName");
		}
		vector<TargetPtr> dependencies;
		if (table.Has("dependencies"))
		{
			struct Func
			{
				vector<TargetPtr> & dependencies;

				Func(vector<TargetPtr> & dependencies)
				: dependencies(dependencies)
				{
				}

				void operator ()(TargetPtr target)
				{
					dependencies.push_back(target);
				}
			};
			Func f(dependencies);
			table.GetVector<Macaroni_Model_Project_Target, Func>(
				"dependencies", f);
		}
		PathListPtr sources = table.Get<Macaroni_IO_PathList>("sources");
		PathListPtr headers;
		if (table.Has("headers"))
		{
			headers = table.Get<Macaroni_IO_PathList>("headers");
		}
		else
		{
			headers.reset(new PathList());
			/*BOOST_FOREACH(TargetPtr dep, dependencies)
			{
				Target * nakedDepPtr = dep.get();
				Lib
				BOOST_FOREACH(PathPtr path, dep->GetHeaders())
				{
					headers->push_back(path);
				}
			}*/
		}
		return Create(projectVersion.get(), name, shortName, subType,
			          dependencies, headers, sources);
	}

/*	public static TargetPtr Create2(
		ProjectVersionPtr projectVersion,
		const string & name,
		const string & shortName,
		const string & subType,
		TargetListPtr dependencies,
		PathListPtr headers,
		PathListPtr sources
		)
		@LuaFunction "Create"
	{
		vector<TargetPtr> deps;
		for (size_t index = 0; index < dependencies->GetCount(); index ++)
		{
			deps.push_back(dependencies->GetItem(index));
		}
		ExeTargetPtr e = Create(projectVersion.get(), name, shortName, subType,
			                    deps, headers, sources);
		TargetPtr t = e;
		return e;
	}
*/
	public static ExeTargetPtr CreateExe(
		LibraryTargetPtr lib,
		const string & name,
		PathListPtr sources
		)
	{
		return Create(lib, name, "exe", sources);
	}

	public static ExeTargetPtr CreateTest(
		LibraryTargetPtr lib,
		const string & name,
		PathListPtr sources
		)
	{
		return Create(lib, name, "test", sources);
	}

	public virtual const char * GetTypeName() const
	{
		return subType.c_str();
	}
}

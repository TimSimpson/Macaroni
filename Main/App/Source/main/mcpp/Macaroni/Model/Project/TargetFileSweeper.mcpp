/**
 * Copyright 2011 Tim Simpson
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
~import Macaroni::Model::Context;
~import Macaroni::Model::ContextPtr;
~import Macaroni::Exception;
~import BOOST_FOREACH;
~import std::ifstream;
~import Macaroni::Model::FileName;
~import Macaroni::IO::FileSet;
~import Macaroni::IO::FileSetIterator;
~import Macaroni::Model::Library;
~import Macaroni::Model::LibraryPtr;
~import Macaroni::Model::Project::LibraryTarget;
~import Macaroni::Model::Project::MacaroniCodeTarget;
~import boost::optional;
~import Macaroni::Parser::ParserPtr;
~import Macaroni::Parser::Pippy::PippyParser;
~import boost::filesystem::path;
~import Macaroni::IO::Path;
~import Macaroni::IO::PathPtr;
~import Macaroni::IO::PathList;
~import Macaroni::IO::PathListPtr;
~import boost::regex;
~import Macaroni::IO::RegexFileSet;
~import Macaroni::IO::RegexFileSetIterator;
~import Macaroni::Exceptions::SimpleStringException;
~import Macaroni::Model::Source;
~import Macaroni::Model::SourcePtr;
~import std::string;
~import Macaroni::Exceptions::SimpleStringException;
~import std::stringstream;
~import Macaroni::Model::Project::Target;
~import Macaroni::Model::Project::TargetPtr;
~import Macaroni::Model::Project::UnitTarget;

~namespace Macaroni::Model::Project;

/** This class sweeps up files into Targets. */
class TargetFileSweeper
{
	private TargetPtr target;

	~block "cpp" {
		namespace {
			regex cppRegex("\\.c($|pp$|c$)");
			regex hppRegex("\\.h($|pp$)");
			regex mcppRegex("\\.m(h|cpp)$");

			MACARONI_SIMPLE_STRING_EXCEPTION_DEFINE(
				CouldNotReadFileException,
				"Could not read file %s!");

			MACARONI_SIMPLE_STRING_EXCEPTION_DEFINE(
				FileMustBeRelativePathException,
				"ParseFile must receive a relative path to correctly create "
				"a new unit. The given path only has a root path, while the "
				"path argument is empty (value was %s).");
		}


	}

	public TargetFileSweeper(TargetPtr target)
	: target(target)
	{
	}

	//TODO: Get rid of all of these once Macaroni supports default parameters.

	public void ParseFile(const path & file)
	{
		const PathListPtr empty;
		ParseFile(file, empty);
	}

	public void ParseFile(const Path & file)
	{
		const PathListPtr empty;
		ParseFile(file, empty);
	}

	public void RecursivelyParseDirectory(const PathList & pList)
	{
		const PathListPtr empty;
		RecursivelyParseDirectory(pList, empty);
	}

	public void ParseFileSet(const RegexFileSet & fileSet)
	{
		const PathListPtr empty;
		ParseFileSet(fileSet, empty);
	}

	// End stupid default parameter style functions.

	public void RecursivelyParseDirectory(const PathList & pList,
		                                  const PathListPtr & excludeFiles)
	{
		BOOST_FOREACH(PathPtr p, pList)
		{
			if (p->IsDirectory())
			{
				RegexFileSet rfs(p->GetPath(),
					             "\\.(h(|pp)|m(cpp|h)|c(|c|pp))$");
				ParseFileSet(rfs, excludeFiles);
			}
			else
			{
				ParseFile(*p.get(), excludeFiles);
			}
		}
	}

	public void ParseFile(const path & file, const PathListPtr & excludeFiles)
	{
		Path p(file);
		ParseFile(p, excludeFiles);
	}

	public void ParseFile(const Path & file, const PathListPtr & excludeFiles)
	{
		if (excludeFiles)
		{
			BOOST_FOREACH(PathPtr & path, *excludeFiles)
			{
				if (file.GetAbsolutePath() == path->GetAbsolutePath())
				{
					return; // Skip.
				}
			}
		}
		string str = file.GetAbsolutePath();
		if (boost::regex_search(str, mcppRegex)) {
			ParseMacaroniFile(file);
		} else {
			// TODO: If its ".cpp", ".c", or ".cc" create a TranslationUnit
			// target as the child of the given target.
			if (boost::regex_search(str, cppRegex)) {
				//PATH MUST BE AN ACTUAL RELATIVE PATH OR OH NOES WILL HAPPENS!!
				if (file.GetRelativePathNormalized().length() == 0)
				{
					throw FileMustBeRelativePathException(str);
				}
				PathPtr p(new Path(file));
				UnitTarget::Create(target, false,
					             p->GetRelativePathNormalized())->SetCppFile(p);
			} else if (boost::regex_search(str, hppRegex)) {

			}
		}
	}

	public void ParseFileSet(const RegexFileSet & fileSet,
		                     const PathListPtr & excludeFiles)
	{
		RegexFileSetIterator itr = fileSet.Begin();
		RegexFileSetIterator end = fileSet.End();
		for(; itr != end; ++ itr)
		{
			path p = *itr;
			Path relativePath(fileSet.GetRoot(), p);
			ParseFile(relativePath, excludeFiles);
		}
	}

	public void ParseMacaroniFile(const Path & filePath) {
		LibraryTarget * mct =
			dynamic_cast<LibraryTarget *>(target.get());
		if (0 != mct)
		{
			mct->AddMacaroniFile(filePath);
		}
		std::stringstream fileContents;
		readFile(fileContents, filePath.GetAbsolutePath());

		FileNamePtr fileName = FileName::Create(filePath);
		SourcePtr source = Source::Create(fileName, 1, 1);
		PippyParser parser;
		parser.Read(target, source, fileContents.str());
	}

	/** Helper function which reads in a file. */
	private void readFile(stringstream & contents, const string & filePath)
	{
		ifstream file(filePath.c_str());
		if (!file.is_open())
		{
			throw CouldNotReadFileException(filePath);
		}
		string line;
		while(! file.eof())
		{
			std::getline(file, line);
			contents << line << "\n";
		}
		file.close();
	}

};

# Jam file for "pure" C++ source

import boost ;
boost.use-project 1.42 ;

using testing ;
		
alias source
	:	[ glob-tree *.c	: .svn ]
		[ glob-tree *.cpp	: .svn *Test.cpp ]
		/boost//filesystem
		/boost//regex			
	:	<include>./		
		<include>../GeneratedSource	
	;
###############################################################################
#		We specify all of the sources defined in the two directories,
#	plus the main unit as it is not included with the normal source.
###############################################################################

alias sources
	:	Source//source
		GeneratedSource//generated
	;
			
#unit-test tests 
#	:	Source//tests
#		sources
#	;

#alias tests : Source//tests ; 
# If you don't specify <link>static, it won't work. Windows requires special
# code annotations to export DLL symbols.  Curse it's black heart.
lib mlib
	:	sources
	:	<link>static 
	;
	
#unit-test Macaroni_Model_NodeTests 
#	:	Source/Macaroni/Model/NodeTest.cpp
#		mlib		
#	;

#unit-test Macaroni_Model_ContextTests 
#	:	Source/Macaroni/Model/ContextTest.cpp
#		mlib		
#	;
	
	
alias tests
	#: Macaroni_Model_ContextTests Macaroni_Model_NodeTests 
	:
		#[ unit-test Macaroni_Model_NodeTests 
		#	:	Source/Macaroni/Model/NodeTest.cpp 
		#		mlib	
		#]
		[ run Source/Macaroni/IO/GeneratedFileWriterTest.cpp mlib ]
		[ run Source/Macaroni/Model/AttributeValueTest.cpp mlib ]
		[ run Source/Macaroni/Model/NodeTest.cpp mlib ]
		[ run Source/Macaroni/Model/ContextTests.cpp mlib ]				
	;

exe macaroni 
	:	mlib
		Source/Main.cpp	
		Macaroni.rc
	:	<dependency>tests # <-- Force tests to pass before creating EXE	
	;

###############################################################################
#		The feature <dependency> ensures the targets are built and exist
#	even if target named (the unit tests) are kept up to date
#	when the exe is updated, but it doesn't attempt to actually use them for
#	the exe.
###############################################################################
# Store macaroni.exe in the Release directory.
install installmsgs
	:	Source//messages
	:	<variant>debug:<location>release/debug
		<variant>release:<location>release/release
	;
	
install installgenerators
	:	Source//luagenerators
	:	<variant>debug:<location>release/debug/Generators
		<variant>release:<location>release/release/Generators
		<install-source-root>Source/Generators
	;

alias pureCppSource
	:	[ glob-tree *.c	: .svn ]
		[ glob-tree *.cpp	: .svn ]
		[ glob-tree *.h	: .svn ]		
		Source/Messages.txt
	:	<include>./		
		<include>../GeneratedSource	
	;
install savePureCppSource1
	:	Source//pureCppSource
	:	<location>release/pureCppSource	
		<install-source-root>Source
	;	
install savePureCppSource2
	:	GeneratedSource//pureCppSource
	:	<location>release/pureCppSource		
		<install-source-root>GeneratedSource
	;	
install savePureCppSource3
	:	icon1.ico
		Macaroni.rc
		Macaroni.rc2
		resource.h	
		VersionNo.h	
	:	<location>release/pureCppSource
	;
	
install savePureCppSource4
	:	Source/PureCppOnlyFiles/jamroot.jam
	:	<location>release/pureCppSource
		<install-source-root>Source/PureCppOnlyFiles
	;
		
alias savePureCppSource
	:	savePureCppSource1
		savePureCppSource2
		savePureCppSource3
		savePureCppSource4
	;
		
alias final-deps 
	:	tests #Source//tests #tests #Source//nodeTests
		installgenerators
		installmsgs
	#:	<dependency>Source//nodeTests
	#	<dependency>installexe
	#	<dependency>installmsgs
	#	<dependency>installgenerators
	;
	
install final 
	:	macaroni		 
		#<file>Source/Messages.txt
	:	<install-dependencies>on <install-type>EXE
		<install-type>LIB
		<variant>debug:<location>release/debug
		<variant>release:<location>release/release
		<dependency>final-deps
		#<dependency>Source//nodeTests
		#<dependency>installmsgs	
		#<dependency>installgenerators
	;


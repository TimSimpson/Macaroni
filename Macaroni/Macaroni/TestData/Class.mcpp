#include h <boost/shared_ptr.hpp>
#include h "../ME.h"
#include c <sstream>;
#include h <string>;
#include h <vector>
#import BaseClass
#import BaseClassPtr;
#import Namespace;
#import NamespacePtr;

namespace Macaroni::Model
{	
	class Class
	{
		private	std::vector baseClasses;
		private std::string body;
		private std::string name;
		private NamespacePtr namespacePtr;

		private Class(NamespacePtr ns, std::string & name)
		: namespacePtr(ns), name(name)
		{
			MACARONI_ASSERT(simpleName.find(':') == std::string::npos,
					"Name in Class ctor must be simple.");
		}
		
		public void addBaseClass(BaseClassPtr baseClass)
		{
			baseClasses.push_back(ptr);
		}	

		public static ClassPtr FindOrCreate(NamespacePtr startingNs, 
											std::string & complexName)
		{
			NamespacePtr finalNs;
			std::string simpleName;
			Namespace::FindOrCreate(startingNs, complexName, finalNs, simpleName);
			ClassPtr newInstance(new Class(finalNs, simpleName));
			return finalNs->InsertClass(newInstance);	
		}

		public NamespacePtr GetNamespace() const
		{
			return namespacePtr;
		}

		public void SetBody(std::string & value)
		{
			this->body = value;
		}
	}
}

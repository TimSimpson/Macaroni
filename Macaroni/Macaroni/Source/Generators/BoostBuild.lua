require "Macaroni.IO.GeneratedFileWriter";
require "Macaroni.Model.Library";
require "Macaroni.IO.Path";
--require "Macaroni.IO.PathList";


function Build(library, sources, outputPath, installPath, extraArgs)
	local buildjam = outputPath:NewPath("/jamroot.jam");
	print("Creating Boost.Build file at " .. buildjam.AbsolutePath .. ".");
	local excludePattern;
	if (extraArgs == nil or extraArgs.ExcludePattern == nil) then
		excludePattern = ".svn";
	else
		excludePattern = extraArgs.ExcludePattern;	
	end
	local writer = buildjam:CreateFile();		
	
	local forAllSourcesWrite = function(text) 
		writer:Write(text(outputPath.AbsolutePath));
		for i = 1, #sources do
			local source = sources[i];
			writer:Write(text(source.AbsolutePath));		
		end	
	end;
	
	writer:Write([[
# Generated by Macaroni.

import boost ;
import path ;

boost.use-project 1.42 ;

import site-config ;


project
	:	usage-requirements
]]);
	forAllSourcesWrite(function(src) return " <include>" .. src .. " "; end);
	writer:Write([[
	;
	
alias localSources
	:	]]);
	forAllSourcesWrite(function(src) return [[
		[ path.glob-tree ]] .. src .. [[/ : *.c : ]] .. excludePattern .. [[ ]
		[ path.glob-tree ]] .. src .. [[/ : *.cpp : ]] .. excludePattern .. [[ ]
		]]; end);
	writer:Write(" : ");
	forAllSourcesWrite(function(src) return [[
		<include>]] .. src .. [[		
		]]; end);
	writer:Write([[
	;
	
alias sources
	:	localSources
		#/boost//regex # TODO: I'm including this because I don't know how to 
		#			  # reference the smart_ptr project... 
	;
	
exe binary
	:	sources					
	;
    ]]);
    writer:Close();    
    local rtnCode = os.execute("bjam " .. outputPath.AbsolutePath)
    print("BJAM return code = " .. rtnCode .. ".")
    if (rtnCode ~= 0) then
        error("Call to Boost.Build failed.")
        return false;
    end
    return true;
end

function Install(library, sourcePaths, outputPath, installPath)
	-- Create a Jam file which simply points to the source files.
	-- Copy all C++ source to the folder.
	local patterns = {[[\.c(pp)?$]], [[\.h(pp)?$]]}
	local paths = sourcePaths 
	for k,pattern in ipairs(patterns) do
		for i = 0, #sourcePaths do			
			local path;
			if (i == 0) then 
				path = outputPath; 				
			else
				path = sourcePaths[i];
			end
			copyCppSource(pattern, path, installPath);				
		end 
	end	
end

-- Copy all .C, .CPP, .H and .HPP files to dir.=
function copyCppSource(regEx, src, dst) 
	local srcs = src:GetPaths(regEx);	
	for i = 1, #srcs do
		local child = srcs[i];
		if (not child.IsDirectory) then
			print(tostring(child.AbsolutePath) .. " ... " .. tostring(dst.AbsolutePath));
			--src:CreateDirectory();
			src:CopyToDifferentRootPath(dst);		
		else
			-- May not be necessary
			-- iterateDir(regEx, child, dst);
		end
	end
end


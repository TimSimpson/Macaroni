require "Cpp/Common";
require "LuaGlue/LuaGlueCppFile";
require "LuaGlue/LuaGlueHFile";
require "Macaroni.Model.Library";
require "Macaroni.Model.Node";
require "Cpp/NodeInfo";

RootNode = nil; -- This will be set by the Generate function.

function markNodeWithLua(node)
    local nodeInfo = NodeInfoList[node]
    nodeInfo.luaDef = "#include <" .. node:GetPrettyFullName("/") .. "Lua.h>\n";
end

function parseNode(rootPath, node, ptrNode)
    local hGen = LuaGlueHFile.new({
        node = node,
        ptrNode = ptrNode,
        path = rootPath:NewPath("/" .. node:GetPrettyFullName("/") .. "Lua.h");
    });        
    hGen:parse();
    local cppGen = LuaGlueCppFile.new({
        node = node,
        ptrNode = ptrNode,
        path = rootPath:NewPath("/" .. node:GetPrettyFullName("/") .. "Lua.cpp");
    });        
    cppGen:parse();
end

-- To have Lua glue autogenerated, each Class must have a reference type,
-- such as a boost smartptr.
function Generate(library, path)
    RootNode = library.Context.Root;
    markNodeWithLua(library.Context.Root:Find("Macaroni::Model::Cpp::Access"));
    markNodeWithLua(library.Context.Root:Find("Macaroni::Model::Cpp::Class"));
    markNodeWithLua(library.Context.Root:Find("Macaroni::Model::Node"));
    
    local ClassParent = library.Context.Root:Find("Macaroni::Model::Cpp::ClassParent"); 
    local ClassParentPtr = library.Context.Root:Find("Macaroni::Model::Cpp::ClassParentPtr");
    parseNode(path, ClassParent, ClassParentPtr);
end

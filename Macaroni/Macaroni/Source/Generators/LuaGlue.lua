require "Macaroni.Model.AttributeTable"
require "Macaroni.Model.AttributeValue";
require "Macaroni.Model.Axiom";
require "Cpp/Common";
require "Macaroni.Model.FileName";
require "LuaGlue/LuaGlueCppFile";
require "LuaGlue/LuaGlueHFile";
require "Macaroni.Model.Library";
require "Macaroni.Model.Node";
require "Cpp/NodeInfo";

Axiom = Macaroni.Model.Axiom;
FileName = Macaroni.Model.FileName;
NodeList = Macaroni.Model.NodeList;
Source = Macaroni.Model.Source;

LuaGlueAxioms =
{
    LuaClassStart = Axiom.LuaCreate("LuaGlue.LuaClassWraps");
};

CurrentFileName = FileName.Create("LuaGlue.lua");

RootNode = nil; -- This will be set by the Generate function.

function markNodeWithLua(node)
    local nodeInfo = NodeInfoList[node]
    nodeInfo.luaDef = "#include <" .. node:GetPrettyFullName("/") .. "Lua.h>\n";
end

function parseNode(rootPath, node, ptrNode)
    local hGen = LuaGlueHFile.new({
        node = node,
        ptrNode = ptrNode,
        path = rootPath:NewPath("/" .. node:GetPrettyFullName("/") .. "Lua.h");
    });        
    hGen:parse();
    local cppGen = LuaGlueCppFile.new({
        node = node,
        ptrNode = ptrNode,
        path = rootPath:NewPath("/" .. node:GetPrettyFullName("/") .. "Lua.cpp");
    });        
    cppGen:parse();
end

function findAllAttr(node, attr)
    if (node == nil) then
        return {};
    end    
    local rtn = {}
    local nodes = node.Children
    for i = 1, #nodes do
        local n = nodes[i];
        if (n.Attributes[attr]) then
            rtn[#rtn + 1] = n
        end
        for k,v in pairs(findAllAttr(n, attr)) do 
            rtn[k] = v 
        end
    end
    return rtn;
end

-- To have Lua glue autogenerated, each Class must have a reference type,
-- such as a boost smartptr.
function Generate(library, path)
    CurrentLibrary = library;
    RootNode = library.Context.Root;
    LuaClass = "Macaroni::Lua::LuaClass";--RootNode:FindOrCreate("Macaroni::Lua::LuaClass");
    
    local classes = findAllAttr(RootNode, LuaClass);
    
    print "BEGIN LUA GLUE";
    _.each(classes, wrapClass);
    print "END LUA GLUE";
    --[[markNodeWithLua(library.Context.Root:Find("Macaroni::Model::Cpp::Access"));
    markNodeWithLua(library.Context.Root:Find("Macaroni::Model::Cpp::Class"));
    markNodeWithLua(library.Context.Root:Find("Macaroni::Model::Node"));
    
    local ClassParent = library.Context.Root:Find("Macaroni::Model::Cpp::ClassParent"); 
    local ClassParentPtr = library.Context.Root:Find("Macaroni::Model::Cpp::ClassParentPtr");
    parseNode(path, ClassParent, ClassParentPtr);]]--
    
end

function wrapClass(node)
    
    function createClass()
        local metaNode = RootNode:FindOrCreate(node.FullName .. "LuaMetaData");
        print("Wrapping " .. tostring(node) .. " as " .. tostring(metaNode) .. ".");
        local imports = NodeList.New({});
        local axiom = LuaGlueAxioms.LuaClassStart;
        local src = Source.Create(CurrentFileName, 3, 5);
        local reason = Reason.Create(axiom, src);
        local metaClass = Class.Create(CurrentLibrary, metaNode, imports, reason);
    end

    createClass();
    
    
end
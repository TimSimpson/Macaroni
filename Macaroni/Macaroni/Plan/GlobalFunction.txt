In a Macaroni Class definition, you can create a global function using the word 
global.  This will automatically create a function of the given form and forward
declare it in the .H file while defining it in the CPP file.

class One
{
	public global void DoSomething(char * blah){}
}

in .h:

class One
{
	friend void DoSomething(char * blah);
}
void DoSomething(char * blah);

in CPP:

DoSomething(char * blah) {}


If you declare a private global, it will only be declared in the .H file.

class One
{
private global void DoSomething(char * blah){}
}

in .h
class One {
friend void DoSomething(char * blah);
}

in cpp:
DoSomething(char * blah);

DoSomething(char * blah) {} 

If not allowing linkage is important, you can do this:

public static global void DoSomething();

...

But maybe not because this is really just used for interfacing with old C
libraries which require call backs to public methods.




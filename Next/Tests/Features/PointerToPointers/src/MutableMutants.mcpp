//MDOC-BEGIN mutant
~import std::string;

~extern type_traits include=<type_traits> ;
~import-h type_traits;

class Mutant
{

    mutable string name;
    volatile int mutantPowers;

    public string GetName() const
    {
        // Illegal in const member unless name is mutable.
        name = "Mutating name!";
        return name;
    }

    ~block "h"
    {
        // Weird... GCC will not allow argument two of "is_same" to be
        // 'mutable std::string' though it makes sense and MSVC allows it.
        // So decltype has to be used twice instead.
        mutable std::string name2;

        static_assert(std::is_same<decltype(name), decltype(name2)>::value,
                      "mutable is not working!");
        static_assert(std::is_same<decltype(mutantPowers), volatile int>::value,
                      "volatile is not working!");
    }
};
//MDOC-END mutant



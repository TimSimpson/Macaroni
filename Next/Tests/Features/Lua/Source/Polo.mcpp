~import std::exception;
~import Macaroni::Lua::LuaClass;
~import Macaroni::Lua::LuaFunction;
~import Macaroni::Lua::LuaProperty;
~import std::string;
~import Macaroni::Tests::Lua::Polo;
~import Macaroni::Tests::Lua::PoloPtr;
~import boost::intrusive_ptr;

// Plain old Lua Object

namespace Macaroni::Tests::Lua
{
	class PoloException : public exception
	{
		public virtual const char * what() const throw()
		{
			return  "Wait, I didn't notice when you set it "
					"originally, but now I realize that Suzy is a variant of "
					"Sue.  Get ready for one freakin' mother of an exception, "
					"bubb.";
		}
	};

	class SueNameException : public exception
	{
		public virtual const char * what() const throw()
		{
			return  "No! Not Sue, I hate that name.";
		}
	};

	class Polo {};

	typedef intrusive_ptr<Polo> PoloPtr
		@LuaClass [ SameAsNode = Polo ]
	;

	class Polo
	  @LuaClass
	  [
	    ReferenceType = PoloPtr,
	  ]
	{
		~import Macaroni::Tests::Lua::PoloException;
		~import Macaroni::Tests::Lua::SueNameException;
		private string name;
		private int refCount;

		public Polo()
		: name(""),
		  refCount(0)
		{
		}

		public const string & GetName() const
		@LuaFunction "GetName"
		@LuaProperty ={Name}
		{
			if (name == "Suzy")
			{
				throw PoloException();
			}
			return name;
		}

		public inline int GetReferenceCount() const
		@LuaFunction "GetReferenceCount"
		{
			return refCount;
		}

		public ~friend ~global void intrusive_ptr_add_ref(Polo * p)
		{
			p->refCount ++;
		}

		//friend intrusive_ptr_add_ref;

		public ~friend ~global void intrusive_ptr_release(Polo * p)
		{
			p->refCount --;
			if (p->refCount <= 0)
			{
				delete p;
			}
		}

		// friend intrusive_ptr_release;

		public void NonLuaFunction(string & something)
		{
			something = "This should not be called from Lua...";
		}

		public void SetName(const string & newName)
		@LuaFunction "SetName"
		@LuaProperty "Name"
		{
			if (newName == "Sue")
			{
				throw SueNameException();
			}
			this->name = newName;
		}

		public static string PointlessStaticFunctionGet(const PoloPtr & ptr)
		@LuaFunction "PointlessStaticFunctionGet"
		{
			return ptr->GetName();
		}

		public static void PointlessStaticFunctionSet(const PoloPtr & ptr,
		                                              string name)
		@LuaFunction "PointlessStaticFunctionSet"
		{
			ptr->SetName(name);
		}
	};

} //end ns

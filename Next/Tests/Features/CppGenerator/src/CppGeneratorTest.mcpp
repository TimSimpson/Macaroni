~import SuperHatNamespace::Hats;
~import std::vector;

~unit "MyFunProject/Hats" ;

namespace SuperHatNamespace {

class Hats
// Handles the topping of heads.
{
    ~block "top"
    {
        // TOP BLOCK!
    }
    ~block "h"
    {
        // Random H code in Hats.h?
    }
    ~block "cpp"
    {
        // Random C++ code in Hats.cpp?
    }
    ~block "bottom"
    {
        // BOTTOM BLOCK!
    }
    int w;

    public Hats(int w)
    :   w(w)
    {
    }

    public int width(std::vector<double> & vec)
    {
        return w;
    }

    public ~Hats()
    {
        // I will destroy the turtles!
    }

    public inline int two() const
    {
        return 2;
    }
};

} // end of SuperHatNamespace

int superbats(int how_many_bats)
{
    return 5;  // There are five bats.
}

typedef std::vector<double> HellaType;

void superbats(const HellaType & h)
{
}

void superbats(HellaType h)
{
}

int ten;

typedef int Int;

class NeedsHats
{
    Hats h;
};


class NeedsHatsPointer
{
    Hats & h;

    void HatedHat(Hats & h)
    {
    }
};

~import std::string;

class SubHats : public Hats
{};

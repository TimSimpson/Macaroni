<~#include <header.mdoc>~>

<h3>Getting Started with Macaroni</h3>

<div>
<i>
<ul>
<li>This tutorial is for the Windows version, which is currently the 
only one that works.</li>
<li>The version number of Macaroni refered to in this tutorial may be out of 
sync as times in this tutorial as images and some text are not generated with 
each new build of Macaroni.</li>
</i></div>

<p>
This tutorial will show the quickest path to using Macaroni in the simplest 
possible way.
</p><p>
Macaroni is able to generate source code and call tools to compile and
test C++ programs. Here we'll show how to do the former.</p>
<img style="float:right" src="<~#path </../images/WinExplorer.jpg> ~>"/>
<p>
First, <a href="<~#path "download.html" ~>">download Macaroni from this link</a>. 
You'll might need to install the MS Visual C++ 2008 Redistributable Package 
as well if you've never installed Visual Studio.  Anyway, unzip the zip file
and put the entire directory somewhere nice. For this tutorial
I'll assume you're unzipping it to "C:\Tools\macaroni-<~= library.Version ~>".
</p>

<h4>Add Macaroni's directory to you %PATH% environment variable.</h4>
<p>There are a few ways to do this in Windows. My preference it to create a 
batch file that manipulates the path variable which can be called from a 
command prompt used for development.</p>
<p>Create a new file called "devinit.bat" and place the following inside it:</p>

<~lua require "Site" Site.shellToHtml([[
SET PATH=%PATH%;C:\Tools\macaroni-0.1.0.22
]]); ~>

<p>
Now start a command prompt and execute devinit.bat.  Type "macaroni" and the following
should appear:</p>
<~lua require "Site" Site.shellToHtml([[
C:\>cd Tools

C:\Tools>type devinit.bat
SET PATH=%PATH%;C:\Tools\macaroni-0.1.0.22
C:\Tools>macaroni
Macaroni for C++
Version 0.1.0.22 built at 2011-7-30-17:25:22

Could not find init.lua at "C:\Documents and Settings\Tim\Macaroni\init.lua".
THROWN EXCEPTION:Could not open Lua file "manifest.lua".

An error occurred.

Could not open Lua file "manifest.lua".


Program finished.

C:\Tools>

]]); ~>


<div><b>NOTE: If you see "The system cannot execute the specified program," it means you
need to first download and install the <a href="<~#path "download.html" ~>">
Microsoft Visual C++ Redistributable Package</a></b></div>

<p>
If you see the above, good! It means that Macaroni is succesfully installed.
</p>
<div style="background-color:#b0c4de;"><table><tr><td><span style="float:left" ><img src="../images/INoUnderstand.gif"/></span>
What is "init.lua"? If you guessed a script that gets executed every time you invoke 
Macaroni, you're right! I'll discuss it more in a later tutorial.</td></tr></table>
</div>

<h4>Coding in Macaroni</h4>
<p>
Macaroni starts by reading a file called "manifest.lua" in the current 
directory which contains information describing the project.
</p>
<p>
Create a new directory somewhere (mine's "C:\Work\MacaroniExample") and create
a file called "manifest.lua" with the following contents:
</p>

<~lua
local manifest = Site.readLibraryFile(
	{Group="Macaroni.Examples", Name="Hello", Version="1.0.0.0"},
	"original/manifest.lua", 1, 17);
Site.luaToHtml(manifest .. [[


function generate()
    run("cpp")
    run("htmlview")
end
]]);
~>

<p>
The manifest file is written in the <a href="http://www.lua.org/">Lua 
programming language</a>. Lua is a scripting language similar to Javascript 
which is often embedded in native apps. Macaroni uses it in prolifically.</p>
<p>Here's a summary of what's going on in the 
file above:</p>
<ul>
<li>
Macaroni reads this file to figure out the library ID. The ID is stored as a
Lua table with three values: group, name, and version.
</li>
<li>A description can be given to libraries to make them a bit easier to 
grok. Lua can use the syntax "[[" and "]]" to easily create multiline
strings.</li>
<li>"sources" is all of the source directories (relative from the location 
of "manifest.lua") that Macaroni needs to iterate to find files ending in 
.mcpp which it will then parse.  It's an array-style table because there could
be multiple source directories.</li>
<li>"output" is where Macaroni will output all of its generated source code.</li>
<li>"dependency" is a function which declares an external dependency for
this project. In this case, we're telling Macaroni that we'll be using the C++
standard library as defined in 2003. The group is "Macaroni" to denote that
the dependency is included with Macaroni and was authored by Macaroni and not,
say, the C++ standard's committee or some compiler vendor.  Macaroni includes 
several libraries out of the box that can be used as project dependencies
like this, such as ones for Boost (it doesn't include the C++ source code-
more on how this works later).</li>
</ul>
<p>
At the command prompt, enter the directory and execute "macaroni build".
</p>
<~lua require "Site" Site.shellToHtml([==[
C:\Work\MacaroniExample>macaroni generate
Macaroni for C++
Version 0.1.0.22 built at 2011-7-30-17:25:22

Could not find init.lua at "C:\Documents and Settings\Tim\Macaroni\init.lua".
--------------------------------------------------------------------------------

    Hello
--------------------------------------------------------------------------------

~ Creating Macaroni model from source files (.mh, .mcpp). ~
~ Success!

Program finished.
]==]); ~>
<p>
As you can see everything was successful. Of course this didn't actually do anything...</p>
<h4>Writing a C++ class in Macaroni</h4>
<p>
In the same directory as the "manifest.lua" file create a new directory named "source". 
Within that, make a new file called "A"


<~#include <footer.mdoc> ~>